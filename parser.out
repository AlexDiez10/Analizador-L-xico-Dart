Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    ASSERT
    ASYNC
    AWAIT
    BREAK
    CASE
    CATCH
    CLASS
    COMMENT
    CONST
    CONTINUE
    COVARIANT
    DEFAULT
    DOC_COMMENT
    ENUM
    EXPORT
    EXTENDS
    FINAL
    FINALLY
    FOR
    GET
    IMPLEMENTS
    IMPORT
    IN
    IS
    LATE
    NEW
    NULL
    ON
    OPERATOR
    REQUIRED
    RETHROW
    SET
    STATIC
    SUPER
    SWITCH
    THIS
    THROW
    TRY
    WITH

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     sentencias -> asignar_variable
Rule 4     sentencias -> cambiar_variable
Rule 5     sentencias -> impresion
Rule 6     sentencias -> condicional
Rule 7     sentencias -> funcion
Rule 8     sentencias -> retorno
Rule 9     sentencias -> while
Rule 10    asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON
Rule 11    asignar_variable -> tipo_dato VARIABLE SEMICOLON
Rule 12    cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON
Rule 13    cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON
Rule 14    cambiar_variable -> VARIABLE asignador expresion SEMICOLON
Rule 15    asignador -> ASSIGN
Rule 16    asignador -> PLUS_ASSIGN
Rule 17    asignador -> MINUS_ASSIGN
Rule 18    asignador -> TIMES_ASSIGN
Rule 19    asignador -> DIVIDE_ASSIGN
Rule 20    asignador -> MODULO_ASSIGN
Rule 21    expresion -> operacion
Rule 22    expresion -> comparacion
Rule 23    expresion -> list
Rule 24    expresion -> diccionario
Rule 25    expresion -> input
Rule 26    retorno -> RETURN SEMICOLON
Rule 27    retorno -> RETURN operacion SEMICOLON
Rule 28    impresion -> PRINT LPAREN operacion RPAREN SEMICOLON
Rule 29    impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON
Rule 30    impresion -> PRINT LPAREN RPAREN SEMICOLON
Rule 31    input -> STDIN DOT READLINESYNC LPAREN RPAREN
Rule 32    elemento -> INT
Rule 33    elemento -> VARIABLE
Rule 34    elemento -> DOUBLE
Rule 35    elemento -> STRING
Rule 36    elemento -> BOOLEAN
Rule 37    comparacion -> operacion comparador operacion
Rule 38    comparacion_logica -> comparacion
Rule 39    comparacion_logica -> comparacion operador_logico comparacion_logica
Rule 40    operador_logico -> AND
Rule 41    operador_logico -> OR
Rule 42    operador_logico -> NOT
Rule 43    comparador -> EQUALITY
Rule 44    comparador -> INEQUALITY
Rule 45    comparador -> GREATER_THAN
Rule 46    comparador -> LESS_THAN
Rule 47    comparador -> GREATER_EQ_THAN
Rule 48    comparador -> LESS_EQ_THAN
Rule 49    operacion -> elemento
Rule 50    operacion -> elemento operador operacion
Rule 51    operador -> PLUS
Rule 52    operador -> MINUS
Rule 53    operador -> TIMES
Rule 54    operador -> DIVIDE
Rule 55    operador -> MODULO
Rule 56    list -> LBRACKETS element_list RBRACKETS
Rule 57    list -> LBRACKETS RBRACKETS
Rule 58    element_list -> elemento
Rule 59    element_list -> elemento COMA element_list
Rule 60    tipo_dato -> VAR_TYPE
Rule 61    tipo_dato -> INT_TYPE
Rule 62    tipo_dato -> STRING_TYPE
Rule 63    tipo_dato -> DOUBLE_TYPE
Rule 64    tipo_dato -> BOOL_TYPE
Rule 65    tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN
Rule 66    tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
Rule 67    tipo_coleccion -> INT_TYPE
Rule 68    tipo_coleccion -> STRING_TYPE
Rule 69    tipo_coleccion -> DOUBLE_TYPE
Rule 70    tipo_coleccion -> BOOL_TYPE
Rule 71    while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 72    while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
Rule 73    diccionario -> LKEY key_element_list RKEY
Rule 74    key_element -> elemento DOS_PUNTOS elemento
Rule 75    key_element_list -> key_element
Rule 76    key_element_list -> key_element COMA key_element_list
Rule 77    condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 78    condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 79    bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 80    bloques_else -> ELSE LKEY programa RKEY
Rule 81    funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
Rule 82    funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
Rule 83    parametros -> tipo_dato VARIABLE
Rule 84    parametros -> tipo_dato VARIABLE COMA parametros

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 40
AS                   : 
ASSERT               : 
ASSIGN               : 15
ASYNC                : 
AWAIT                : 
BOOLEAN              : 36
BOOL_TYPE            : 64 70
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COMA                 : 59 66 76 84
COMMENT              : 
CONST                : 
CONTINUE             : 
COVARIANT            : 
DECREMENT_VAR        : 13
DEFAULT              : 
DIVIDE               : 54
DIVIDE_ASSIGN        : 19
DO                   : 72
DOC_COMMENT          : 
DOS_PUNTOS           : 74
DOT                  : 31
DOUBLE               : 34
DOUBLE_TYPE          : 63 69
ELSE                 : 79 80
ENUM                 : 
EQUALITY             : 43
EXPORT               : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FOR                  : 
GET                  : 
GREATER_EQ_THAN      : 47
GREATER_THAN         : 45 65 66
IF                   : 77 78 79
IMPLEMENTS           : 
IMPORT               : 
IN                   : 
INCREMENT_VAR        : 12
INEQUALITY           : 44
INT                  : 32
INT_TYPE             : 61 67
IS                   : 
LATE                 : 
LBRACKETS            : 56 57
LESS_EQ_THAN         : 48
LESS_THAN            : 46 65 66
LIST                 : 65
LKEY                 : 71 72 73 77 78 79 80 81 82
LPAREN               : 28 29 30 31 71 72 77 78 79 81 82
MAP                  : 66
MINUS                : 52
MINUS_ASSIGN         : 17
MODULO               : 55
MODULO_ASSIGN        : 20
NEW                  : 
NOT                  : 42
NULL                 : 
ON                   : 
OPERATOR             : 
OR                   : 41
PLUS                 : 51
PLUS_ASSIGN          : 16
PRINT                : 28 29 30
RBRACKETS            : 56 57
READLINESYNC         : 31
REQUIRED             : 
RETHROW              : 
RETURN               : 26 27
RKEY                 : 71 72 73 77 78 79 80 81 82
RPAREN               : 28 29 30 31 71 72 77 78 79 81 82
SEMICOLON            : 10 11 12 13 14 26 27 28 29 30 72
SET                  : 
STATIC               : 
STDIN                : 31
STRING               : 35
STRING_TYPE          : 62 68
SUPER                : 
SWITCH               : 
THIS                 : 
THROW                : 
TIMES                : 53
TIMES_ASSIGN         : 18
TRY                  : 
VARIABLE             : 10 11 12 13 14 33 81 82 83 84
VAR_TYPE             : 60
VOID                 : 81 82
WHILE                : 71 72
WITH                 : 
error                : 

Nonterminals, with rules where they appear

asignador            : 10 14
asignar_variable     : 3
bloques_else         : 77 79
cambiar_variable     : 4
comparacion          : 22 38 39
comparacion_logica   : 29 39 71 72 77 78 79
comparador           : 37
condicional          : 6
diccionario          : 24
element_list         : 56 59
elemento             : 49 50 58 59 74 74
expresion            : 10 14
funcion              : 7
impresion            : 5
input                : 25
key_element          : 75 76
key_element_list     : 73 76
list                 : 23
operacion            : 21 27 28 37 37 50
operador             : 50
operador_logico      : 39
parametros           : 81 84
programa             : 2 71 72 77 78 79 80 81 82 0
retorno              : 8
sentencias           : 1 2
tipo_coleccion       : 65 66 66
tipo_dato            : 10 11 83 84
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    $end            reduce using rule 1 (programa -> sentencias .)
    RKEY            reduce using rule 1 (programa -> sentencias .)
    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    sentencias                     shift and go to state 2
    programa                       shift and go to state 25
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 3

    (3) sentencias -> asignar_variable .

    VARIABLE        reduce using rule 3 (sentencias -> asignar_variable .)
    PRINT           reduce using rule 3 (sentencias -> asignar_variable .)
    IF              reduce using rule 3 (sentencias -> asignar_variable .)
    VOID            reduce using rule 3 (sentencias -> asignar_variable .)
    RETURN          reduce using rule 3 (sentencias -> asignar_variable .)
    WHILE           reduce using rule 3 (sentencias -> asignar_variable .)
    DO              reduce using rule 3 (sentencias -> asignar_variable .)
    VAR_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    INT_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    STRING_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    BOOL_TYPE       reduce using rule 3 (sentencias -> asignar_variable .)
    LIST            reduce using rule 3 (sentencias -> asignar_variable .)
    MAP             reduce using rule 3 (sentencias -> asignar_variable .)
    $end            reduce using rule 3 (sentencias -> asignar_variable .)
    RKEY            reduce using rule 3 (sentencias -> asignar_variable .)


state 4

    (4) sentencias -> cambiar_variable .

    VARIABLE        reduce using rule 4 (sentencias -> cambiar_variable .)
    PRINT           reduce using rule 4 (sentencias -> cambiar_variable .)
    IF              reduce using rule 4 (sentencias -> cambiar_variable .)
    VOID            reduce using rule 4 (sentencias -> cambiar_variable .)
    RETURN          reduce using rule 4 (sentencias -> cambiar_variable .)
    WHILE           reduce using rule 4 (sentencias -> cambiar_variable .)
    DO              reduce using rule 4 (sentencias -> cambiar_variable .)
    VAR_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    INT_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    STRING_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    DOUBLE_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    BOOL_TYPE       reduce using rule 4 (sentencias -> cambiar_variable .)
    LIST            reduce using rule 4 (sentencias -> cambiar_variable .)
    MAP             reduce using rule 4 (sentencias -> cambiar_variable .)
    $end            reduce using rule 4 (sentencias -> cambiar_variable .)
    RKEY            reduce using rule 4 (sentencias -> cambiar_variable .)


state 5

    (5) sentencias -> impresion .

    VARIABLE        reduce using rule 5 (sentencias -> impresion .)
    PRINT           reduce using rule 5 (sentencias -> impresion .)
    IF              reduce using rule 5 (sentencias -> impresion .)
    VOID            reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)
    WHILE           reduce using rule 5 (sentencias -> impresion .)
    DO              reduce using rule 5 (sentencias -> impresion .)
    VAR_TYPE        reduce using rule 5 (sentencias -> impresion .)
    INT_TYPE        reduce using rule 5 (sentencias -> impresion .)
    STRING_TYPE     reduce using rule 5 (sentencias -> impresion .)
    DOUBLE_TYPE     reduce using rule 5 (sentencias -> impresion .)
    BOOL_TYPE       reduce using rule 5 (sentencias -> impresion .)
    LIST            reduce using rule 5 (sentencias -> impresion .)
    MAP             reduce using rule 5 (sentencias -> impresion .)
    $end            reduce using rule 5 (sentencias -> impresion .)
    RKEY            reduce using rule 5 (sentencias -> impresion .)


state 6

    (6) sentencias -> condicional .

    VARIABLE        reduce using rule 6 (sentencias -> condicional .)
    PRINT           reduce using rule 6 (sentencias -> condicional .)
    IF              reduce using rule 6 (sentencias -> condicional .)
    VOID            reduce using rule 6 (sentencias -> condicional .)
    RETURN          reduce using rule 6 (sentencias -> condicional .)
    WHILE           reduce using rule 6 (sentencias -> condicional .)
    DO              reduce using rule 6 (sentencias -> condicional .)
    VAR_TYPE        reduce using rule 6 (sentencias -> condicional .)
    INT_TYPE        reduce using rule 6 (sentencias -> condicional .)
    STRING_TYPE     reduce using rule 6 (sentencias -> condicional .)
    DOUBLE_TYPE     reduce using rule 6 (sentencias -> condicional .)
    BOOL_TYPE       reduce using rule 6 (sentencias -> condicional .)
    LIST            reduce using rule 6 (sentencias -> condicional .)
    MAP             reduce using rule 6 (sentencias -> condicional .)
    $end            reduce using rule 6 (sentencias -> condicional .)
    RKEY            reduce using rule 6 (sentencias -> condicional .)


state 7

    (7) sentencias -> funcion .

    VARIABLE        reduce using rule 7 (sentencias -> funcion .)
    PRINT           reduce using rule 7 (sentencias -> funcion .)
    IF              reduce using rule 7 (sentencias -> funcion .)
    VOID            reduce using rule 7 (sentencias -> funcion .)
    RETURN          reduce using rule 7 (sentencias -> funcion .)
    WHILE           reduce using rule 7 (sentencias -> funcion .)
    DO              reduce using rule 7 (sentencias -> funcion .)
    VAR_TYPE        reduce using rule 7 (sentencias -> funcion .)
    INT_TYPE        reduce using rule 7 (sentencias -> funcion .)
    STRING_TYPE     reduce using rule 7 (sentencias -> funcion .)
    DOUBLE_TYPE     reduce using rule 7 (sentencias -> funcion .)
    BOOL_TYPE       reduce using rule 7 (sentencias -> funcion .)
    LIST            reduce using rule 7 (sentencias -> funcion .)
    MAP             reduce using rule 7 (sentencias -> funcion .)
    $end            reduce using rule 7 (sentencias -> funcion .)
    RKEY            reduce using rule 7 (sentencias -> funcion .)


state 8

    (8) sentencias -> retorno .

    VARIABLE        reduce using rule 8 (sentencias -> retorno .)
    PRINT           reduce using rule 8 (sentencias -> retorno .)
    IF              reduce using rule 8 (sentencias -> retorno .)
    VOID            reduce using rule 8 (sentencias -> retorno .)
    RETURN          reduce using rule 8 (sentencias -> retorno .)
    WHILE           reduce using rule 8 (sentencias -> retorno .)
    DO              reduce using rule 8 (sentencias -> retorno .)
    VAR_TYPE        reduce using rule 8 (sentencias -> retorno .)
    INT_TYPE        reduce using rule 8 (sentencias -> retorno .)
    STRING_TYPE     reduce using rule 8 (sentencias -> retorno .)
    DOUBLE_TYPE     reduce using rule 8 (sentencias -> retorno .)
    BOOL_TYPE       reduce using rule 8 (sentencias -> retorno .)
    LIST            reduce using rule 8 (sentencias -> retorno .)
    MAP             reduce using rule 8 (sentencias -> retorno .)
    $end            reduce using rule 8 (sentencias -> retorno .)
    RKEY            reduce using rule 8 (sentencias -> retorno .)


state 9

    (9) sentencias -> while .

    VARIABLE        reduce using rule 9 (sentencias -> while .)
    PRINT           reduce using rule 9 (sentencias -> while .)
    IF              reduce using rule 9 (sentencias -> while .)
    VOID            reduce using rule 9 (sentencias -> while .)
    RETURN          reduce using rule 9 (sentencias -> while .)
    WHILE           reduce using rule 9 (sentencias -> while .)
    DO              reduce using rule 9 (sentencias -> while .)
    VAR_TYPE        reduce using rule 9 (sentencias -> while .)
    INT_TYPE        reduce using rule 9 (sentencias -> while .)
    STRING_TYPE     reduce using rule 9 (sentencias -> while .)
    DOUBLE_TYPE     reduce using rule 9 (sentencias -> while .)
    BOOL_TYPE       reduce using rule 9 (sentencias -> while .)
    LIST            reduce using rule 9 (sentencias -> while .)
    MAP             reduce using rule 9 (sentencias -> while .)
    $end            reduce using rule 9 (sentencias -> while .)
    RKEY            reduce using rule 9 (sentencias -> while .)


state 10

    (10) asignar_variable -> tipo_dato . VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> tipo_dato . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 26


state 11

    (12) cambiar_variable -> VARIABLE . INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> VARIABLE . DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> VARIABLE . asignador expresion SEMICOLON
    (15) asignador -> . ASSIGN
    (16) asignador -> . PLUS_ASSIGN
    (17) asignador -> . MINUS_ASSIGN
    (18) asignador -> . TIMES_ASSIGN
    (19) asignador -> . DIVIDE_ASSIGN
    (20) asignador -> . MODULO_ASSIGN

    INCREMENT_VAR   shift and go to state 27
    DECREMENT_VAR   shift and go to state 28
    ASSIGN          shift and go to state 30
    PLUS_ASSIGN     shift and go to state 31
    MINUS_ASSIGN    shift and go to state 32
    TIMES_ASSIGN    shift and go to state 33
    DIVIDE_ASSIGN   shift and go to state 34
    MODULO_ASSIGN   shift and go to state 35

    asignador                      shift and go to state 29

state 12

    (28) impresion -> PRINT . LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> PRINT . LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 36


state 13

    (77) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 37


state 14

    (81) funcion -> VOID . VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> VOID . VARIABLE LPAREN RPAREN LKEY programa RKEY

    VARIABLE        shift and go to state 38


state 15

    (26) retorno -> RETURN . SEMICOLON
    (27) retorno -> RETURN . operacion SEMICOLON
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    SEMICOLON       shift and go to state 39
    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    operacion                      shift and go to state 40
    elemento                       shift and go to state 41

state 16

    (71) while -> WHILE . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 47


state 17

    (72) while -> DO . LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    LKEY            shift and go to state 48


state 18

    (60) tipo_dato -> VAR_TYPE .

    VARIABLE        reduce using rule 60 (tipo_dato -> VAR_TYPE .)


state 19

    (61) tipo_dato -> INT_TYPE .

    VARIABLE        reduce using rule 61 (tipo_dato -> INT_TYPE .)


state 20

    (62) tipo_dato -> STRING_TYPE .

    VARIABLE        reduce using rule 62 (tipo_dato -> STRING_TYPE .)


state 21

    (63) tipo_dato -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 63 (tipo_dato -> DOUBLE_TYPE .)


state 22

    (64) tipo_dato -> BOOL_TYPE .

    VARIABLE        reduce using rule 64 (tipo_dato -> BOOL_TYPE .)


state 23

    (65) tipo_dato -> LIST . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 49


state 24

    (66) tipo_dato -> MAP . LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 50


state 25

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)
    RKEY            reduce using rule 2 (programa -> sentencias programa .)


state 26

    (10) asignar_variable -> tipo_dato VARIABLE . asignador expresion SEMICOLON
    (11) asignar_variable -> tipo_dato VARIABLE . SEMICOLON
    (15) asignador -> . ASSIGN
    (16) asignador -> . PLUS_ASSIGN
    (17) asignador -> . MINUS_ASSIGN
    (18) asignador -> . TIMES_ASSIGN
    (19) asignador -> . DIVIDE_ASSIGN
    (20) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 52
    ASSIGN          shift and go to state 30
    PLUS_ASSIGN     shift and go to state 31
    MINUS_ASSIGN    shift and go to state 32
    TIMES_ASSIGN    shift and go to state 33
    DIVIDE_ASSIGN   shift and go to state 34
    MODULO_ASSIGN   shift and go to state 35

    asignador                      shift and go to state 51

state 27

    (12) cambiar_variable -> VARIABLE INCREMENT_VAR . SEMICOLON

    SEMICOLON       shift and go to state 53


state 28

    (13) cambiar_variable -> VARIABLE DECREMENT_VAR . SEMICOLON

    SEMICOLON       shift and go to state 54


state 29

    (14) cambiar_variable -> VARIABLE asignador . expresion SEMICOLON
    (21) expresion -> . operacion
    (22) expresion -> . comparacion
    (23) expresion -> . list
    (24) expresion -> . diccionario
    (25) expresion -> . input
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (37) comparacion -> . operacion comparador operacion
    (56) list -> . LBRACKETS element_list RBRACKETS
    (57) list -> . LBRACKETS RBRACKETS
    (73) diccionario -> . LKEY key_element_list RKEY
    (31) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    LBRACKETS       shift and go to state 61
    LKEY            shift and go to state 62
    STDIN           shift and go to state 63
    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    expresion                      shift and go to state 55
    operacion                      shift and go to state 56
    comparacion                    shift and go to state 57
    list                           shift and go to state 58
    diccionario                    shift and go to state 59
    input                          shift and go to state 60
    elemento                       shift and go to state 41

state 30

    (15) asignador -> ASSIGN .

    LBRACKETS       reduce using rule 15 (asignador -> ASSIGN .)
    LKEY            reduce using rule 15 (asignador -> ASSIGN .)
    STDIN           reduce using rule 15 (asignador -> ASSIGN .)
    INT             reduce using rule 15 (asignador -> ASSIGN .)
    VARIABLE        reduce using rule 15 (asignador -> ASSIGN .)
    DOUBLE          reduce using rule 15 (asignador -> ASSIGN .)
    STRING          reduce using rule 15 (asignador -> ASSIGN .)
    BOOLEAN         reduce using rule 15 (asignador -> ASSIGN .)


state 31

    (16) asignador -> PLUS_ASSIGN .

    LBRACKETS       reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    LKEY            reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    STDIN           reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    INT             reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    DOUBLE          reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    STRING          reduce using rule 16 (asignador -> PLUS_ASSIGN .)
    BOOLEAN         reduce using rule 16 (asignador -> PLUS_ASSIGN .)


state 32

    (17) asignador -> MINUS_ASSIGN .

    LBRACKETS       reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    LKEY            reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    STDIN           reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    INT             reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    VARIABLE        reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    DOUBLE          reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    STRING          reduce using rule 17 (asignador -> MINUS_ASSIGN .)
    BOOLEAN         reduce using rule 17 (asignador -> MINUS_ASSIGN .)


state 33

    (18) asignador -> TIMES_ASSIGN .

    LBRACKETS       reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    LKEY            reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    STDIN           reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    INT             reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    VARIABLE        reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    DOUBLE          reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    STRING          reduce using rule 18 (asignador -> TIMES_ASSIGN .)
    BOOLEAN         reduce using rule 18 (asignador -> TIMES_ASSIGN .)


state 34

    (19) asignador -> DIVIDE_ASSIGN .

    LBRACKETS       reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    LKEY            reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    STDIN           reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    INT             reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    DOUBLE          reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)
    BOOLEAN         reduce using rule 19 (asignador -> DIVIDE_ASSIGN .)


state 35

    (20) asignador -> MODULO_ASSIGN .

    LBRACKETS       reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    LKEY            reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    STDIN           reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    INT             reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    VARIABLE        reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    DOUBLE          reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    STRING          reduce using rule 20 (asignador -> MODULO_ASSIGN .)
    BOOLEAN         reduce using rule 20 (asignador -> MODULO_ASSIGN .)


state 36

    (28) impresion -> PRINT LPAREN . operacion RPAREN SEMICOLON
    (29) impresion -> PRINT LPAREN . comparacion_logica RPAREN SEMICOLON
    (30) impresion -> PRINT LPAREN . RPAREN SEMICOLON
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN
    (37) comparacion -> . operacion comparador operacion

    RPAREN          shift and go to state 65
    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    operacion                      shift and go to state 64
    comparacion_logica             shift and go to state 66
    elemento                       shift and go to state 41
    comparacion                    shift and go to state 67

state 37

    (77) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (37) comparacion -> . operacion comparador operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    comparacion_logica             shift and go to state 68
    comparacion                    shift and go to state 67
    operacion                      shift and go to state 69
    elemento                       shift and go to state 41

state 38

    (81) funcion -> VOID VARIABLE . LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> VOID VARIABLE . LPAREN RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 70


state 39

    (26) retorno -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    PRINT           reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    IF              reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    VOID            reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    RETURN          reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    WHILE           reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    DO              reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    VAR_TYPE        reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    LIST            reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    MAP             reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    $end            reduce using rule 26 (retorno -> RETURN SEMICOLON .)
    RKEY            reduce using rule 26 (retorno -> RETURN SEMICOLON .)


state 40

    (27) retorno -> RETURN operacion . SEMICOLON

    SEMICOLON       shift and go to state 71


state 41

    (49) operacion -> elemento .
    (50) operacion -> elemento . operador operacion
    (51) operador -> . PLUS
    (52) operador -> . MINUS
    (53) operador -> . TIMES
    (54) operador -> . DIVIDE
    (55) operador -> . MODULO

    SEMICOLON       reduce using rule 49 (operacion -> elemento .)
    EQUALITY        reduce using rule 49 (operacion -> elemento .)
    INEQUALITY      reduce using rule 49 (operacion -> elemento .)
    GREATER_THAN    reduce using rule 49 (operacion -> elemento .)
    LESS_THAN       reduce using rule 49 (operacion -> elemento .)
    GREATER_EQ_THAN reduce using rule 49 (operacion -> elemento .)
    LESS_EQ_THAN    reduce using rule 49 (operacion -> elemento .)
    RPAREN          reduce using rule 49 (operacion -> elemento .)
    AND             reduce using rule 49 (operacion -> elemento .)
    OR              reduce using rule 49 (operacion -> elemento .)
    NOT             reduce using rule 49 (operacion -> elemento .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77

    operador                       shift and go to state 72

state 42

    (32) elemento -> INT .

    PLUS            reduce using rule 32 (elemento -> INT .)
    MINUS           reduce using rule 32 (elemento -> INT .)
    TIMES           reduce using rule 32 (elemento -> INT .)
    DIVIDE          reduce using rule 32 (elemento -> INT .)
    MODULO          reduce using rule 32 (elemento -> INT .)
    SEMICOLON       reduce using rule 32 (elemento -> INT .)
    EQUALITY        reduce using rule 32 (elemento -> INT .)
    INEQUALITY      reduce using rule 32 (elemento -> INT .)
    GREATER_THAN    reduce using rule 32 (elemento -> INT .)
    LESS_THAN       reduce using rule 32 (elemento -> INT .)
    GREATER_EQ_THAN reduce using rule 32 (elemento -> INT .)
    LESS_EQ_THAN    reduce using rule 32 (elemento -> INT .)
    RPAREN          reduce using rule 32 (elemento -> INT .)
    COMA            reduce using rule 32 (elemento -> INT .)
    RBRACKETS       reduce using rule 32 (elemento -> INT .)
    DOS_PUNTOS      reduce using rule 32 (elemento -> INT .)
    AND             reduce using rule 32 (elemento -> INT .)
    OR              reduce using rule 32 (elemento -> INT .)
    NOT             reduce using rule 32 (elemento -> INT .)
    RKEY            reduce using rule 32 (elemento -> INT .)


state 43

    (33) elemento -> VARIABLE .

    PLUS            reduce using rule 33 (elemento -> VARIABLE .)
    MINUS           reduce using rule 33 (elemento -> VARIABLE .)
    TIMES           reduce using rule 33 (elemento -> VARIABLE .)
    DIVIDE          reduce using rule 33 (elemento -> VARIABLE .)
    MODULO          reduce using rule 33 (elemento -> VARIABLE .)
    SEMICOLON       reduce using rule 33 (elemento -> VARIABLE .)
    EQUALITY        reduce using rule 33 (elemento -> VARIABLE .)
    INEQUALITY      reduce using rule 33 (elemento -> VARIABLE .)
    GREATER_THAN    reduce using rule 33 (elemento -> VARIABLE .)
    LESS_THAN       reduce using rule 33 (elemento -> VARIABLE .)
    GREATER_EQ_THAN reduce using rule 33 (elemento -> VARIABLE .)
    LESS_EQ_THAN    reduce using rule 33 (elemento -> VARIABLE .)
    RPAREN          reduce using rule 33 (elemento -> VARIABLE .)
    COMA            reduce using rule 33 (elemento -> VARIABLE .)
    RBRACKETS       reduce using rule 33 (elemento -> VARIABLE .)
    DOS_PUNTOS      reduce using rule 33 (elemento -> VARIABLE .)
    AND             reduce using rule 33 (elemento -> VARIABLE .)
    OR              reduce using rule 33 (elemento -> VARIABLE .)
    NOT             reduce using rule 33 (elemento -> VARIABLE .)
    RKEY            reduce using rule 33 (elemento -> VARIABLE .)


state 44

    (34) elemento -> DOUBLE .

    PLUS            reduce using rule 34 (elemento -> DOUBLE .)
    MINUS           reduce using rule 34 (elemento -> DOUBLE .)
    TIMES           reduce using rule 34 (elemento -> DOUBLE .)
    DIVIDE          reduce using rule 34 (elemento -> DOUBLE .)
    MODULO          reduce using rule 34 (elemento -> DOUBLE .)
    SEMICOLON       reduce using rule 34 (elemento -> DOUBLE .)
    EQUALITY        reduce using rule 34 (elemento -> DOUBLE .)
    INEQUALITY      reduce using rule 34 (elemento -> DOUBLE .)
    GREATER_THAN    reduce using rule 34 (elemento -> DOUBLE .)
    LESS_THAN       reduce using rule 34 (elemento -> DOUBLE .)
    GREATER_EQ_THAN reduce using rule 34 (elemento -> DOUBLE .)
    LESS_EQ_THAN    reduce using rule 34 (elemento -> DOUBLE .)
    RPAREN          reduce using rule 34 (elemento -> DOUBLE .)
    COMA            reduce using rule 34 (elemento -> DOUBLE .)
    RBRACKETS       reduce using rule 34 (elemento -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 34 (elemento -> DOUBLE .)
    AND             reduce using rule 34 (elemento -> DOUBLE .)
    OR              reduce using rule 34 (elemento -> DOUBLE .)
    NOT             reduce using rule 34 (elemento -> DOUBLE .)
    RKEY            reduce using rule 34 (elemento -> DOUBLE .)


state 45

    (35) elemento -> STRING .

    PLUS            reduce using rule 35 (elemento -> STRING .)
    MINUS           reduce using rule 35 (elemento -> STRING .)
    TIMES           reduce using rule 35 (elemento -> STRING .)
    DIVIDE          reduce using rule 35 (elemento -> STRING .)
    MODULO          reduce using rule 35 (elemento -> STRING .)
    SEMICOLON       reduce using rule 35 (elemento -> STRING .)
    EQUALITY        reduce using rule 35 (elemento -> STRING .)
    INEQUALITY      reduce using rule 35 (elemento -> STRING .)
    GREATER_THAN    reduce using rule 35 (elemento -> STRING .)
    LESS_THAN       reduce using rule 35 (elemento -> STRING .)
    GREATER_EQ_THAN reduce using rule 35 (elemento -> STRING .)
    LESS_EQ_THAN    reduce using rule 35 (elemento -> STRING .)
    RPAREN          reduce using rule 35 (elemento -> STRING .)
    COMA            reduce using rule 35 (elemento -> STRING .)
    RBRACKETS       reduce using rule 35 (elemento -> STRING .)
    DOS_PUNTOS      reduce using rule 35 (elemento -> STRING .)
    AND             reduce using rule 35 (elemento -> STRING .)
    OR              reduce using rule 35 (elemento -> STRING .)
    NOT             reduce using rule 35 (elemento -> STRING .)
    RKEY            reduce using rule 35 (elemento -> STRING .)


state 46

    (36) elemento -> BOOLEAN .

    PLUS            reduce using rule 36 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 36 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 36 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 36 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 36 (elemento -> BOOLEAN .)
    SEMICOLON       reduce using rule 36 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 36 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 36 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 36 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 36 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 36 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 36 (elemento -> BOOLEAN .)
    RPAREN          reduce using rule 36 (elemento -> BOOLEAN .)
    COMA            reduce using rule 36 (elemento -> BOOLEAN .)
    RBRACKETS       reduce using rule 36 (elemento -> BOOLEAN .)
    DOS_PUNTOS      reduce using rule 36 (elemento -> BOOLEAN .)
    AND             reduce using rule 36 (elemento -> BOOLEAN .)
    OR              reduce using rule 36 (elemento -> BOOLEAN .)
    NOT             reduce using rule 36 (elemento -> BOOLEAN .)
    RKEY            reduce using rule 36 (elemento -> BOOLEAN .)


state 47

    (71) while -> WHILE LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (37) comparacion -> . operacion comparador operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    comparacion_logica             shift and go to state 78
    comparacion                    shift and go to state 67
    operacion                      shift and go to state 69
    elemento                       shift and go to state 41

state 48

    (72) while -> DO LKEY . programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 79
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 49

    (65) tipo_dato -> LIST LESS_THAN . tipo_coleccion GREATER_THAN
    (67) tipo_coleccion -> . INT_TYPE
    (68) tipo_coleccion -> . STRING_TYPE
    (69) tipo_coleccion -> . DOUBLE_TYPE
    (70) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 81
    STRING_TYPE     shift and go to state 82
    DOUBLE_TYPE     shift and go to state 83
    BOOL_TYPE       shift and go to state 84

    tipo_coleccion                 shift and go to state 80

state 50

    (66) tipo_dato -> MAP LESS_THAN . tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (67) tipo_coleccion -> . INT_TYPE
    (68) tipo_coleccion -> . STRING_TYPE
    (69) tipo_coleccion -> . DOUBLE_TYPE
    (70) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 81
    STRING_TYPE     shift and go to state 82
    DOUBLE_TYPE     shift and go to state 83
    BOOL_TYPE       shift and go to state 84

    tipo_coleccion                 shift and go to state 85

state 51

    (10) asignar_variable -> tipo_dato VARIABLE asignador . expresion SEMICOLON
    (21) expresion -> . operacion
    (22) expresion -> . comparacion
    (23) expresion -> . list
    (24) expresion -> . diccionario
    (25) expresion -> . input
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (37) comparacion -> . operacion comparador operacion
    (56) list -> . LBRACKETS element_list RBRACKETS
    (57) list -> . LBRACKETS RBRACKETS
    (73) diccionario -> . LKEY key_element_list RKEY
    (31) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    LBRACKETS       shift and go to state 61
    LKEY            shift and go to state 62
    STDIN           shift and go to state 63
    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    expresion                      shift and go to state 86
    operacion                      shift and go to state 56
    comparacion                    shift and go to state 57
    list                           shift and go to state 58
    diccionario                    shift and go to state 59
    input                          shift and go to state 60
    elemento                       shift and go to state 41

state 52

    (11) asignar_variable -> tipo_dato VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    PRINT           reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    IF              reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VOID            reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RETURN          reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    WHILE           reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DO              reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VAR_TYPE        reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    INT_TYPE        reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    LIST            reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    MAP             reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    $end            reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RKEY            reduce using rule 11 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)


state 53

    (12) cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .

    VARIABLE        reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    PRINT           reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    IF              reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    VOID            reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    RETURN          reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    WHILE           reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    DO              reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    VAR_TYPE        reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    INT_TYPE        reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    STRING_TYPE     reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    BOOL_TYPE       reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    LIST            reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    MAP             reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    $end            reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)
    RKEY            reduce using rule 12 (cambiar_variable -> VARIABLE INCREMENT_VAR SEMICOLON .)


state 54

    (13) cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .

    VARIABLE        reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    PRINT           reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    IF              reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    VOID            reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    RETURN          reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    WHILE           reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    DO              reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    VAR_TYPE        reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    INT_TYPE        reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    STRING_TYPE     reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    BOOL_TYPE       reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    LIST            reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    MAP             reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    $end            reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)
    RKEY            reduce using rule 13 (cambiar_variable -> VARIABLE DECREMENT_VAR SEMICOLON .)


state 55

    (14) cambiar_variable -> VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 87


state 56

    (21) expresion -> operacion .
    (37) comparacion -> operacion . comparador operacion
    (43) comparador -> . EQUALITY
    (44) comparador -> . INEQUALITY
    (45) comparador -> . GREATER_THAN
    (46) comparador -> . LESS_THAN
    (47) comparador -> . GREATER_EQ_THAN
    (48) comparador -> . LESS_EQ_THAN

    SEMICOLON       reduce using rule 21 (expresion -> operacion .)
    EQUALITY        shift and go to state 89
    INEQUALITY      shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    GREATER_EQ_THAN shift and go to state 93
    LESS_EQ_THAN    shift and go to state 94

    comparador                     shift and go to state 88

state 57

    (22) expresion -> comparacion .

    SEMICOLON       reduce using rule 22 (expresion -> comparacion .)


state 58

    (23) expresion -> list .

    SEMICOLON       reduce using rule 23 (expresion -> list .)


state 59

    (24) expresion -> diccionario .

    SEMICOLON       reduce using rule 24 (expresion -> diccionario .)


state 60

    (25) expresion -> input .

    SEMICOLON       reduce using rule 25 (expresion -> input .)


state 61

    (56) list -> LBRACKETS . element_list RBRACKETS
    (57) list -> LBRACKETS . RBRACKETS
    (58) element_list -> . elemento
    (59) element_list -> . elemento COMA element_list
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    RBRACKETS       shift and go to state 96
    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    element_list                   shift and go to state 95
    elemento                       shift and go to state 97

state 62

    (73) diccionario -> LKEY . key_element_list RKEY
    (75) key_element_list -> . key_element
    (76) key_element_list -> . key_element COMA key_element_list
    (74) key_element -> . elemento DOS_PUNTOS elemento
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    key_element_list               shift and go to state 98
    key_element                    shift and go to state 99
    elemento                       shift and go to state 100

state 63

    (31) input -> STDIN . DOT READLINESYNC LPAREN RPAREN

    DOT             shift and go to state 101


state 64

    (28) impresion -> PRINT LPAREN operacion . RPAREN SEMICOLON
    (37) comparacion -> operacion . comparador operacion
    (43) comparador -> . EQUALITY
    (44) comparador -> . INEQUALITY
    (45) comparador -> . GREATER_THAN
    (46) comparador -> . LESS_THAN
    (47) comparador -> . GREATER_EQ_THAN
    (48) comparador -> . LESS_EQ_THAN

    RPAREN          shift and go to state 102
    EQUALITY        shift and go to state 89
    INEQUALITY      shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    GREATER_EQ_THAN shift and go to state 93
    LESS_EQ_THAN    shift and go to state 94

    comparador                     shift and go to state 88

state 65

    (30) impresion -> PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 103


state 66

    (29) impresion -> PRINT LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 104


state 67

    (38) comparacion_logica -> comparacion .
    (39) comparacion_logica -> comparacion . operador_logico comparacion_logica
    (40) operador_logico -> . AND
    (41) operador_logico -> . OR
    (42) operador_logico -> . NOT

    RPAREN          reduce using rule 38 (comparacion_logica -> comparacion .)
    AND             shift and go to state 106
    OR              shift and go to state 107
    NOT             shift and go to state 108

    operador_logico                shift and go to state 105

state 68

    (77) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 109


state 69

    (37) comparacion -> operacion . comparador operacion
    (43) comparador -> . EQUALITY
    (44) comparador -> . INEQUALITY
    (45) comparador -> . GREATER_THAN
    (46) comparador -> . LESS_THAN
    (47) comparador -> . GREATER_EQ_THAN
    (48) comparador -> . LESS_EQ_THAN

    EQUALITY        shift and go to state 89
    INEQUALITY      shift and go to state 90
    GREATER_THAN    shift and go to state 91
    LESS_THAN       shift and go to state 92
    GREATER_EQ_THAN shift and go to state 93
    LESS_EQ_THAN    shift and go to state 94

    comparador                     shift and go to state 88

state 70

    (81) funcion -> VOID VARIABLE LPAREN . parametros RPAREN LKEY programa RKEY
    (82) funcion -> VOID VARIABLE LPAREN . RPAREN LKEY programa RKEY
    (83) parametros -> . tipo_dato VARIABLE
    (84) parametros -> . tipo_dato VARIABLE COMA parametros
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    RPAREN          shift and go to state 111
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    parametros                     shift and go to state 110
    tipo_dato                      shift and go to state 112

state 71

    (27) retorno -> RETURN operacion SEMICOLON .

    VARIABLE        reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    PRINT           reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    IF              reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    VOID            reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    RETURN          reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    WHILE           reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    DO              reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    VAR_TYPE        reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    INT_TYPE        reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    STRING_TYPE     reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    BOOL_TYPE       reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    LIST            reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    MAP             reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    $end            reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)
    RKEY            reduce using rule 27 (retorno -> RETURN operacion SEMICOLON .)


state 72

    (50) operacion -> elemento operador . operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    elemento                       shift and go to state 41
    operacion                      shift and go to state 113

state 73

    (51) operador -> PLUS .

    INT             reduce using rule 51 (operador -> PLUS .)
    VARIABLE        reduce using rule 51 (operador -> PLUS .)
    DOUBLE          reduce using rule 51 (operador -> PLUS .)
    STRING          reduce using rule 51 (operador -> PLUS .)
    BOOLEAN         reduce using rule 51 (operador -> PLUS .)


state 74

    (52) operador -> MINUS .

    INT             reduce using rule 52 (operador -> MINUS .)
    VARIABLE        reduce using rule 52 (operador -> MINUS .)
    DOUBLE          reduce using rule 52 (operador -> MINUS .)
    STRING          reduce using rule 52 (operador -> MINUS .)
    BOOLEAN         reduce using rule 52 (operador -> MINUS .)


state 75

    (53) operador -> TIMES .

    INT             reduce using rule 53 (operador -> TIMES .)
    VARIABLE        reduce using rule 53 (operador -> TIMES .)
    DOUBLE          reduce using rule 53 (operador -> TIMES .)
    STRING          reduce using rule 53 (operador -> TIMES .)
    BOOLEAN         reduce using rule 53 (operador -> TIMES .)


state 76

    (54) operador -> DIVIDE .

    INT             reduce using rule 54 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 54 (operador -> DIVIDE .)
    DOUBLE          reduce using rule 54 (operador -> DIVIDE .)
    STRING          reduce using rule 54 (operador -> DIVIDE .)
    BOOLEAN         reduce using rule 54 (operador -> DIVIDE .)


state 77

    (55) operador -> MODULO .

    INT             reduce using rule 55 (operador -> MODULO .)
    VARIABLE        reduce using rule 55 (operador -> MODULO .)
    DOUBLE          reduce using rule 55 (operador -> MODULO .)
    STRING          reduce using rule 55 (operador -> MODULO .)
    BOOLEAN         reduce using rule 55 (operador -> MODULO .)


state 78

    (71) while -> WHILE LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 114


state 79

    (72) while -> DO LKEY programa . RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    RKEY            shift and go to state 115


state 80

    (65) tipo_dato -> LIST LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 116


state 81

    (67) tipo_coleccion -> INT_TYPE .

    GREATER_THAN    reduce using rule 67 (tipo_coleccion -> INT_TYPE .)
    COMA            reduce using rule 67 (tipo_coleccion -> INT_TYPE .)


state 82

    (68) tipo_coleccion -> STRING_TYPE .

    GREATER_THAN    reduce using rule 68 (tipo_coleccion -> STRING_TYPE .)
    COMA            reduce using rule 68 (tipo_coleccion -> STRING_TYPE .)


state 83

    (69) tipo_coleccion -> DOUBLE_TYPE .

    GREATER_THAN    reduce using rule 69 (tipo_coleccion -> DOUBLE_TYPE .)
    COMA            reduce using rule 69 (tipo_coleccion -> DOUBLE_TYPE .)


state 84

    (70) tipo_coleccion -> BOOL_TYPE .

    GREATER_THAN    reduce using rule 70 (tipo_coleccion -> BOOL_TYPE .)
    COMA            reduce using rule 70 (tipo_coleccion -> BOOL_TYPE .)


state 85

    (66) tipo_dato -> MAP LESS_THAN tipo_coleccion . COMA tipo_coleccion GREATER_THAN

    COMA            shift and go to state 117


state 86

    (10) asignar_variable -> tipo_dato VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 118


state 87

    (14) cambiar_variable -> VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 14 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)


state 88

    (37) comparacion -> operacion comparador . operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    operacion                      shift and go to state 119
    elemento                       shift and go to state 41

state 89

    (43) comparador -> EQUALITY .

    INT             reduce using rule 43 (comparador -> EQUALITY .)
    VARIABLE        reduce using rule 43 (comparador -> EQUALITY .)
    DOUBLE          reduce using rule 43 (comparador -> EQUALITY .)
    STRING          reduce using rule 43 (comparador -> EQUALITY .)
    BOOLEAN         reduce using rule 43 (comparador -> EQUALITY .)


state 90

    (44) comparador -> INEQUALITY .

    INT             reduce using rule 44 (comparador -> INEQUALITY .)
    VARIABLE        reduce using rule 44 (comparador -> INEQUALITY .)
    DOUBLE          reduce using rule 44 (comparador -> INEQUALITY .)
    STRING          reduce using rule 44 (comparador -> INEQUALITY .)
    BOOLEAN         reduce using rule 44 (comparador -> INEQUALITY .)


state 91

    (45) comparador -> GREATER_THAN .

    INT             reduce using rule 45 (comparador -> GREATER_THAN .)
    VARIABLE        reduce using rule 45 (comparador -> GREATER_THAN .)
    DOUBLE          reduce using rule 45 (comparador -> GREATER_THAN .)
    STRING          reduce using rule 45 (comparador -> GREATER_THAN .)
    BOOLEAN         reduce using rule 45 (comparador -> GREATER_THAN .)


state 92

    (46) comparador -> LESS_THAN .

    INT             reduce using rule 46 (comparador -> LESS_THAN .)
    VARIABLE        reduce using rule 46 (comparador -> LESS_THAN .)
    DOUBLE          reduce using rule 46 (comparador -> LESS_THAN .)
    STRING          reduce using rule 46 (comparador -> LESS_THAN .)
    BOOLEAN         reduce using rule 46 (comparador -> LESS_THAN .)


state 93

    (47) comparador -> GREATER_EQ_THAN .

    INT             reduce using rule 47 (comparador -> GREATER_EQ_THAN .)
    VARIABLE        reduce using rule 47 (comparador -> GREATER_EQ_THAN .)
    DOUBLE          reduce using rule 47 (comparador -> GREATER_EQ_THAN .)
    STRING          reduce using rule 47 (comparador -> GREATER_EQ_THAN .)
    BOOLEAN         reduce using rule 47 (comparador -> GREATER_EQ_THAN .)


state 94

    (48) comparador -> LESS_EQ_THAN .

    INT             reduce using rule 48 (comparador -> LESS_EQ_THAN .)
    VARIABLE        reduce using rule 48 (comparador -> LESS_EQ_THAN .)
    DOUBLE          reduce using rule 48 (comparador -> LESS_EQ_THAN .)
    STRING          reduce using rule 48 (comparador -> LESS_EQ_THAN .)
    BOOLEAN         reduce using rule 48 (comparador -> LESS_EQ_THAN .)


state 95

    (56) list -> LBRACKETS element_list . RBRACKETS

    RBRACKETS       shift and go to state 120


state 96

    (57) list -> LBRACKETS RBRACKETS .

    SEMICOLON       reduce using rule 57 (list -> LBRACKETS RBRACKETS .)


state 97

    (58) element_list -> elemento .
    (59) element_list -> elemento . COMA element_list

    RBRACKETS       reduce using rule 58 (element_list -> elemento .)
    COMA            shift and go to state 121


state 98

    (73) diccionario -> LKEY key_element_list . RKEY

    RKEY            shift and go to state 122


state 99

    (75) key_element_list -> key_element .
    (76) key_element_list -> key_element . COMA key_element_list

    RKEY            reduce using rule 75 (key_element_list -> key_element .)
    COMA            shift and go to state 123


state 100

    (74) key_element -> elemento . DOS_PUNTOS elemento

    DOS_PUNTOS      shift and go to state 124


state 101

    (31) input -> STDIN DOT . READLINESYNC LPAREN RPAREN

    READLINESYNC    shift and go to state 125


state 102

    (28) impresion -> PRINT LPAREN operacion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 126


state 103

    (30) impresion -> PRINT LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 30 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)


state 104

    (29) impresion -> PRINT LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 127


state 105

    (39) comparacion_logica -> comparacion operador_logico . comparacion_logica
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (37) comparacion -> . operacion comparador operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    comparacion                    shift and go to state 67
    comparacion_logica             shift and go to state 128
    operacion                      shift and go to state 69
    elemento                       shift and go to state 41

state 106

    (40) operador_logico -> AND .

    INT             reduce using rule 40 (operador_logico -> AND .)
    VARIABLE        reduce using rule 40 (operador_logico -> AND .)
    DOUBLE          reduce using rule 40 (operador_logico -> AND .)
    STRING          reduce using rule 40 (operador_logico -> AND .)
    BOOLEAN         reduce using rule 40 (operador_logico -> AND .)


state 107

    (41) operador_logico -> OR .

    INT             reduce using rule 41 (operador_logico -> OR .)
    VARIABLE        reduce using rule 41 (operador_logico -> OR .)
    DOUBLE          reduce using rule 41 (operador_logico -> OR .)
    STRING          reduce using rule 41 (operador_logico -> OR .)
    BOOLEAN         reduce using rule 41 (operador_logico -> OR .)


state 108

    (42) operador_logico -> NOT .

    INT             reduce using rule 42 (operador_logico -> NOT .)
    VARIABLE        reduce using rule 42 (operador_logico -> NOT .)
    DOUBLE          reduce using rule 42 (operador_logico -> NOT .)
    STRING          reduce using rule 42 (operador_logico -> NOT .)
    BOOLEAN         reduce using rule 42 (operador_logico -> NOT .)


state 109

    (77) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else
    (78) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 129


state 110

    (81) funcion -> VOID VARIABLE LPAREN parametros . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 130


state 111

    (82) funcion -> VOID VARIABLE LPAREN RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 131


state 112

    (83) parametros -> tipo_dato . VARIABLE
    (84) parametros -> tipo_dato . VARIABLE COMA parametros

    VARIABLE        shift and go to state 132


state 113

    (50) operacion -> elemento operador operacion .

    SEMICOLON       reduce using rule 50 (operacion -> elemento operador operacion .)
    EQUALITY        reduce using rule 50 (operacion -> elemento operador operacion .)
    INEQUALITY      reduce using rule 50 (operacion -> elemento operador operacion .)
    GREATER_THAN    reduce using rule 50 (operacion -> elemento operador operacion .)
    LESS_THAN       reduce using rule 50 (operacion -> elemento operador operacion .)
    GREATER_EQ_THAN reduce using rule 50 (operacion -> elemento operador operacion .)
    LESS_EQ_THAN    reduce using rule 50 (operacion -> elemento operador operacion .)
    RPAREN          reduce using rule 50 (operacion -> elemento operador operacion .)
    AND             reduce using rule 50 (operacion -> elemento operador operacion .)
    OR              reduce using rule 50 (operacion -> elemento operador operacion .)
    NOT             reduce using rule 50 (operacion -> elemento operador operacion .)


state 114

    (71) while -> WHILE LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 133


state 115

    (72) while -> DO LKEY programa RKEY . WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    WHILE           shift and go to state 134


state 116

    (65) tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 65 (tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .)


state 117

    (66) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA . tipo_coleccion GREATER_THAN
    (67) tipo_coleccion -> . INT_TYPE
    (68) tipo_coleccion -> . STRING_TYPE
    (69) tipo_coleccion -> . DOUBLE_TYPE
    (70) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 81
    STRING_TYPE     shift and go to state 82
    DOUBLE_TYPE     shift and go to state 83
    BOOL_TYPE       shift and go to state 84

    tipo_coleccion                 shift and go to state 135

state 118

    (10) asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 10 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)


state 119

    (37) comparacion -> operacion comparador operacion .

    SEMICOLON       reduce using rule 37 (comparacion -> operacion comparador operacion .)
    AND             reduce using rule 37 (comparacion -> operacion comparador operacion .)
    OR              reduce using rule 37 (comparacion -> operacion comparador operacion .)
    NOT             reduce using rule 37 (comparacion -> operacion comparador operacion .)
    RPAREN          reduce using rule 37 (comparacion -> operacion comparador operacion .)


state 120

    (56) list -> LBRACKETS element_list RBRACKETS .

    SEMICOLON       reduce using rule 56 (list -> LBRACKETS element_list RBRACKETS .)


state 121

    (59) element_list -> elemento COMA . element_list
    (58) element_list -> . elemento
    (59) element_list -> . elemento COMA element_list
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    elemento                       shift and go to state 97
    element_list                   shift and go to state 136

state 122

    (73) diccionario -> LKEY key_element_list RKEY .

    SEMICOLON       reduce using rule 73 (diccionario -> LKEY key_element_list RKEY .)


state 123

    (76) key_element_list -> key_element COMA . key_element_list
    (75) key_element_list -> . key_element
    (76) key_element_list -> . key_element COMA key_element_list
    (74) key_element -> . elemento DOS_PUNTOS elemento
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    key_element                    shift and go to state 99
    key_element_list               shift and go to state 137
    elemento                       shift and go to state 100

state 124

    (74) key_element -> elemento DOS_PUNTOS . elemento
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    elemento                       shift and go to state 138

state 125

    (31) input -> STDIN DOT READLINESYNC . LPAREN RPAREN

    LPAREN          shift and go to state 139


state 126

    (28) impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .

    VARIABLE        reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    PRINT           reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IF              reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VOID            reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RETURN          reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    WHILE           reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DO              reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    LIST            reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    MAP             reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    $end            reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RKEY            reduce using rule 28 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)


state 127

    (29) impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 29 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)


state 128

    (39) comparacion_logica -> comparacion operador_logico comparacion_logica .

    RPAREN          reduce using rule 39 (comparacion_logica -> comparacion operador_logico comparacion_logica .)


state 129

    (77) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (78) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 140
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 130

    (81) funcion -> VOID VARIABLE LPAREN parametros RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 141


state 131

    (82) funcion -> VOID VARIABLE LPAREN RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 142
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 132

    (83) parametros -> tipo_dato VARIABLE .
    (84) parametros -> tipo_dato VARIABLE . COMA parametros

    RPAREN          reduce using rule 83 (parametros -> tipo_dato VARIABLE .)
    COMA            shift and go to state 143


state 133

    (71) while -> WHILE LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 144
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 134

    (72) while -> DO LKEY programa RKEY WHILE . LPAREN comparacion_logica RPAREN SEMICOLON

    LPAREN          shift and go to state 145


state 135

    (66) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 146


state 136

    (59) element_list -> elemento COMA element_list .

    RBRACKETS       reduce using rule 59 (element_list -> elemento COMA element_list .)


state 137

    (76) key_element_list -> key_element COMA key_element_list .

    RKEY            reduce using rule 76 (key_element_list -> key_element COMA key_element_list .)


state 138

    (74) key_element -> elemento DOS_PUNTOS elemento .

    COMA            reduce using rule 74 (key_element -> elemento DOS_PUNTOS elemento .)
    RKEY            reduce using rule 74 (key_element -> elemento DOS_PUNTOS elemento .)


state 139

    (31) input -> STDIN DOT READLINESYNC LPAREN . RPAREN

    RPAREN          shift and go to state 147


state 140

    (77) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else
    (78) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 148


state 141

    (81) funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 149
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 142

    (82) funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 150


state 143

    (84) parametros -> tipo_dato VARIABLE COMA . parametros
    (83) parametros -> . tipo_dato VARIABLE
    (84) parametros -> . tipo_dato VARIABLE COMA parametros
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    tipo_dato                      shift and go to state 112
    parametros                     shift and go to state 151

state 144

    (71) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 152


state 145

    (72) while -> DO LKEY programa RKEY WHILE LPAREN . comparacion_logica RPAREN SEMICOLON
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (37) comparacion -> . operacion comparador operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    comparacion_logica             shift and go to state 153
    comparacion                    shift and go to state 67
    operacion                      shift and go to state 69
    elemento                       shift and go to state 41

state 146

    (66) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 66 (tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .)


state 147

    (31) input -> STDIN DOT READLINESYNC LPAREN RPAREN .

    SEMICOLON       reduce using rule 31 (input -> STDIN DOT READLINESYNC LPAREN RPAREN .)


state 148

    (77) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (78) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .
    (79) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (80) bloques_else -> . ELSE LKEY programa RKEY

    VARIABLE        reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 78 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    ELSE            shift and go to state 155

    bloques_else                   shift and go to state 154

state 149

    (81) funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 156


state 150

    (82) funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    IF              reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DO              reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    $end            reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 82 (funcion -> VOID VARIABLE LPAREN RPAREN LKEY programa RKEY .)


state 151

    (84) parametros -> tipo_dato VARIABLE COMA parametros .

    RPAREN          reduce using rule 84 (parametros -> tipo_dato VARIABLE COMA parametros .)


state 152

    (71) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 71 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)


state 153

    (72) while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 157


state 154

    (77) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 77 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)


state 155

    (79) bloques_else -> ELSE . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (80) bloques_else -> ELSE . LKEY programa RKEY

    IF              shift and go to state 158
    LKEY            shift and go to state 159


state 156

    (81) funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    IF              reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DO              reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    $end            reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 81 (funcion -> VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)


state 157

    (72) while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 160


state 158

    (79) bloques_else -> ELSE IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else

    LPAREN          shift and go to state 161


state 159

    (80) bloques_else -> ELSE LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 162
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 160

    (72) while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 72 (while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)


state 161

    (79) bloques_else -> ELSE IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (38) comparacion_logica -> . comparacion
    (39) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (37) comparacion -> . operacion comparador operacion
    (49) operacion -> . elemento
    (50) operacion -> . elemento operador operacion
    (32) elemento -> . INT
    (33) elemento -> . VARIABLE
    (34) elemento -> . DOUBLE
    (35) elemento -> . STRING
    (36) elemento -> . BOOLEAN

    INT             shift and go to state 42
    VARIABLE        shift and go to state 43
    DOUBLE          shift and go to state 44
    STRING          shift and go to state 45
    BOOLEAN         shift and go to state 46

    comparacion_logica             shift and go to state 163
    comparacion                    shift and go to state 67
    operacion                      shift and go to state 69
    elemento                       shift and go to state 41

state 162

    (80) bloques_else -> ELSE LKEY programa . RKEY

    RKEY            shift and go to state 164


state 163

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else

    RPAREN          shift and go to state 165


state 164

    (80) bloques_else -> ELSE LKEY programa RKEY .

    VARIABLE        reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    PRINT           reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    IF              reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    VOID            reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    RETURN          reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    WHILE           reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    DO              reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    INT_TYPE        reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    LIST            reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    MAP             reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    $end            reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)
    RKEY            reduce using rule 80 (bloques_else -> ELSE LKEY programa RKEY .)


state 165

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else

    LKEY            shift and go to state 166


state 166

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (11) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (12) cambiar_variable -> . VARIABLE INCREMENT_VAR SEMICOLON
    (13) cambiar_variable -> . VARIABLE DECREMENT_VAR SEMICOLON
    (14) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (28) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (29) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (30) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (77) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (78) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (81) funcion -> . VOID VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (82) funcion -> . VOID VARIABLE LPAREN RPAREN LKEY programa RKEY
    (26) retorno -> . RETURN SEMICOLON
    (27) retorno -> . RETURN operacion SEMICOLON
    (71) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (72) while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (60) tipo_dato -> . VAR_TYPE
    (61) tipo_dato -> . INT_TYPE
    (62) tipo_dato -> . STRING_TYPE
    (63) tipo_dato -> . DOUBLE_TYPE
    (64) tipo_dato -> . BOOL_TYPE
    (65) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (66) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    VOID            shift and go to state 14
    RETURN          shift and go to state 15
    WHILE           shift and go to state 16
    DO              shift and go to state 17
    VAR_TYPE        shift and go to state 18
    INT_TYPE        shift and go to state 19
    STRING_TYPE     shift and go to state 20
    DOUBLE_TYPE     shift and go to state 21
    BOOL_TYPE       shift and go to state 22
    LIST            shift and go to state 23
    MAP             shift and go to state 24

    programa                       shift and go to state 167
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    tipo_dato                      shift and go to state 10

state 167

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else

    RKEY            shift and go to state 168


state 168

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (79) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (80) bloques_else -> . ELSE LKEY programa RKEY

    ELSE            shift and go to state 155

    bloques_else                   shift and go to state 169

state 169

    (79) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 79 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)

