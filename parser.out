Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOC_COMMENT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     sentencias -> asignar_variable
Rule 4     sentencias -> cambiar_variable
Rule 5     sentencias -> impresion
Rule 6     sentencias -> condicional
Rule 7     sentencias -> funcion
Rule 8     sentencias -> retorno
Rule 9     sentencias -> while
Rule 10    sentencias -> do_while
Rule 11    sentencias -> for
Rule 12    sentencias -> return
Rule 13    sentencias -> class
Rule 14    sentencias -> import
Rule 15    funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
Rule 16    funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
Rule 17    asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON
Rule 18    asignar_variable -> tipo_dato VARIABLE SEMICOLON
Rule 19    cambiar_variable -> VARIABLE modificador SEMICOLON
Rule 20    cambiar_variable -> VARIABLE asignador expresion SEMICOLON
Rule 21    modificador -> INCREMENT_VAR
Rule 22    modificador -> DECREMENT_VAR
Rule 23    asignador -> ASSIGN
Rule 24    asignador -> PLUS_ASSIGN
Rule 25    asignador -> MINUS_ASSIGN
Rule 26    asignador -> TIMES_ASSIGN
Rule 27    asignador -> DIVIDE_ASSIGN
Rule 28    asignador -> MODULO_ASSIGN
Rule 29    expresion -> operacion
Rule 30    expresion -> comparacion
Rule 31    expresion -> list
Rule 32    expresion -> diccionario
Rule 33    expresion -> set
Rule 34    expresion -> input
Rule 35    retorno -> RETURN SEMICOLON
Rule 36    retorno -> RETURN operacion SEMICOLON
Rule 37    import -> IMPORT STRING SEMICOLON
Rule 38    impresion -> PRINT LPAREN operacion RPAREN SEMICOLON
Rule 39    impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON
Rule 40    impresion -> PRINT LPAREN RPAREN SEMICOLON
Rule 41    input -> STDIN DOT READLINESYNC LPAREN RPAREN
Rule 42    elemento -> INT
Rule 43    elemento -> DOUBLE
Rule 44    elemento -> STRING
Rule 45    elemento -> BOOLEAN
Rule 46    elemento -> VARIABLE
Rule 47    elemento -> VARIABLE LPAREN element_list RPAREN
Rule 48    comparacion -> operacion comparador operacion
Rule 49    comparacion_logica -> comparacion
Rule 50    comparacion_logica -> comparacion operador_logico comparacion_logica
Rule 51    operador_logico -> AND
Rule 52    operador_logico -> OR
Rule 53    operador_logico -> NOT
Rule 54    comparador -> EQUALITY
Rule 55    comparador -> INEQUALITY
Rule 56    comparador -> GREATER_THAN
Rule 57    comparador -> LESS_THAN
Rule 58    comparador -> GREATER_EQ_THAN
Rule 59    comparador -> LESS_EQ_THAN
Rule 60    operacion -> elemento
Rule 61    operacion -> elemento operador operacion
Rule 62    operador -> PLUS
Rule 63    operador -> MINUS
Rule 64    operador -> TIMES
Rule 65    operador -> DIVIDE
Rule 66    operador -> MODULO
Rule 67    list -> LBRACKETS element_list RBRACKETS
Rule 68    list -> LBRACKETS RBRACKETS
Rule 69    element_list -> elemento
Rule 70    element_list -> elemento COMA element_list
Rule 71    tipo_dato -> VOID
Rule 72    tipo_dato -> FINAL_TYPE
Rule 73    tipo_dato -> CONST_TYPE
Rule 74    tipo_dato -> VAR_TYPE
Rule 75    tipo_dato -> INT_TYPE
Rule 76    tipo_dato -> STRING_TYPE
Rule 77    tipo_dato -> DOUBLE_TYPE
Rule 78    tipo_dato -> BOOL_TYPE
Rule 79    tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN
Rule 80    tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
Rule 81    tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN
Rule 82    tipo_coleccion -> INT_TYPE
Rule 83    tipo_coleccion -> STRING_TYPE
Rule 84    tipo_coleccion -> DOUBLE_TYPE
Rule 85    tipo_coleccion -> FINAL_TYPE
Rule 86    tipo_coleccion -> CONST_TYPE
Rule 87    tipo_coleccion -> VAR_TYPE
Rule 88    tipo_coleccion -> BOOL_TYPE
Rule 89    for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
Rule 90    for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
Rule 91    for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
Rule 92    specific_instance -> DOS_PUNTOS VARIABLE
Rule 93    specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance
Rule 94    while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 95    do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
Rule 96    diccionario -> LKEY key_element_list RKEY
Rule 97    diccionario -> LKEY RKEY
Rule 98    set -> LKEY element_list RKEY
Rule 99    set -> LKEY RKEY
Rule 100   litset -> SET LESS_THAN tipo_dato GREATER_THAN
Rule 101   key_element -> elemento DOS_PUNTOS elemento
Rule 102   key_element_list -> key_element
Rule 103   key_element_list -> key_element COMA key_element_list
Rule 104   condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 105   condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 106   bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 107   bloques_else -> ELSE LKEY programa RKEY
Rule 108   parametros -> tipo_dato VARIABLE
Rule 109   parametros -> tipo_dato VARIABLE COMA parametros
Rule 110   class -> CLASS VARIABLE LKEY class_structure RKEY
Rule 111   class_structure -> instances constructor
Rule 112   class_structure -> instances constructor sentencias
Rule 113   instances -> instance
Rule 114   instances -> instance instances
Rule 115   instance -> FINAL_TYPE tipo_dato VARIABLE SEMICOLON
Rule 116   constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON
Rule 117   return -> RETURN elemento SEMICOLON

Terminals, with rules where they appear

AND                  : 51
ASSIGN               : 23 89
BOOLEAN              : 45
BOOL_TYPE            : 78 88
CLASS                : 110
COMA                 : 70 80 93 103 109
COMMENT              : 
CONST_TYPE           : 73 86
DECREMENT_VAR        : 22
DIVIDE               : 65
DIVIDE_ASSIGN        : 27
DO                   : 95
DOC_COMMENT          : 
DOS_PUNTOS           : 92 93 101
DOT                  : 41
DOUBLE               : 43
DOUBLE_TYPE          : 77 84
ELSE                 : 106 107
EQUALITY             : 54
FINAL_TYPE           : 72 85 115
FOR                  : 89 90 91
GREATER_EQ_THAN      : 58
GREATER_THAN         : 56 79 80 81 100
IF                   : 104 105 106
IMPORT               : 37
IN                   : 90 91
INCREMENT_VAR        : 21 89
INEQUALITY           : 55
INT                  : 42
INT_TYPE             : 75 82
LBRACKETS            : 67 68
LESS_EQ_THAN         : 59
LESS_THAN            : 57 79 80 81 100
LIST                 : 79
LKEY                 : 15 16 89 90 91 94 95 96 97 98 99 104 105 106 107 110
LPAREN               : 15 16 38 39 40 41 47 89 90 91 91 94 95 104 105 106 116
MAP                  : 80
MINUS                : 63
MINUS_ASSIGN         : 25
MODULO               : 66
MODULO_ASSIGN        : 28
NOT                  : 53
OR                   : 52
PLUS                 : 62
PLUS_ASSIGN          : 24
PRINT                : 38 39 40
RBRACKETS            : 67 68
READLINESYNC         : 41
RETURN               : 35 36 117
RKEY                 : 15 16 89 90 91 94 95 96 97 98 99 104 105 106 107 110
RPAREN               : 15 16 38 39 40 41 47 89 90 91 91 94 95 104 105 106 116
SEMICOLON            : 17 18 19 20 35 36 37 38 39 40 89 89 95 115 116 117
SET                  : 81 100
STDIN                : 41
STRING               : 37 44
STRING_TYPE          : 76 83
TIMES                : 64
TIMES_ASSIGN         : 26
VARIABLE             : 15 16 17 18 19 20 46 47 89 89 90 90 91 91 92 93 108 109 110 115 116
VAR_TYPE             : 74 87
VOID                 : 71
WHILE                : 94 95
error                : 

Nonterminals, with rules where they appear

asignador            : 17 20
asignar_variable     : 3
bloques_else         : 104 106
cambiar_variable     : 4
class                : 13
class_structure      : 110
comparacion          : 30 49 50
comparacion_logica   : 39 50 89 94 95 104 105 106
comparador           : 48
condicional          : 6
constructor          : 111 112
diccionario          : 32
do_while             : 10
element_list         : 47 67 70 98 116
elemento             : 60 61 69 70 89 101 101 117
expresion            : 17 20
for                  : 11
funcion              : 7
import               : 14
impresion            : 5
input                : 34
instance             : 113 114
instances            : 111 112 114
key_element          : 102 103
key_element_list     : 96 103
list                 : 31
litset               : 
modificador          : 19
operacion            : 29 36 38 48 48 61
operador             : 61
operador_logico      : 50
parametros           : 15 109
programa             : 2 15 16 94 95 104 105 106 107 0
retorno              : 8
return               : 12
sentencias           : 1 2 89 90 91 112
set                  : 33
specific_instance    : 91 93
tipo_coleccion       : 79 80 80 81
tipo_dato            : 15 16 17 18 89 90 91 100 108 109 115
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    $end            reduce using rule 1 (programa -> sentencias .)
    RKEY            reduce using rule 1 (programa -> sentencias .)
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    sentencias                     shift and go to state 2
    programa                       shift and go to state 36
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 3

    (3) sentencias -> asignar_variable .

    VARIABLE        reduce using rule 3 (sentencias -> asignar_variable .)
    PRINT           reduce using rule 3 (sentencias -> asignar_variable .)
    IF              reduce using rule 3 (sentencias -> asignar_variable .)
    RETURN          reduce using rule 3 (sentencias -> asignar_variable .)
    WHILE           reduce using rule 3 (sentencias -> asignar_variable .)
    DO              reduce using rule 3 (sentencias -> asignar_variable .)
    FOR             reduce using rule 3 (sentencias -> asignar_variable .)
    CLASS           reduce using rule 3 (sentencias -> asignar_variable .)
    IMPORT          reduce using rule 3 (sentencias -> asignar_variable .)
    VOID            reduce using rule 3 (sentencias -> asignar_variable .)
    FINAL_TYPE      reduce using rule 3 (sentencias -> asignar_variable .)
    CONST_TYPE      reduce using rule 3 (sentencias -> asignar_variable .)
    VAR_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    INT_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    STRING_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    BOOL_TYPE       reduce using rule 3 (sentencias -> asignar_variable .)
    LIST            reduce using rule 3 (sentencias -> asignar_variable .)
    MAP             reduce using rule 3 (sentencias -> asignar_variable .)
    SET             reduce using rule 3 (sentencias -> asignar_variable .)
    $end            reduce using rule 3 (sentencias -> asignar_variable .)
    RKEY            reduce using rule 3 (sentencias -> asignar_variable .)


state 4

    (4) sentencias -> cambiar_variable .

    VARIABLE        reduce using rule 4 (sentencias -> cambiar_variable .)
    PRINT           reduce using rule 4 (sentencias -> cambiar_variable .)
    IF              reduce using rule 4 (sentencias -> cambiar_variable .)
    RETURN          reduce using rule 4 (sentencias -> cambiar_variable .)
    WHILE           reduce using rule 4 (sentencias -> cambiar_variable .)
    DO              reduce using rule 4 (sentencias -> cambiar_variable .)
    FOR             reduce using rule 4 (sentencias -> cambiar_variable .)
    CLASS           reduce using rule 4 (sentencias -> cambiar_variable .)
    IMPORT          reduce using rule 4 (sentencias -> cambiar_variable .)
    VOID            reduce using rule 4 (sentencias -> cambiar_variable .)
    FINAL_TYPE      reduce using rule 4 (sentencias -> cambiar_variable .)
    CONST_TYPE      reduce using rule 4 (sentencias -> cambiar_variable .)
    VAR_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    INT_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    STRING_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    DOUBLE_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    BOOL_TYPE       reduce using rule 4 (sentencias -> cambiar_variable .)
    LIST            reduce using rule 4 (sentencias -> cambiar_variable .)
    MAP             reduce using rule 4 (sentencias -> cambiar_variable .)
    SET             reduce using rule 4 (sentencias -> cambiar_variable .)
    $end            reduce using rule 4 (sentencias -> cambiar_variable .)
    RKEY            reduce using rule 4 (sentencias -> cambiar_variable .)


state 5

    (5) sentencias -> impresion .

    VARIABLE        reduce using rule 5 (sentencias -> impresion .)
    PRINT           reduce using rule 5 (sentencias -> impresion .)
    IF              reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)
    WHILE           reduce using rule 5 (sentencias -> impresion .)
    DO              reduce using rule 5 (sentencias -> impresion .)
    FOR             reduce using rule 5 (sentencias -> impresion .)
    CLASS           reduce using rule 5 (sentencias -> impresion .)
    IMPORT          reduce using rule 5 (sentencias -> impresion .)
    VOID            reduce using rule 5 (sentencias -> impresion .)
    FINAL_TYPE      reduce using rule 5 (sentencias -> impresion .)
    CONST_TYPE      reduce using rule 5 (sentencias -> impresion .)
    VAR_TYPE        reduce using rule 5 (sentencias -> impresion .)
    INT_TYPE        reduce using rule 5 (sentencias -> impresion .)
    STRING_TYPE     reduce using rule 5 (sentencias -> impresion .)
    DOUBLE_TYPE     reduce using rule 5 (sentencias -> impresion .)
    BOOL_TYPE       reduce using rule 5 (sentencias -> impresion .)
    LIST            reduce using rule 5 (sentencias -> impresion .)
    MAP             reduce using rule 5 (sentencias -> impresion .)
    SET             reduce using rule 5 (sentencias -> impresion .)
    $end            reduce using rule 5 (sentencias -> impresion .)
    RKEY            reduce using rule 5 (sentencias -> impresion .)


state 6

    (6) sentencias -> condicional .

    VARIABLE        reduce using rule 6 (sentencias -> condicional .)
    PRINT           reduce using rule 6 (sentencias -> condicional .)
    IF              reduce using rule 6 (sentencias -> condicional .)
    RETURN          reduce using rule 6 (sentencias -> condicional .)
    WHILE           reduce using rule 6 (sentencias -> condicional .)
    DO              reduce using rule 6 (sentencias -> condicional .)
    FOR             reduce using rule 6 (sentencias -> condicional .)
    CLASS           reduce using rule 6 (sentencias -> condicional .)
    IMPORT          reduce using rule 6 (sentencias -> condicional .)
    VOID            reduce using rule 6 (sentencias -> condicional .)
    FINAL_TYPE      reduce using rule 6 (sentencias -> condicional .)
    CONST_TYPE      reduce using rule 6 (sentencias -> condicional .)
    VAR_TYPE        reduce using rule 6 (sentencias -> condicional .)
    INT_TYPE        reduce using rule 6 (sentencias -> condicional .)
    STRING_TYPE     reduce using rule 6 (sentencias -> condicional .)
    DOUBLE_TYPE     reduce using rule 6 (sentencias -> condicional .)
    BOOL_TYPE       reduce using rule 6 (sentencias -> condicional .)
    LIST            reduce using rule 6 (sentencias -> condicional .)
    MAP             reduce using rule 6 (sentencias -> condicional .)
    SET             reduce using rule 6 (sentencias -> condicional .)
    $end            reduce using rule 6 (sentencias -> condicional .)
    RKEY            reduce using rule 6 (sentencias -> condicional .)


state 7

    (7) sentencias -> funcion .

    VARIABLE        reduce using rule 7 (sentencias -> funcion .)
    PRINT           reduce using rule 7 (sentencias -> funcion .)
    IF              reduce using rule 7 (sentencias -> funcion .)
    RETURN          reduce using rule 7 (sentencias -> funcion .)
    WHILE           reduce using rule 7 (sentencias -> funcion .)
    DO              reduce using rule 7 (sentencias -> funcion .)
    FOR             reduce using rule 7 (sentencias -> funcion .)
    CLASS           reduce using rule 7 (sentencias -> funcion .)
    IMPORT          reduce using rule 7 (sentencias -> funcion .)
    VOID            reduce using rule 7 (sentencias -> funcion .)
    FINAL_TYPE      reduce using rule 7 (sentencias -> funcion .)
    CONST_TYPE      reduce using rule 7 (sentencias -> funcion .)
    VAR_TYPE        reduce using rule 7 (sentencias -> funcion .)
    INT_TYPE        reduce using rule 7 (sentencias -> funcion .)
    STRING_TYPE     reduce using rule 7 (sentencias -> funcion .)
    DOUBLE_TYPE     reduce using rule 7 (sentencias -> funcion .)
    BOOL_TYPE       reduce using rule 7 (sentencias -> funcion .)
    LIST            reduce using rule 7 (sentencias -> funcion .)
    MAP             reduce using rule 7 (sentencias -> funcion .)
    SET             reduce using rule 7 (sentencias -> funcion .)
    $end            reduce using rule 7 (sentencias -> funcion .)
    RKEY            reduce using rule 7 (sentencias -> funcion .)


state 8

    (8) sentencias -> retorno .

    VARIABLE        reduce using rule 8 (sentencias -> retorno .)
    PRINT           reduce using rule 8 (sentencias -> retorno .)
    IF              reduce using rule 8 (sentencias -> retorno .)
    RETURN          reduce using rule 8 (sentencias -> retorno .)
    WHILE           reduce using rule 8 (sentencias -> retorno .)
    DO              reduce using rule 8 (sentencias -> retorno .)
    FOR             reduce using rule 8 (sentencias -> retorno .)
    CLASS           reduce using rule 8 (sentencias -> retorno .)
    IMPORT          reduce using rule 8 (sentencias -> retorno .)
    VOID            reduce using rule 8 (sentencias -> retorno .)
    FINAL_TYPE      reduce using rule 8 (sentencias -> retorno .)
    CONST_TYPE      reduce using rule 8 (sentencias -> retorno .)
    VAR_TYPE        reduce using rule 8 (sentencias -> retorno .)
    INT_TYPE        reduce using rule 8 (sentencias -> retorno .)
    STRING_TYPE     reduce using rule 8 (sentencias -> retorno .)
    DOUBLE_TYPE     reduce using rule 8 (sentencias -> retorno .)
    BOOL_TYPE       reduce using rule 8 (sentencias -> retorno .)
    LIST            reduce using rule 8 (sentencias -> retorno .)
    MAP             reduce using rule 8 (sentencias -> retorno .)
    SET             reduce using rule 8 (sentencias -> retorno .)
    $end            reduce using rule 8 (sentencias -> retorno .)
    RKEY            reduce using rule 8 (sentencias -> retorno .)


state 9

    (9) sentencias -> while .

    VARIABLE        reduce using rule 9 (sentencias -> while .)
    PRINT           reduce using rule 9 (sentencias -> while .)
    IF              reduce using rule 9 (sentencias -> while .)
    RETURN          reduce using rule 9 (sentencias -> while .)
    WHILE           reduce using rule 9 (sentencias -> while .)
    DO              reduce using rule 9 (sentencias -> while .)
    FOR             reduce using rule 9 (sentencias -> while .)
    CLASS           reduce using rule 9 (sentencias -> while .)
    IMPORT          reduce using rule 9 (sentencias -> while .)
    VOID            reduce using rule 9 (sentencias -> while .)
    FINAL_TYPE      reduce using rule 9 (sentencias -> while .)
    CONST_TYPE      reduce using rule 9 (sentencias -> while .)
    VAR_TYPE        reduce using rule 9 (sentencias -> while .)
    INT_TYPE        reduce using rule 9 (sentencias -> while .)
    STRING_TYPE     reduce using rule 9 (sentencias -> while .)
    DOUBLE_TYPE     reduce using rule 9 (sentencias -> while .)
    BOOL_TYPE       reduce using rule 9 (sentencias -> while .)
    LIST            reduce using rule 9 (sentencias -> while .)
    MAP             reduce using rule 9 (sentencias -> while .)
    SET             reduce using rule 9 (sentencias -> while .)
    $end            reduce using rule 9 (sentencias -> while .)
    RKEY            reduce using rule 9 (sentencias -> while .)


state 10

    (10) sentencias -> do_while .

    VARIABLE        reduce using rule 10 (sentencias -> do_while .)
    PRINT           reduce using rule 10 (sentencias -> do_while .)
    IF              reduce using rule 10 (sentencias -> do_while .)
    RETURN          reduce using rule 10 (sentencias -> do_while .)
    WHILE           reduce using rule 10 (sentencias -> do_while .)
    DO              reduce using rule 10 (sentencias -> do_while .)
    FOR             reduce using rule 10 (sentencias -> do_while .)
    CLASS           reduce using rule 10 (sentencias -> do_while .)
    IMPORT          reduce using rule 10 (sentencias -> do_while .)
    VOID            reduce using rule 10 (sentencias -> do_while .)
    FINAL_TYPE      reduce using rule 10 (sentencias -> do_while .)
    CONST_TYPE      reduce using rule 10 (sentencias -> do_while .)
    VAR_TYPE        reduce using rule 10 (sentencias -> do_while .)
    INT_TYPE        reduce using rule 10 (sentencias -> do_while .)
    STRING_TYPE     reduce using rule 10 (sentencias -> do_while .)
    DOUBLE_TYPE     reduce using rule 10 (sentencias -> do_while .)
    BOOL_TYPE       reduce using rule 10 (sentencias -> do_while .)
    LIST            reduce using rule 10 (sentencias -> do_while .)
    MAP             reduce using rule 10 (sentencias -> do_while .)
    SET             reduce using rule 10 (sentencias -> do_while .)
    $end            reduce using rule 10 (sentencias -> do_while .)
    RKEY            reduce using rule 10 (sentencias -> do_while .)


state 11

    (11) sentencias -> for .

    VARIABLE        reduce using rule 11 (sentencias -> for .)
    PRINT           reduce using rule 11 (sentencias -> for .)
    IF              reduce using rule 11 (sentencias -> for .)
    RETURN          reduce using rule 11 (sentencias -> for .)
    WHILE           reduce using rule 11 (sentencias -> for .)
    DO              reduce using rule 11 (sentencias -> for .)
    FOR             reduce using rule 11 (sentencias -> for .)
    CLASS           reduce using rule 11 (sentencias -> for .)
    IMPORT          reduce using rule 11 (sentencias -> for .)
    VOID            reduce using rule 11 (sentencias -> for .)
    FINAL_TYPE      reduce using rule 11 (sentencias -> for .)
    CONST_TYPE      reduce using rule 11 (sentencias -> for .)
    VAR_TYPE        reduce using rule 11 (sentencias -> for .)
    INT_TYPE        reduce using rule 11 (sentencias -> for .)
    STRING_TYPE     reduce using rule 11 (sentencias -> for .)
    DOUBLE_TYPE     reduce using rule 11 (sentencias -> for .)
    BOOL_TYPE       reduce using rule 11 (sentencias -> for .)
    LIST            reduce using rule 11 (sentencias -> for .)
    MAP             reduce using rule 11 (sentencias -> for .)
    SET             reduce using rule 11 (sentencias -> for .)
    $end            reduce using rule 11 (sentencias -> for .)
    RKEY            reduce using rule 11 (sentencias -> for .)


state 12

    (12) sentencias -> return .

    VARIABLE        reduce using rule 12 (sentencias -> return .)
    PRINT           reduce using rule 12 (sentencias -> return .)
    IF              reduce using rule 12 (sentencias -> return .)
    RETURN          reduce using rule 12 (sentencias -> return .)
    WHILE           reduce using rule 12 (sentencias -> return .)
    DO              reduce using rule 12 (sentencias -> return .)
    FOR             reduce using rule 12 (sentencias -> return .)
    CLASS           reduce using rule 12 (sentencias -> return .)
    IMPORT          reduce using rule 12 (sentencias -> return .)
    VOID            reduce using rule 12 (sentencias -> return .)
    FINAL_TYPE      reduce using rule 12 (sentencias -> return .)
    CONST_TYPE      reduce using rule 12 (sentencias -> return .)
    VAR_TYPE        reduce using rule 12 (sentencias -> return .)
    INT_TYPE        reduce using rule 12 (sentencias -> return .)
    STRING_TYPE     reduce using rule 12 (sentencias -> return .)
    DOUBLE_TYPE     reduce using rule 12 (sentencias -> return .)
    BOOL_TYPE       reduce using rule 12 (sentencias -> return .)
    LIST            reduce using rule 12 (sentencias -> return .)
    MAP             reduce using rule 12 (sentencias -> return .)
    SET             reduce using rule 12 (sentencias -> return .)
    $end            reduce using rule 12 (sentencias -> return .)
    RKEY            reduce using rule 12 (sentencias -> return .)


state 13

    (13) sentencias -> class .

    VARIABLE        reduce using rule 13 (sentencias -> class .)
    PRINT           reduce using rule 13 (sentencias -> class .)
    IF              reduce using rule 13 (sentencias -> class .)
    RETURN          reduce using rule 13 (sentencias -> class .)
    WHILE           reduce using rule 13 (sentencias -> class .)
    DO              reduce using rule 13 (sentencias -> class .)
    FOR             reduce using rule 13 (sentencias -> class .)
    CLASS           reduce using rule 13 (sentencias -> class .)
    IMPORT          reduce using rule 13 (sentencias -> class .)
    VOID            reduce using rule 13 (sentencias -> class .)
    FINAL_TYPE      reduce using rule 13 (sentencias -> class .)
    CONST_TYPE      reduce using rule 13 (sentencias -> class .)
    VAR_TYPE        reduce using rule 13 (sentencias -> class .)
    INT_TYPE        reduce using rule 13 (sentencias -> class .)
    STRING_TYPE     reduce using rule 13 (sentencias -> class .)
    DOUBLE_TYPE     reduce using rule 13 (sentencias -> class .)
    BOOL_TYPE       reduce using rule 13 (sentencias -> class .)
    LIST            reduce using rule 13 (sentencias -> class .)
    MAP             reduce using rule 13 (sentencias -> class .)
    SET             reduce using rule 13 (sentencias -> class .)
    $end            reduce using rule 13 (sentencias -> class .)
    RKEY            reduce using rule 13 (sentencias -> class .)


state 14

    (14) sentencias -> import .

    VARIABLE        reduce using rule 14 (sentencias -> import .)
    PRINT           reduce using rule 14 (sentencias -> import .)
    IF              reduce using rule 14 (sentencias -> import .)
    RETURN          reduce using rule 14 (sentencias -> import .)
    WHILE           reduce using rule 14 (sentencias -> import .)
    DO              reduce using rule 14 (sentencias -> import .)
    FOR             reduce using rule 14 (sentencias -> import .)
    CLASS           reduce using rule 14 (sentencias -> import .)
    IMPORT          reduce using rule 14 (sentencias -> import .)
    VOID            reduce using rule 14 (sentencias -> import .)
    FINAL_TYPE      reduce using rule 14 (sentencias -> import .)
    CONST_TYPE      reduce using rule 14 (sentencias -> import .)
    VAR_TYPE        reduce using rule 14 (sentencias -> import .)
    INT_TYPE        reduce using rule 14 (sentencias -> import .)
    STRING_TYPE     reduce using rule 14 (sentencias -> import .)
    DOUBLE_TYPE     reduce using rule 14 (sentencias -> import .)
    BOOL_TYPE       reduce using rule 14 (sentencias -> import .)
    LIST            reduce using rule 14 (sentencias -> import .)
    MAP             reduce using rule 14 (sentencias -> import .)
    SET             reduce using rule 14 (sentencias -> import .)
    $end            reduce using rule 14 (sentencias -> import .)
    RKEY            reduce using rule 14 (sentencias -> import .)


state 15

    (17) asignar_variable -> tipo_dato . VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> tipo_dato . VARIABLE SEMICOLON
    (15) funcion -> tipo_dato . VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> tipo_dato . VARIABLE LPAREN RPAREN LKEY programa RKEY

    VARIABLE        shift and go to state 37


state 16

    (19) cambiar_variable -> VARIABLE . modificador SEMICOLON
    (20) cambiar_variable -> VARIABLE . asignador expresion SEMICOLON
    (21) modificador -> . INCREMENT_VAR
    (22) modificador -> . DECREMENT_VAR
    (23) asignador -> . ASSIGN
    (24) asignador -> . PLUS_ASSIGN
    (25) asignador -> . MINUS_ASSIGN
    (26) asignador -> . TIMES_ASSIGN
    (27) asignador -> . DIVIDE_ASSIGN
    (28) asignador -> . MODULO_ASSIGN

    INCREMENT_VAR   shift and go to state 40
    DECREMENT_VAR   shift and go to state 41
    ASSIGN          shift and go to state 42
    PLUS_ASSIGN     shift and go to state 43
    MINUS_ASSIGN    shift and go to state 44
    TIMES_ASSIGN    shift and go to state 45
    DIVIDE_ASSIGN   shift and go to state 46
    MODULO_ASSIGN   shift and go to state 47

    modificador                    shift and go to state 38
    asignador                      shift and go to state 39

state 17

    (38) impresion -> PRINT . LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> PRINT . LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 48


state 18

    (104) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 49


state 19

    (35) retorno -> RETURN . SEMICOLON
    (36) retorno -> RETURN . operacion SEMICOLON
    (117) return -> RETURN . elemento SEMICOLON
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    SEMICOLON       shift and go to state 50
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    operacion                      shift and go to state 51
    elemento                       shift and go to state 52

state 20

    (94) while -> WHILE . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 58


state 21

    (95) do_while -> DO . LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    LKEY            shift and go to state 59


state 22

    (89) for -> FOR . LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> FOR . LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> FOR . LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY

    LPAREN          shift and go to state 60


state 23

    (110) class -> CLASS . VARIABLE LKEY class_structure RKEY

    VARIABLE        shift and go to state 61


state 24

    (37) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 62


state 25

    (71) tipo_dato -> VOID .

    VARIABLE        reduce using rule 71 (tipo_dato -> VOID .)


state 26

    (72) tipo_dato -> FINAL_TYPE .

    VARIABLE        reduce using rule 72 (tipo_dato -> FINAL_TYPE .)


state 27

    (73) tipo_dato -> CONST_TYPE .

    VARIABLE        reduce using rule 73 (tipo_dato -> CONST_TYPE .)


state 28

    (74) tipo_dato -> VAR_TYPE .

    VARIABLE        reduce using rule 74 (tipo_dato -> VAR_TYPE .)


state 29

    (75) tipo_dato -> INT_TYPE .

    VARIABLE        reduce using rule 75 (tipo_dato -> INT_TYPE .)


state 30

    (76) tipo_dato -> STRING_TYPE .

    VARIABLE        reduce using rule 76 (tipo_dato -> STRING_TYPE .)


state 31

    (77) tipo_dato -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 77 (tipo_dato -> DOUBLE_TYPE .)


state 32

    (78) tipo_dato -> BOOL_TYPE .

    VARIABLE        reduce using rule 78 (tipo_dato -> BOOL_TYPE .)


state 33

    (79) tipo_dato -> LIST . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 63


state 34

    (80) tipo_dato -> MAP . LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 64


state 35

    (81) tipo_dato -> SET . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 65


state 36

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)
    RKEY            reduce using rule 2 (programa -> sentencias programa .)


state 37

    (17) asignar_variable -> tipo_dato VARIABLE . asignador expresion SEMICOLON
    (18) asignar_variable -> tipo_dato VARIABLE . SEMICOLON
    (15) funcion -> tipo_dato VARIABLE . LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> tipo_dato VARIABLE . LPAREN RPAREN LKEY programa RKEY
    (23) asignador -> . ASSIGN
    (24) asignador -> . PLUS_ASSIGN
    (25) asignador -> . MINUS_ASSIGN
    (26) asignador -> . TIMES_ASSIGN
    (27) asignador -> . DIVIDE_ASSIGN
    (28) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 67
    LPAREN          shift and go to state 68
    ASSIGN          shift and go to state 42
    PLUS_ASSIGN     shift and go to state 43
    MINUS_ASSIGN    shift and go to state 44
    TIMES_ASSIGN    shift and go to state 45
    DIVIDE_ASSIGN   shift and go to state 46
    MODULO_ASSIGN   shift and go to state 47

    asignador                      shift and go to state 66

state 38

    (19) cambiar_variable -> VARIABLE modificador . SEMICOLON

    SEMICOLON       shift and go to state 69


state 39

    (20) cambiar_variable -> VARIABLE asignador . expresion SEMICOLON
    (29) expresion -> . operacion
    (30) expresion -> . comparacion
    (31) expresion -> . list
    (32) expresion -> . diccionario
    (33) expresion -> . set
    (34) expresion -> . input
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (48) comparacion -> . operacion comparador operacion
    (67) list -> . LBRACKETS element_list RBRACKETS
    (68) list -> . LBRACKETS RBRACKETS
    (96) diccionario -> . LKEY key_element_list RKEY
    (97) diccionario -> . LKEY RKEY
    (98) set -> . LKEY element_list RKEY
    (99) set -> . LKEY RKEY
    (41) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    LBRACKETS       shift and go to state 78
    LKEY            shift and go to state 79
    STDIN           shift and go to state 80
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    expresion                      shift and go to state 70
    operacion                      shift and go to state 71
    comparacion                    shift and go to state 72
    list                           shift and go to state 73
    diccionario                    shift and go to state 74
    set                            shift and go to state 75
    input                          shift and go to state 76
    elemento                       shift and go to state 77

state 40

    (21) modificador -> INCREMENT_VAR .

    SEMICOLON       reduce using rule 21 (modificador -> INCREMENT_VAR .)


state 41

    (22) modificador -> DECREMENT_VAR .

    SEMICOLON       reduce using rule 22 (modificador -> DECREMENT_VAR .)


state 42

    (23) asignador -> ASSIGN .

    LBRACKETS       reduce using rule 23 (asignador -> ASSIGN .)
    LKEY            reduce using rule 23 (asignador -> ASSIGN .)
    STDIN           reduce using rule 23 (asignador -> ASSIGN .)
    INT             reduce using rule 23 (asignador -> ASSIGN .)
    DOUBLE          reduce using rule 23 (asignador -> ASSIGN .)
    STRING          reduce using rule 23 (asignador -> ASSIGN .)
    BOOLEAN         reduce using rule 23 (asignador -> ASSIGN .)
    VARIABLE        reduce using rule 23 (asignador -> ASSIGN .)


state 43

    (24) asignador -> PLUS_ASSIGN .

    LBRACKETS       reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    LKEY            reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    STDIN           reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    INT             reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    DOUBLE          reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    STRING          reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    BOOLEAN         reduce using rule 24 (asignador -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 24 (asignador -> PLUS_ASSIGN .)


state 44

    (25) asignador -> MINUS_ASSIGN .

    LBRACKETS       reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    LKEY            reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    STDIN           reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    INT             reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    DOUBLE          reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    STRING          reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    BOOLEAN         reduce using rule 25 (asignador -> MINUS_ASSIGN .)
    VARIABLE        reduce using rule 25 (asignador -> MINUS_ASSIGN .)


state 45

    (26) asignador -> TIMES_ASSIGN .

    LBRACKETS       reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    LKEY            reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    STDIN           reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    INT             reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    DOUBLE          reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    STRING          reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    BOOLEAN         reduce using rule 26 (asignador -> TIMES_ASSIGN .)
    VARIABLE        reduce using rule 26 (asignador -> TIMES_ASSIGN .)


state 46

    (27) asignador -> DIVIDE_ASSIGN .

    LBRACKETS       reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    LKEY            reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    STDIN           reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    INT             reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    DOUBLE          reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    BOOLEAN         reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 27 (asignador -> DIVIDE_ASSIGN .)


state 47

    (28) asignador -> MODULO_ASSIGN .

    LBRACKETS       reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    LKEY            reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    STDIN           reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    INT             reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    DOUBLE          reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    STRING          reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    BOOLEAN         reduce using rule 28 (asignador -> MODULO_ASSIGN .)
    VARIABLE        reduce using rule 28 (asignador -> MODULO_ASSIGN .)


state 48

    (38) impresion -> PRINT LPAREN . operacion RPAREN SEMICOLON
    (39) impresion -> PRINT LPAREN . comparacion_logica RPAREN SEMICOLON
    (40) impresion -> PRINT LPAREN . RPAREN SEMICOLON
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN
    (48) comparacion -> . operacion comparador operacion

    RPAREN          shift and go to state 82
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    operacion                      shift and go to state 81
    comparacion_logica             shift and go to state 83
    elemento                       shift and go to state 77
    comparacion                    shift and go to state 84

state 49

    (104) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    comparacion_logica             shift and go to state 85
    comparacion                    shift and go to state 84
    operacion                      shift and go to state 86
    elemento                       shift and go to state 77

state 50

    (35) retorno -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    PRINT           reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    IF              reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    RETURN          reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    WHILE           reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    DO              reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    FOR             reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    CLASS           reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    IMPORT          reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    VOID            reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    FINAL_TYPE      reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    CONST_TYPE      reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    VAR_TYPE        reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    LIST            reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    MAP             reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    SET             reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    $end            reduce using rule 35 (retorno -> RETURN SEMICOLON .)
    RKEY            reduce using rule 35 (retorno -> RETURN SEMICOLON .)


state 51

    (36) retorno -> RETURN operacion . SEMICOLON

    SEMICOLON       shift and go to state 87


state 52

    (117) return -> RETURN elemento . SEMICOLON
    (60) operacion -> elemento .
    (61) operacion -> elemento . operador operacion
    (62) operador -> . PLUS
    (63) operador -> . MINUS
    (64) operador -> . TIMES
    (65) operador -> . DIVIDE
    (66) operador -> . MODULO

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 88
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 94

  ! SEMICOLON       [ reduce using rule 60 (operacion -> elemento .) ]

    operador                       shift and go to state 89

state 53

    (42) elemento -> INT .

    SEMICOLON       reduce using rule 42 (elemento -> INT .)
    PLUS            reduce using rule 42 (elemento -> INT .)
    MINUS           reduce using rule 42 (elemento -> INT .)
    TIMES           reduce using rule 42 (elemento -> INT .)
    DIVIDE          reduce using rule 42 (elemento -> INT .)
    MODULO          reduce using rule 42 (elemento -> INT .)
    EQUALITY        reduce using rule 42 (elemento -> INT .)
    INEQUALITY      reduce using rule 42 (elemento -> INT .)
    GREATER_THAN    reduce using rule 42 (elemento -> INT .)
    LESS_THAN       reduce using rule 42 (elemento -> INT .)
    GREATER_EQ_THAN reduce using rule 42 (elemento -> INT .)
    LESS_EQ_THAN    reduce using rule 42 (elemento -> INT .)
    RPAREN          reduce using rule 42 (elemento -> INT .)
    COMA            reduce using rule 42 (elemento -> INT .)
    RBRACKETS       reduce using rule 42 (elemento -> INT .)
    DOS_PUNTOS      reduce using rule 42 (elemento -> INT .)
    RKEY            reduce using rule 42 (elemento -> INT .)
    AND             reduce using rule 42 (elemento -> INT .)
    OR              reduce using rule 42 (elemento -> INT .)
    NOT             reduce using rule 42 (elemento -> INT .)


state 54

    (43) elemento -> DOUBLE .

    SEMICOLON       reduce using rule 43 (elemento -> DOUBLE .)
    PLUS            reduce using rule 43 (elemento -> DOUBLE .)
    MINUS           reduce using rule 43 (elemento -> DOUBLE .)
    TIMES           reduce using rule 43 (elemento -> DOUBLE .)
    DIVIDE          reduce using rule 43 (elemento -> DOUBLE .)
    MODULO          reduce using rule 43 (elemento -> DOUBLE .)
    EQUALITY        reduce using rule 43 (elemento -> DOUBLE .)
    INEQUALITY      reduce using rule 43 (elemento -> DOUBLE .)
    GREATER_THAN    reduce using rule 43 (elemento -> DOUBLE .)
    LESS_THAN       reduce using rule 43 (elemento -> DOUBLE .)
    GREATER_EQ_THAN reduce using rule 43 (elemento -> DOUBLE .)
    LESS_EQ_THAN    reduce using rule 43 (elemento -> DOUBLE .)
    RPAREN          reduce using rule 43 (elemento -> DOUBLE .)
    COMA            reduce using rule 43 (elemento -> DOUBLE .)
    RBRACKETS       reduce using rule 43 (elemento -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 43 (elemento -> DOUBLE .)
    RKEY            reduce using rule 43 (elemento -> DOUBLE .)
    AND             reduce using rule 43 (elemento -> DOUBLE .)
    OR              reduce using rule 43 (elemento -> DOUBLE .)
    NOT             reduce using rule 43 (elemento -> DOUBLE .)


state 55

    (44) elemento -> STRING .

    SEMICOLON       reduce using rule 44 (elemento -> STRING .)
    PLUS            reduce using rule 44 (elemento -> STRING .)
    MINUS           reduce using rule 44 (elemento -> STRING .)
    TIMES           reduce using rule 44 (elemento -> STRING .)
    DIVIDE          reduce using rule 44 (elemento -> STRING .)
    MODULO          reduce using rule 44 (elemento -> STRING .)
    EQUALITY        reduce using rule 44 (elemento -> STRING .)
    INEQUALITY      reduce using rule 44 (elemento -> STRING .)
    GREATER_THAN    reduce using rule 44 (elemento -> STRING .)
    LESS_THAN       reduce using rule 44 (elemento -> STRING .)
    GREATER_EQ_THAN reduce using rule 44 (elemento -> STRING .)
    LESS_EQ_THAN    reduce using rule 44 (elemento -> STRING .)
    RPAREN          reduce using rule 44 (elemento -> STRING .)
    COMA            reduce using rule 44 (elemento -> STRING .)
    RBRACKETS       reduce using rule 44 (elemento -> STRING .)
    DOS_PUNTOS      reduce using rule 44 (elemento -> STRING .)
    RKEY            reduce using rule 44 (elemento -> STRING .)
    AND             reduce using rule 44 (elemento -> STRING .)
    OR              reduce using rule 44 (elemento -> STRING .)
    NOT             reduce using rule 44 (elemento -> STRING .)


state 56

    (45) elemento -> BOOLEAN .

    SEMICOLON       reduce using rule 45 (elemento -> BOOLEAN .)
    PLUS            reduce using rule 45 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 45 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 45 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 45 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 45 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 45 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 45 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 45 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 45 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 45 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 45 (elemento -> BOOLEAN .)
    RPAREN          reduce using rule 45 (elemento -> BOOLEAN .)
    COMA            reduce using rule 45 (elemento -> BOOLEAN .)
    RBRACKETS       reduce using rule 45 (elemento -> BOOLEAN .)
    DOS_PUNTOS      reduce using rule 45 (elemento -> BOOLEAN .)
    RKEY            reduce using rule 45 (elemento -> BOOLEAN .)
    AND             reduce using rule 45 (elemento -> BOOLEAN .)
    OR              reduce using rule 45 (elemento -> BOOLEAN .)
    NOT             reduce using rule 45 (elemento -> BOOLEAN .)


state 57

    (46) elemento -> VARIABLE .
    (47) elemento -> VARIABLE . LPAREN element_list RPAREN

    SEMICOLON       reduce using rule 46 (elemento -> VARIABLE .)
    PLUS            reduce using rule 46 (elemento -> VARIABLE .)
    MINUS           reduce using rule 46 (elemento -> VARIABLE .)
    TIMES           reduce using rule 46 (elemento -> VARIABLE .)
    DIVIDE          reduce using rule 46 (elemento -> VARIABLE .)
    MODULO          reduce using rule 46 (elemento -> VARIABLE .)
    EQUALITY        reduce using rule 46 (elemento -> VARIABLE .)
    INEQUALITY      reduce using rule 46 (elemento -> VARIABLE .)
    GREATER_THAN    reduce using rule 46 (elemento -> VARIABLE .)
    LESS_THAN       reduce using rule 46 (elemento -> VARIABLE .)
    GREATER_EQ_THAN reduce using rule 46 (elemento -> VARIABLE .)
    LESS_EQ_THAN    reduce using rule 46 (elemento -> VARIABLE .)
    RPAREN          reduce using rule 46 (elemento -> VARIABLE .)
    COMA            reduce using rule 46 (elemento -> VARIABLE .)
    RBRACKETS       reduce using rule 46 (elemento -> VARIABLE .)
    DOS_PUNTOS      reduce using rule 46 (elemento -> VARIABLE .)
    RKEY            reduce using rule 46 (elemento -> VARIABLE .)
    AND             reduce using rule 46 (elemento -> VARIABLE .)
    OR              reduce using rule 46 (elemento -> VARIABLE .)
    NOT             reduce using rule 46 (elemento -> VARIABLE .)
    LPAREN          shift and go to state 95


state 58

    (94) while -> WHILE LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    comparacion_logica             shift and go to state 96
    comparacion                    shift and go to state 84
    operacion                      shift and go to state 86
    elemento                       shift and go to state 77

state 59

    (95) do_while -> DO LKEY . programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 97
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 60

    (89) for -> FOR LPAREN . tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> FOR LPAREN . tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> FOR LPAREN . tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 98

state 61

    (110) class -> CLASS VARIABLE . LKEY class_structure RKEY

    LKEY            shift and go to state 99


state 62

    (37) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 100


state 63

    (79) tipo_dato -> LIST LESS_THAN . tipo_coleccion GREATER_THAN
    (82) tipo_coleccion -> . INT_TYPE
    (83) tipo_coleccion -> . STRING_TYPE
    (84) tipo_coleccion -> . DOUBLE_TYPE
    (85) tipo_coleccion -> . FINAL_TYPE
    (86) tipo_coleccion -> . CONST_TYPE
    (87) tipo_coleccion -> . VAR_TYPE
    (88) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 102
    STRING_TYPE     shift and go to state 103
    DOUBLE_TYPE     shift and go to state 104
    FINAL_TYPE      shift and go to state 105
    CONST_TYPE      shift and go to state 106
    VAR_TYPE        shift and go to state 107
    BOOL_TYPE       shift and go to state 108

    tipo_coleccion                 shift and go to state 101

state 64

    (80) tipo_dato -> MAP LESS_THAN . tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (82) tipo_coleccion -> . INT_TYPE
    (83) tipo_coleccion -> . STRING_TYPE
    (84) tipo_coleccion -> . DOUBLE_TYPE
    (85) tipo_coleccion -> . FINAL_TYPE
    (86) tipo_coleccion -> . CONST_TYPE
    (87) tipo_coleccion -> . VAR_TYPE
    (88) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 102
    STRING_TYPE     shift and go to state 103
    DOUBLE_TYPE     shift and go to state 104
    FINAL_TYPE      shift and go to state 105
    CONST_TYPE      shift and go to state 106
    VAR_TYPE        shift and go to state 107
    BOOL_TYPE       shift and go to state 108

    tipo_coleccion                 shift and go to state 109

state 65

    (81) tipo_dato -> SET LESS_THAN . tipo_coleccion GREATER_THAN
    (82) tipo_coleccion -> . INT_TYPE
    (83) tipo_coleccion -> . STRING_TYPE
    (84) tipo_coleccion -> . DOUBLE_TYPE
    (85) tipo_coleccion -> . FINAL_TYPE
    (86) tipo_coleccion -> . CONST_TYPE
    (87) tipo_coleccion -> . VAR_TYPE
    (88) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 102
    STRING_TYPE     shift and go to state 103
    DOUBLE_TYPE     shift and go to state 104
    FINAL_TYPE      shift and go to state 105
    CONST_TYPE      shift and go to state 106
    VAR_TYPE        shift and go to state 107
    BOOL_TYPE       shift and go to state 108

    tipo_coleccion                 shift and go to state 110

state 66

    (17) asignar_variable -> tipo_dato VARIABLE asignador . expresion SEMICOLON
    (29) expresion -> . operacion
    (30) expresion -> . comparacion
    (31) expresion -> . list
    (32) expresion -> . diccionario
    (33) expresion -> . set
    (34) expresion -> . input
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (48) comparacion -> . operacion comparador operacion
    (67) list -> . LBRACKETS element_list RBRACKETS
    (68) list -> . LBRACKETS RBRACKETS
    (96) diccionario -> . LKEY key_element_list RKEY
    (97) diccionario -> . LKEY RKEY
    (98) set -> . LKEY element_list RKEY
    (99) set -> . LKEY RKEY
    (41) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    LBRACKETS       shift and go to state 78
    LKEY            shift and go to state 79
    STDIN           shift and go to state 80
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    expresion                      shift and go to state 111
    operacion                      shift and go to state 71
    comparacion                    shift and go to state 72
    list                           shift and go to state 73
    diccionario                    shift and go to state 74
    set                            shift and go to state 75
    input                          shift and go to state 76
    elemento                       shift and go to state 77

state 67

    (18) asignar_variable -> tipo_dato VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    PRINT           reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    IF              reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RETURN          reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    WHILE           reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DO              reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    FOR             reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    CLASS           reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    IMPORT          reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VOID            reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    FINAL_TYPE      reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    CONST_TYPE      reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VAR_TYPE        reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    INT_TYPE        reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    LIST            reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    MAP             reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    SET             reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    $end            reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RKEY            reduce using rule 18 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)


state 68

    (15) funcion -> tipo_dato VARIABLE LPAREN . parametros RPAREN LKEY programa RKEY
    (16) funcion -> tipo_dato VARIABLE LPAREN . RPAREN LKEY programa RKEY
    (108) parametros -> . tipo_dato VARIABLE
    (109) parametros -> . tipo_dato VARIABLE COMA parametros
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    RPAREN          shift and go to state 114
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 112
    parametros                     shift and go to state 113

state 69

    (19) cambiar_variable -> VARIABLE modificador SEMICOLON .

    VARIABLE        reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    PRINT           reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    IF              reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    RETURN          reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    WHILE           reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    DO              reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    FOR             reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    CLASS           reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    IMPORT          reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    VOID            reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    FINAL_TYPE      reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    CONST_TYPE      reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    VAR_TYPE        reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    INT_TYPE        reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    STRING_TYPE     reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    BOOL_TYPE       reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    LIST            reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    MAP             reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    SET             reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    $end            reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    RKEY            reduce using rule 19 (cambiar_variable -> VARIABLE modificador SEMICOLON .)


state 70

    (20) cambiar_variable -> VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 115


state 71

    (29) expresion -> operacion .
    (48) comparacion -> operacion . comparador operacion
    (54) comparador -> . EQUALITY
    (55) comparador -> . INEQUALITY
    (56) comparador -> . GREATER_THAN
    (57) comparador -> . LESS_THAN
    (58) comparador -> . GREATER_EQ_THAN
    (59) comparador -> . LESS_EQ_THAN

    SEMICOLON       reduce using rule 29 (expresion -> operacion .)
    EQUALITY        shift and go to state 117
    INEQUALITY      shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQ_THAN shift and go to state 121
    LESS_EQ_THAN    shift and go to state 122

    comparador                     shift and go to state 116

state 72

    (30) expresion -> comparacion .

    SEMICOLON       reduce using rule 30 (expresion -> comparacion .)


state 73

    (31) expresion -> list .

    SEMICOLON       reduce using rule 31 (expresion -> list .)


state 74

    (32) expresion -> diccionario .

    SEMICOLON       reduce using rule 32 (expresion -> diccionario .)


state 75

    (33) expresion -> set .

    SEMICOLON       reduce using rule 33 (expresion -> set .)


state 76

    (34) expresion -> input .

    SEMICOLON       reduce using rule 34 (expresion -> input .)


state 77

    (60) operacion -> elemento .
    (61) operacion -> elemento . operador operacion
    (62) operador -> . PLUS
    (63) operador -> . MINUS
    (64) operador -> . TIMES
    (65) operador -> . DIVIDE
    (66) operador -> . MODULO

    EQUALITY        reduce using rule 60 (operacion -> elemento .)
    INEQUALITY      reduce using rule 60 (operacion -> elemento .)
    GREATER_THAN    reduce using rule 60 (operacion -> elemento .)
    LESS_THAN       reduce using rule 60 (operacion -> elemento .)
    GREATER_EQ_THAN reduce using rule 60 (operacion -> elemento .)
    LESS_EQ_THAN    reduce using rule 60 (operacion -> elemento .)
    SEMICOLON       reduce using rule 60 (operacion -> elemento .)
    RPAREN          reduce using rule 60 (operacion -> elemento .)
    AND             reduce using rule 60 (operacion -> elemento .)
    OR              reduce using rule 60 (operacion -> elemento .)
    NOT             reduce using rule 60 (operacion -> elemento .)
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MODULO          shift and go to state 94

    operador                       shift and go to state 89

state 78

    (67) list -> LBRACKETS . element_list RBRACKETS
    (68) list -> LBRACKETS . RBRACKETS
    (69) element_list -> . elemento
    (70) element_list -> . elemento COMA element_list
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    RBRACKETS       shift and go to state 124
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    element_list                   shift and go to state 123
    elemento                       shift and go to state 125

state 79

    (96) diccionario -> LKEY . key_element_list RKEY
    (97) diccionario -> LKEY . RKEY
    (98) set -> LKEY . element_list RKEY
    (99) set -> LKEY . RKEY
    (102) key_element_list -> . key_element
    (103) key_element_list -> . key_element COMA key_element_list
    (69) element_list -> . elemento
    (70) element_list -> . elemento COMA element_list
    (101) key_element -> . elemento DOS_PUNTOS elemento
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    RKEY            shift and go to state 127
    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    key_element_list               shift and go to state 126
    element_list                   shift and go to state 128
    key_element                    shift and go to state 129
    elemento                       shift and go to state 130

state 80

    (41) input -> STDIN . DOT READLINESYNC LPAREN RPAREN

    DOT             shift and go to state 131


state 81

    (38) impresion -> PRINT LPAREN operacion . RPAREN SEMICOLON
    (48) comparacion -> operacion . comparador operacion
    (54) comparador -> . EQUALITY
    (55) comparador -> . INEQUALITY
    (56) comparador -> . GREATER_THAN
    (57) comparador -> . LESS_THAN
    (58) comparador -> . GREATER_EQ_THAN
    (59) comparador -> . LESS_EQ_THAN

    RPAREN          shift and go to state 132
    EQUALITY        shift and go to state 117
    INEQUALITY      shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQ_THAN shift and go to state 121
    LESS_EQ_THAN    shift and go to state 122

    comparador                     shift and go to state 116

state 82

    (40) impresion -> PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 83

    (39) impresion -> PRINT LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 134


state 84

    (49) comparacion_logica -> comparacion .
    (50) comparacion_logica -> comparacion . operador_logico comparacion_logica
    (51) operador_logico -> . AND
    (52) operador_logico -> . OR
    (53) operador_logico -> . NOT

    RPAREN          reduce using rule 49 (comparacion_logica -> comparacion .)
    SEMICOLON       reduce using rule 49 (comparacion_logica -> comparacion .)
    AND             shift and go to state 136
    OR              shift and go to state 137
    NOT             shift and go to state 138

    operador_logico                shift and go to state 135

state 85

    (104) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 139


state 86

    (48) comparacion -> operacion . comparador operacion
    (54) comparador -> . EQUALITY
    (55) comparador -> . INEQUALITY
    (56) comparador -> . GREATER_THAN
    (57) comparador -> . LESS_THAN
    (58) comparador -> . GREATER_EQ_THAN
    (59) comparador -> . LESS_EQ_THAN

    EQUALITY        shift and go to state 117
    INEQUALITY      shift and go to state 118
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQ_THAN shift and go to state 121
    LESS_EQ_THAN    shift and go to state 122

    comparador                     shift and go to state 116

state 87

    (36) retorno -> RETURN operacion SEMICOLON .

    VARIABLE        reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    PRINT           reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    IF              reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    RETURN          reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    WHILE           reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    DO              reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    FOR             reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    CLASS           reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    IMPORT          reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    VOID            reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    FINAL_TYPE      reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    CONST_TYPE      reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    VAR_TYPE        reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    INT_TYPE        reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    STRING_TYPE     reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    BOOL_TYPE       reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    LIST            reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    MAP             reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    SET             reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    $end            reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)
    RKEY            reduce using rule 36 (retorno -> RETURN operacion SEMICOLON .)


state 88

    (117) return -> RETURN elemento SEMICOLON .

    VARIABLE        reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    PRINT           reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    IF              reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    RETURN          reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    WHILE           reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    DO              reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    FOR             reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    CLASS           reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    IMPORT          reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    VOID            reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    FINAL_TYPE      reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    CONST_TYPE      reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    VAR_TYPE        reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    INT_TYPE        reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    STRING_TYPE     reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    BOOL_TYPE       reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    LIST            reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    MAP             reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    SET             reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    $end            reduce using rule 117 (return -> RETURN elemento SEMICOLON .)
    RKEY            reduce using rule 117 (return -> RETURN elemento SEMICOLON .)


state 89

    (61) operacion -> elemento operador . operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    elemento                       shift and go to state 77
    operacion                      shift and go to state 140

state 90

    (62) operador -> PLUS .

    INT             reduce using rule 62 (operador -> PLUS .)
    DOUBLE          reduce using rule 62 (operador -> PLUS .)
    STRING          reduce using rule 62 (operador -> PLUS .)
    BOOLEAN         reduce using rule 62 (operador -> PLUS .)
    VARIABLE        reduce using rule 62 (operador -> PLUS .)


state 91

    (63) operador -> MINUS .

    INT             reduce using rule 63 (operador -> MINUS .)
    DOUBLE          reduce using rule 63 (operador -> MINUS .)
    STRING          reduce using rule 63 (operador -> MINUS .)
    BOOLEAN         reduce using rule 63 (operador -> MINUS .)
    VARIABLE        reduce using rule 63 (operador -> MINUS .)


state 92

    (64) operador -> TIMES .

    INT             reduce using rule 64 (operador -> TIMES .)
    DOUBLE          reduce using rule 64 (operador -> TIMES .)
    STRING          reduce using rule 64 (operador -> TIMES .)
    BOOLEAN         reduce using rule 64 (operador -> TIMES .)
    VARIABLE        reduce using rule 64 (operador -> TIMES .)


state 93

    (65) operador -> DIVIDE .

    INT             reduce using rule 65 (operador -> DIVIDE .)
    DOUBLE          reduce using rule 65 (operador -> DIVIDE .)
    STRING          reduce using rule 65 (operador -> DIVIDE .)
    BOOLEAN         reduce using rule 65 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 65 (operador -> DIVIDE .)


state 94

    (66) operador -> MODULO .

    INT             reduce using rule 66 (operador -> MODULO .)
    DOUBLE          reduce using rule 66 (operador -> MODULO .)
    STRING          reduce using rule 66 (operador -> MODULO .)
    BOOLEAN         reduce using rule 66 (operador -> MODULO .)
    VARIABLE        reduce using rule 66 (operador -> MODULO .)


state 95

    (47) elemento -> VARIABLE LPAREN . element_list RPAREN
    (69) element_list -> . elemento
    (70) element_list -> . elemento COMA element_list
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    element_list                   shift and go to state 141
    elemento                       shift and go to state 125

state 96

    (94) while -> WHILE LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 142


state 97

    (95) do_while -> DO LKEY programa . RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    RKEY            shift and go to state 143


state 98

    (89) for -> FOR LPAREN tipo_dato . VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> FOR LPAREN tipo_dato . VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> FOR LPAREN tipo_dato . VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY

    VARIABLE        shift and go to state 144


state 99

    (110) class -> CLASS VARIABLE LKEY . class_structure RKEY
    (111) class_structure -> . instances constructor
    (112) class_structure -> . instances constructor sentencias
    (113) instances -> . instance
    (114) instances -> . instance instances
    (115) instance -> . FINAL_TYPE tipo_dato VARIABLE SEMICOLON

    FINAL_TYPE      shift and go to state 148

    class_structure                shift and go to state 145
    instances                      shift and go to state 146
    instance                       shift and go to state 147

state 100

    (37) import -> IMPORT STRING SEMICOLON .

    VARIABLE        reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    PRINT           reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    IF              reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    RETURN          reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    WHILE           reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    DO              reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    FOR             reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    CLASS           reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    IMPORT          reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    VOID            reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    FINAL_TYPE      reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    CONST_TYPE      reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    VAR_TYPE        reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    INT_TYPE        reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    STRING_TYPE     reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    BOOL_TYPE       reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    LIST            reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    MAP             reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    SET             reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    $end            reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)
    RKEY            reduce using rule 37 (import -> IMPORT STRING SEMICOLON .)


state 101

    (79) tipo_dato -> LIST LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 149


state 102

    (82) tipo_coleccion -> INT_TYPE .

    GREATER_THAN    reduce using rule 82 (tipo_coleccion -> INT_TYPE .)
    COMA            reduce using rule 82 (tipo_coleccion -> INT_TYPE .)


state 103

    (83) tipo_coleccion -> STRING_TYPE .

    GREATER_THAN    reduce using rule 83 (tipo_coleccion -> STRING_TYPE .)
    COMA            reduce using rule 83 (tipo_coleccion -> STRING_TYPE .)


state 104

    (84) tipo_coleccion -> DOUBLE_TYPE .

    GREATER_THAN    reduce using rule 84 (tipo_coleccion -> DOUBLE_TYPE .)
    COMA            reduce using rule 84 (tipo_coleccion -> DOUBLE_TYPE .)


state 105

    (85) tipo_coleccion -> FINAL_TYPE .

    GREATER_THAN    reduce using rule 85 (tipo_coleccion -> FINAL_TYPE .)
    COMA            reduce using rule 85 (tipo_coleccion -> FINAL_TYPE .)


state 106

    (86) tipo_coleccion -> CONST_TYPE .

    GREATER_THAN    reduce using rule 86 (tipo_coleccion -> CONST_TYPE .)
    COMA            reduce using rule 86 (tipo_coleccion -> CONST_TYPE .)


state 107

    (87) tipo_coleccion -> VAR_TYPE .

    GREATER_THAN    reduce using rule 87 (tipo_coleccion -> VAR_TYPE .)
    COMA            reduce using rule 87 (tipo_coleccion -> VAR_TYPE .)


state 108

    (88) tipo_coleccion -> BOOL_TYPE .

    GREATER_THAN    reduce using rule 88 (tipo_coleccion -> BOOL_TYPE .)
    COMA            reduce using rule 88 (tipo_coleccion -> BOOL_TYPE .)


state 109

    (80) tipo_dato -> MAP LESS_THAN tipo_coleccion . COMA tipo_coleccion GREATER_THAN

    COMA            shift and go to state 150


state 110

    (81) tipo_dato -> SET LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 151


state 111

    (17) asignar_variable -> tipo_dato VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 152


state 112

    (108) parametros -> tipo_dato . VARIABLE
    (109) parametros -> tipo_dato . VARIABLE COMA parametros

    VARIABLE        shift and go to state 153


state 113

    (15) funcion -> tipo_dato VARIABLE LPAREN parametros . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 154


state 114

    (16) funcion -> tipo_dato VARIABLE LPAREN RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 155


state 115

    (20) cambiar_variable -> VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    FOR             reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    CLASS           reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    FINAL_TYPE      reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    SET             reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 20 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)


state 116

    (48) comparacion -> operacion comparador . operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    operacion                      shift and go to state 156
    elemento                       shift and go to state 77

state 117

    (54) comparador -> EQUALITY .

    INT             reduce using rule 54 (comparador -> EQUALITY .)
    DOUBLE          reduce using rule 54 (comparador -> EQUALITY .)
    STRING          reduce using rule 54 (comparador -> EQUALITY .)
    BOOLEAN         reduce using rule 54 (comparador -> EQUALITY .)
    VARIABLE        reduce using rule 54 (comparador -> EQUALITY .)


state 118

    (55) comparador -> INEQUALITY .

    INT             reduce using rule 55 (comparador -> INEQUALITY .)
    DOUBLE          reduce using rule 55 (comparador -> INEQUALITY .)
    STRING          reduce using rule 55 (comparador -> INEQUALITY .)
    BOOLEAN         reduce using rule 55 (comparador -> INEQUALITY .)
    VARIABLE        reduce using rule 55 (comparador -> INEQUALITY .)


state 119

    (56) comparador -> GREATER_THAN .

    INT             reduce using rule 56 (comparador -> GREATER_THAN .)
    DOUBLE          reduce using rule 56 (comparador -> GREATER_THAN .)
    STRING          reduce using rule 56 (comparador -> GREATER_THAN .)
    BOOLEAN         reduce using rule 56 (comparador -> GREATER_THAN .)
    VARIABLE        reduce using rule 56 (comparador -> GREATER_THAN .)


state 120

    (57) comparador -> LESS_THAN .

    INT             reduce using rule 57 (comparador -> LESS_THAN .)
    DOUBLE          reduce using rule 57 (comparador -> LESS_THAN .)
    STRING          reduce using rule 57 (comparador -> LESS_THAN .)
    BOOLEAN         reduce using rule 57 (comparador -> LESS_THAN .)
    VARIABLE        reduce using rule 57 (comparador -> LESS_THAN .)


state 121

    (58) comparador -> GREATER_EQ_THAN .

    INT             reduce using rule 58 (comparador -> GREATER_EQ_THAN .)
    DOUBLE          reduce using rule 58 (comparador -> GREATER_EQ_THAN .)
    STRING          reduce using rule 58 (comparador -> GREATER_EQ_THAN .)
    BOOLEAN         reduce using rule 58 (comparador -> GREATER_EQ_THAN .)
    VARIABLE        reduce using rule 58 (comparador -> GREATER_EQ_THAN .)


state 122

    (59) comparador -> LESS_EQ_THAN .

    INT             reduce using rule 59 (comparador -> LESS_EQ_THAN .)
    DOUBLE          reduce using rule 59 (comparador -> LESS_EQ_THAN .)
    STRING          reduce using rule 59 (comparador -> LESS_EQ_THAN .)
    BOOLEAN         reduce using rule 59 (comparador -> LESS_EQ_THAN .)
    VARIABLE        reduce using rule 59 (comparador -> LESS_EQ_THAN .)


state 123

    (67) list -> LBRACKETS element_list . RBRACKETS

    RBRACKETS       shift and go to state 157


state 124

    (68) list -> LBRACKETS RBRACKETS .

    SEMICOLON       reduce using rule 68 (list -> LBRACKETS RBRACKETS .)


state 125

    (69) element_list -> elemento .
    (70) element_list -> elemento . COMA element_list

    RBRACKETS       reduce using rule 69 (element_list -> elemento .)
    RPAREN          reduce using rule 69 (element_list -> elemento .)
    RKEY            reduce using rule 69 (element_list -> elemento .)
    COMA            shift and go to state 158


state 126

    (96) diccionario -> LKEY key_element_list . RKEY

    RKEY            shift and go to state 159


state 127

    (97) diccionario -> LKEY RKEY .
    (99) set -> LKEY RKEY .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 97 (diccionario -> LKEY RKEY .)
    SEMICOLON       reduce using rule 97 (diccionario -> LKEY RKEY .)

  ! SEMICOLON       [ reduce using rule 99 (set -> LKEY RKEY .) ]


state 128

    (98) set -> LKEY element_list . RKEY

    RKEY            shift and go to state 160


state 129

    (102) key_element_list -> key_element .
    (103) key_element_list -> key_element . COMA key_element_list

    RKEY            reduce using rule 102 (key_element_list -> key_element .)
    COMA            shift and go to state 161


state 130

    (69) element_list -> elemento .
    (70) element_list -> elemento . COMA element_list
    (101) key_element -> elemento . DOS_PUNTOS elemento

    RKEY            reduce using rule 69 (element_list -> elemento .)
    COMA            shift and go to state 158
    DOS_PUNTOS      shift and go to state 162


state 131

    (41) input -> STDIN DOT . READLINESYNC LPAREN RPAREN

    READLINESYNC    shift and go to state 163


state 132

    (38) impresion -> PRINT LPAREN operacion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 133

    (40) impresion -> PRINT LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    CLASS           reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IMPORT          reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    FINAL_TYPE      reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    SET             reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 40 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)


state 134

    (39) impresion -> PRINT LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 135

    (50) comparacion_logica -> comparacion operador_logico . comparacion_logica
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    comparacion                    shift and go to state 84
    comparacion_logica             shift and go to state 166
    operacion                      shift and go to state 86
    elemento                       shift and go to state 77

state 136

    (51) operador_logico -> AND .

    INT             reduce using rule 51 (operador_logico -> AND .)
    DOUBLE          reduce using rule 51 (operador_logico -> AND .)
    STRING          reduce using rule 51 (operador_logico -> AND .)
    BOOLEAN         reduce using rule 51 (operador_logico -> AND .)
    VARIABLE        reduce using rule 51 (operador_logico -> AND .)


state 137

    (52) operador_logico -> OR .

    INT             reduce using rule 52 (operador_logico -> OR .)
    DOUBLE          reduce using rule 52 (operador_logico -> OR .)
    STRING          reduce using rule 52 (operador_logico -> OR .)
    BOOLEAN         reduce using rule 52 (operador_logico -> OR .)
    VARIABLE        reduce using rule 52 (operador_logico -> OR .)


state 138

    (53) operador_logico -> NOT .

    INT             reduce using rule 53 (operador_logico -> NOT .)
    DOUBLE          reduce using rule 53 (operador_logico -> NOT .)
    STRING          reduce using rule 53 (operador_logico -> NOT .)
    BOOLEAN         reduce using rule 53 (operador_logico -> NOT .)
    VARIABLE        reduce using rule 53 (operador_logico -> NOT .)


state 139

    (104) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else
    (105) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 167


state 140

    (61) operacion -> elemento operador operacion .

    SEMICOLON       reduce using rule 61 (operacion -> elemento operador operacion .)
    EQUALITY        reduce using rule 61 (operacion -> elemento operador operacion .)
    INEQUALITY      reduce using rule 61 (operacion -> elemento operador operacion .)
    GREATER_THAN    reduce using rule 61 (operacion -> elemento operador operacion .)
    LESS_THAN       reduce using rule 61 (operacion -> elemento operador operacion .)
    GREATER_EQ_THAN reduce using rule 61 (operacion -> elemento operador operacion .)
    LESS_EQ_THAN    reduce using rule 61 (operacion -> elemento operador operacion .)
    RPAREN          reduce using rule 61 (operacion -> elemento operador operacion .)
    AND             reduce using rule 61 (operacion -> elemento operador operacion .)
    OR              reduce using rule 61 (operacion -> elemento operador operacion .)
    NOT             reduce using rule 61 (operacion -> elemento operador operacion .)


state 141

    (47) elemento -> VARIABLE LPAREN element_list . RPAREN

    RPAREN          shift and go to state 168


state 142

    (94) while -> WHILE LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 169


state 143

    (95) do_while -> DO LKEY programa RKEY . WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    WHILE           shift and go to state 170


state 144

    (89) for -> FOR LPAREN tipo_dato VARIABLE . ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> FOR LPAREN tipo_dato VARIABLE . IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> FOR LPAREN tipo_dato VARIABLE . LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY

    ASSIGN          shift and go to state 172
    IN              shift and go to state 173
    LPAREN          shift and go to state 171


state 145

    (110) class -> CLASS VARIABLE LKEY class_structure . RKEY

    RKEY            shift and go to state 174


state 146

    (111) class_structure -> instances . constructor
    (112) class_structure -> instances . constructor sentencias
    (116) constructor -> . VARIABLE LPAREN element_list RPAREN SEMICOLON

    VARIABLE        shift and go to state 176

    constructor                    shift and go to state 175

state 147

    (113) instances -> instance .
    (114) instances -> instance . instances
    (113) instances -> . instance
    (114) instances -> . instance instances
    (115) instance -> . FINAL_TYPE tipo_dato VARIABLE SEMICOLON

    VARIABLE        reduce using rule 113 (instances -> instance .)
    FINAL_TYPE      shift and go to state 148

    instance                       shift and go to state 147
    instances                      shift and go to state 177

state 148

    (115) instance -> FINAL_TYPE . tipo_dato VARIABLE SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 178

state 149

    (79) tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 79 (tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .)


state 150

    (80) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA . tipo_coleccion GREATER_THAN
    (82) tipo_coleccion -> . INT_TYPE
    (83) tipo_coleccion -> . STRING_TYPE
    (84) tipo_coleccion -> . DOUBLE_TYPE
    (85) tipo_coleccion -> . FINAL_TYPE
    (86) tipo_coleccion -> . CONST_TYPE
    (87) tipo_coleccion -> . VAR_TYPE
    (88) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 102
    STRING_TYPE     shift and go to state 103
    DOUBLE_TYPE     shift and go to state 104
    FINAL_TYPE      shift and go to state 105
    CONST_TYPE      shift and go to state 106
    VAR_TYPE        shift and go to state 107
    BOOL_TYPE       shift and go to state 108

    tipo_coleccion                 shift and go to state 179

state 151

    (81) tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 81 (tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .)


state 152

    (17) asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    FOR             reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    CLASS           reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    FINAL_TYPE      reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    SET             reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 17 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)


state 153

    (108) parametros -> tipo_dato VARIABLE .
    (109) parametros -> tipo_dato VARIABLE . COMA parametros

    RPAREN          reduce using rule 108 (parametros -> tipo_dato VARIABLE .)
    COMA            shift and go to state 180


state 154

    (15) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 181


state 155

    (16) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 15
    programa                       shift and go to state 182
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14

state 156

    (48) comparacion -> operacion comparador operacion .

    SEMICOLON       reduce using rule 48 (comparacion -> operacion comparador operacion .)
    AND             reduce using rule 48 (comparacion -> operacion comparador operacion .)
    OR              reduce using rule 48 (comparacion -> operacion comparador operacion .)
    NOT             reduce using rule 48 (comparacion -> operacion comparador operacion .)
    RPAREN          reduce using rule 48 (comparacion -> operacion comparador operacion .)


state 157

    (67) list -> LBRACKETS element_list RBRACKETS .

    SEMICOLON       reduce using rule 67 (list -> LBRACKETS element_list RBRACKETS .)


state 158

    (70) element_list -> elemento COMA . element_list
    (69) element_list -> . elemento
    (70) element_list -> . elemento COMA element_list
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    elemento                       shift and go to state 125
    element_list                   shift and go to state 183

state 159

    (96) diccionario -> LKEY key_element_list RKEY .

    SEMICOLON       reduce using rule 96 (diccionario -> LKEY key_element_list RKEY .)


state 160

    (98) set -> LKEY element_list RKEY .

    SEMICOLON       reduce using rule 98 (set -> LKEY element_list RKEY .)


state 161

    (103) key_element_list -> key_element COMA . key_element_list
    (102) key_element_list -> . key_element
    (103) key_element_list -> . key_element COMA key_element_list
    (101) key_element -> . elemento DOS_PUNTOS elemento
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    key_element                    shift and go to state 129
    key_element_list               shift and go to state 184
    elemento                       shift and go to state 185

state 162

    (101) key_element -> elemento DOS_PUNTOS . elemento
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    elemento                       shift and go to state 186

state 163

    (41) input -> STDIN DOT READLINESYNC . LPAREN RPAREN

    LPAREN          shift and go to state 187


state 164

    (38) impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .

    VARIABLE        reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    PRINT           reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IF              reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RETURN          reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DO              reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    FOR             reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    CLASS           reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IMPORT          reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VOID            reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    FINAL_TYPE      reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    LIST            reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    MAP             reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    SET             reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    $end            reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RKEY            reduce using rule 38 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)


state 165

    (39) impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    CLASS           reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IMPORT          reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    FINAL_TYPE      reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 39 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)


state 166

    (50) comparacion_logica -> comparacion operador_logico comparacion_logica .

    RPAREN          reduce using rule 50 (comparacion_logica -> comparacion operador_logico comparacion_logica .)
    SEMICOLON       reduce using rule 50 (comparacion_logica -> comparacion operador_logico comparacion_logica .)


state 167

    (104) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (105) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 188
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 168

    (47) elemento -> VARIABLE LPAREN element_list RPAREN .

    SEMICOLON       reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    PLUS            reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    MINUS           reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    TIMES           reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    DIVIDE          reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    MODULO          reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    EQUALITY        reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    INEQUALITY      reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    GREATER_THAN    reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    LESS_THAN       reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    GREATER_EQ_THAN reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    LESS_EQ_THAN    reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    RPAREN          reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    COMA            reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    RBRACKETS       reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    DOS_PUNTOS      reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    RKEY            reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    AND             reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    OR              reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)
    NOT             reduce using rule 47 (elemento -> VARIABLE LPAREN element_list RPAREN .)


state 169

    (94) while -> WHILE LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 189
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 170

    (95) do_while -> DO LKEY programa RKEY WHILE . LPAREN comparacion_logica RPAREN SEMICOLON

    LPAREN          shift and go to state 190


state 171

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN . specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (92) specific_instance -> . DOS_PUNTOS VARIABLE
    (93) specific_instance -> . DOS_PUNTOS VARIABLE COMA specific_instance

    DOS_PUNTOS      shift and go to state 192

    specific_instance              shift and go to state 191

state 172

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN . elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    elemento                       shift and go to state 193

state 173

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN . VARIABLE RPAREN LKEY sentencias RKEY

    VARIABLE        shift and go to state 194


state 174

    (110) class -> CLASS VARIABLE LKEY class_structure RKEY .

    VARIABLE        reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    PRINT           reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    IF              reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    RETURN          reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    WHILE           reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    DO              reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    FOR             reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    CLASS           reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    IMPORT          reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    VOID            reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    FINAL_TYPE      reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    CONST_TYPE      reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    VAR_TYPE        reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    INT_TYPE        reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    STRING_TYPE     reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    DOUBLE_TYPE     reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    BOOL_TYPE       reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    LIST            reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    MAP             reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    SET             reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    $end            reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)
    RKEY            reduce using rule 110 (class -> CLASS VARIABLE LKEY class_structure RKEY .)


state 175

    (111) class_structure -> instances constructor .
    (112) class_structure -> instances constructor . sentencias
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    RKEY            reduce using rule 111 (class_structure -> instances constructor .)
    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    sentencias                     shift and go to state 195
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 176

    (116) constructor -> VARIABLE . LPAREN element_list RPAREN SEMICOLON

    LPAREN          shift and go to state 196


state 177

    (114) instances -> instance instances .

    VARIABLE        reduce using rule 114 (instances -> instance instances .)


state 178

    (115) instance -> FINAL_TYPE tipo_dato . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 197


state 179

    (80) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 198


state 180

    (109) parametros -> tipo_dato VARIABLE COMA . parametros
    (108) parametros -> . tipo_dato VARIABLE
    (109) parametros -> . tipo_dato VARIABLE COMA parametros
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 112
    parametros                     shift and go to state 199

state 181

    (15) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 15
    programa                       shift and go to state 200
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14

state 182

    (16) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 201


state 183

    (70) element_list -> elemento COMA element_list .

    RBRACKETS       reduce using rule 70 (element_list -> elemento COMA element_list .)
    RKEY            reduce using rule 70 (element_list -> elemento COMA element_list .)
    RPAREN          reduce using rule 70 (element_list -> elemento COMA element_list .)


state 184

    (103) key_element_list -> key_element COMA key_element_list .

    RKEY            reduce using rule 103 (key_element_list -> key_element COMA key_element_list .)


state 185

    (101) key_element -> elemento . DOS_PUNTOS elemento

    DOS_PUNTOS      shift and go to state 162


state 186

    (101) key_element -> elemento DOS_PUNTOS elemento .

    COMA            reduce using rule 101 (key_element -> elemento DOS_PUNTOS elemento .)
    RKEY            reduce using rule 101 (key_element -> elemento DOS_PUNTOS elemento .)


state 187

    (41) input -> STDIN DOT READLINESYNC LPAREN . RPAREN

    RPAREN          shift and go to state 202


state 188

    (104) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else
    (105) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 203


state 189

    (94) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 204


state 190

    (95) do_while -> DO LKEY programa RKEY WHILE LPAREN . comparacion_logica RPAREN SEMICOLON
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    comparacion_logica             shift and go to state 205
    comparacion                    shift and go to state 84
    operacion                      shift and go to state 86
    elemento                       shift and go to state 77

state 191

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance . RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY

    RPAREN          shift and go to state 206


state 192

    (92) specific_instance -> DOS_PUNTOS . VARIABLE
    (93) specific_instance -> DOS_PUNTOS . VARIABLE COMA specific_instance

    VARIABLE        shift and go to state 207


state 193

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento . SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY

    SEMICOLON       shift and go to state 208


state 194

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE . RPAREN LKEY sentencias RKEY

    RPAREN          shift and go to state 209


state 195

    (112) class_structure -> instances constructor sentencias .

    RKEY            reduce using rule 112 (class_structure -> instances constructor sentencias .)


state 196

    (116) constructor -> VARIABLE LPAREN . element_list RPAREN SEMICOLON
    (69) element_list -> . elemento
    (70) element_list -> . elemento COMA element_list
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    element_list                   shift and go to state 210
    elemento                       shift and go to state 125

state 197

    (115) instance -> FINAL_TYPE tipo_dato VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 211


state 198

    (80) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 80 (tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .)


state 199

    (109) parametros -> tipo_dato VARIABLE COMA parametros .

    RPAREN          reduce using rule 109 (parametros -> tipo_dato VARIABLE COMA parametros .)


state 200

    (15) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 212


state 201

    (16) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    IF              reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DO              reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    CLASS           reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    FINAL_TYPE      reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    CONST_TYPE      reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    SET             reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    $end            reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 16 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)


state 202

    (41) input -> STDIN DOT READLINESYNC LPAREN RPAREN .

    SEMICOLON       reduce using rule 41 (input -> STDIN DOT READLINESYNC LPAREN RPAREN .)


state 203

    (104) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (105) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .
    (106) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (107) bloques_else -> . ELSE LKEY programa RKEY

    VARIABLE        reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    CLASS           reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FINAL_TYPE      reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    CONST_TYPE      reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    SET             reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 105 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    ELSE            shift and go to state 214

    bloques_else                   shift and go to state 213

state 204

    (94) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    CLASS           reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FINAL_TYPE      reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    CONST_TYPE      reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    SET             reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 94 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)


state 205

    (95) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 215


state 206

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN . IN VARIABLE RPAREN LKEY sentencias RKEY

    IN              shift and go to state 216


state 207

    (92) specific_instance -> DOS_PUNTOS VARIABLE .
    (93) specific_instance -> DOS_PUNTOS VARIABLE . COMA specific_instance

    RPAREN          reduce using rule 92 (specific_instance -> DOS_PUNTOS VARIABLE .)
    COMA            shift and go to state 217


state 208

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON . comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    elemento                       shift and go to state 77
    comparacion_logica             shift and go to state 218
    comparacion                    shift and go to state 84
    operacion                      shift and go to state 86

state 209

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN . LKEY sentencias RKEY

    LKEY            shift and go to state 219


state 210

    (116) constructor -> VARIABLE LPAREN element_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 220


state 211

    (115) instance -> FINAL_TYPE tipo_dato VARIABLE SEMICOLON .

    FINAL_TYPE      reduce using rule 115 (instance -> FINAL_TYPE tipo_dato VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 115 (instance -> FINAL_TYPE tipo_dato VARIABLE SEMICOLON .)


state 212

    (15) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    IF              reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DO              reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    CLASS           reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    FINAL_TYPE      reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    CONST_TYPE      reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    SET             reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    $end            reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 15 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)


state 213

    (104) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FOR             reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    CLASS           reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IMPORT          reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FINAL_TYPE      reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    CONST_TYPE      reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    SET             reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 104 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)


state 214

    (106) bloques_else -> ELSE . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (107) bloques_else -> ELSE . LKEY programa RKEY

    IF              shift and go to state 221
    LKEY            shift and go to state 222


state 215

    (95) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 216

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN . VARIABLE RPAREN LKEY sentencias RKEY

    VARIABLE        shift and go to state 224


state 217

    (93) specific_instance -> DOS_PUNTOS VARIABLE COMA . specific_instance
    (92) specific_instance -> . DOS_PUNTOS VARIABLE
    (93) specific_instance -> . DOS_PUNTOS VARIABLE COMA specific_instance

    DOS_PUNTOS      shift and go to state 192

    specific_instance              shift and go to state 225

state 218

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica . SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY

    SEMICOLON       shift and go to state 226


state 219

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY . sentencias RKEY
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 15
    sentencias                     shift and go to state 227
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14

state 220

    (116) constructor -> VARIABLE LPAREN element_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 228


state 221

    (106) bloques_else -> ELSE IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else

    LPAREN          shift and go to state 229


state 222

    (107) bloques_else -> ELSE LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 230
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 223

    (95) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    CLASS           reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IMPORT          reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    FINAL_TYPE      reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 95 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)


state 224

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE . RPAREN LKEY sentencias RKEY

    RPAREN          shift and go to state 231


state 225

    (93) specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance .

    RPAREN          reduce using rule 93 (specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance .)


state 226

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON . VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY

    VARIABLE        shift and go to state 232


state 227

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias . RKEY

    RKEY            shift and go to state 233


state 228

    (116) constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .

    VARIABLE        reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    IF              reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DO              reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    FOR             reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    CLASS           reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    IMPORT          reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VOID            reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    FINAL_TYPE      reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    LIST            reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    MAP             reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    SET             reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RKEY            reduce using rule 116 (constructor -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)


state 229

    (106) bloques_else -> ELSE IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (49) comparacion_logica -> . comparacion
    (50) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (48) comparacion -> . operacion comparador operacion
    (60) operacion -> . elemento
    (61) operacion -> . elemento operador operacion
    (42) elemento -> . INT
    (43) elemento -> . DOUBLE
    (44) elemento -> . STRING
    (45) elemento -> . BOOLEAN
    (46) elemento -> . VARIABLE
    (47) elemento -> . VARIABLE LPAREN element_list RPAREN

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    VARIABLE        shift and go to state 57

    comparacion_logica             shift and go to state 234
    comparacion                    shift and go to state 84
    operacion                      shift and go to state 86
    elemento                       shift and go to state 77

state 230

    (107) bloques_else -> ELSE LKEY programa . RKEY

    RKEY            shift and go to state 235


state 231

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN . LKEY sentencias RKEY

    LKEY            shift and go to state 236


state 232

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE . INCREMENT_VAR RPAREN LKEY sentencias RKEY

    INCREMENT_VAR   shift and go to state 237


state 233

    (90) for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .

    VARIABLE        reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    PRINT           reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    IF              reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    RETURN          reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    WHILE           reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    DO              reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    FOR             reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    CLASS           reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    IMPORT          reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    VOID            reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    FINAL_TYPE      reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    CONST_TYPE      reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    VAR_TYPE        reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    INT_TYPE        reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    STRING_TYPE     reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    DOUBLE_TYPE     reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    BOOL_TYPE       reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    LIST            reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    MAP             reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    SET             reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    $end            reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)
    RKEY            reduce using rule 90 (for -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY .)


state 234

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else

    RPAREN          shift and go to state 238


state 235

    (107) bloques_else -> ELSE LKEY programa RKEY .

    VARIABLE        reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    PRINT           reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    IF              reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    RETURN          reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    WHILE           reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    DO              reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    FOR             reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    CLASS           reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    IMPORT          reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    VOID            reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    FINAL_TYPE      reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    CONST_TYPE      reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    INT_TYPE        reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    LIST            reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    MAP             reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    SET             reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    $end            reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)
    RKEY            reduce using rule 107 (bloques_else -> ELSE LKEY programa RKEY .)


state 236

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY . sentencias RKEY
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 15
    sentencias                     shift and go to state 239
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14

state 237

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR . RPAREN LKEY sentencias RKEY

    RPAREN          shift and go to state 240


state 238

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else

    LKEY            shift and go to state 241


state 239

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias . RKEY

    RKEY            shift and go to state 242


state 240

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN . LKEY sentencias RKEY

    LKEY            shift and go to state 243


state 241

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    programa                       shift and go to state 244
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14
    tipo_dato                      shift and go to state 15

state 242

    (91) for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .

    VARIABLE        reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    PRINT           reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    IF              reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    RETURN          reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    WHILE           reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    DO              reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    FOR             reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    CLASS           reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    IMPORT          reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    VOID            reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    FINAL_TYPE      reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    CONST_TYPE      reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    VAR_TYPE        reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    INT_TYPE        reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    STRING_TYPE     reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    DOUBLE_TYPE     reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    BOOL_TYPE       reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    LIST            reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    MAP             reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    SET             reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    $end            reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)
    RKEY            reduce using rule 91 (for -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY .)


state 243

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY . sentencias RKEY
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . return
    (13) sentencias -> . class
    (14) sentencias -> . import
    (17) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (18) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (19) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (20) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (38) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (39) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (40) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (104) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (105) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (15) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (16) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (35) retorno -> . RETURN SEMICOLON
    (36) retorno -> . RETURN operacion SEMICOLON
    (94) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (95) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (89) for -> . FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY
    (90) for -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY sentencias RKEY
    (91) for -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY sentencias RKEY
    (117) return -> . RETURN elemento SEMICOLON
    (110) class -> . CLASS VARIABLE LKEY class_structure RKEY
    (37) import -> . IMPORT STRING SEMICOLON
    (71) tipo_dato -> . VOID
    (72) tipo_dato -> . FINAL_TYPE
    (73) tipo_dato -> . CONST_TYPE
    (74) tipo_dato -> . VAR_TYPE
    (75) tipo_dato -> . INT_TYPE
    (76) tipo_dato -> . STRING_TYPE
    (77) tipo_dato -> . DOUBLE_TYPE
    (78) tipo_dato -> . BOOL_TYPE
    (79) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (80) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (81) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    RETURN          shift and go to state 19
    WHILE           shift and go to state 20
    DO              shift and go to state 21
    FOR             shift and go to state 22
    CLASS           shift and go to state 23
    IMPORT          shift and go to state 24
    VOID            shift and go to state 25
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 27
    VAR_TYPE        shift and go to state 28
    INT_TYPE        shift and go to state 29
    STRING_TYPE     shift and go to state 30
    DOUBLE_TYPE     shift and go to state 31
    BOOL_TYPE       shift and go to state 32
    LIST            shift and go to state 33
    MAP             shift and go to state 34
    SET             shift and go to state 35

    tipo_dato                      shift and go to state 15
    sentencias                     shift and go to state 245
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    return                         shift and go to state 12
    class                          shift and go to state 13
    import                         shift and go to state 14

state 244

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else

    RKEY            shift and go to state 246


state 245

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias . RKEY

    RKEY            shift and go to state 247


state 246

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (106) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (107) bloques_else -> . ELSE LKEY programa RKEY

    ELSE            shift and go to state 214

    bloques_else                   shift and go to state 248

state 247

    (89) for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .

    VARIABLE        reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    PRINT           reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    IF              reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    RETURN          reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    WHILE           reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    DO              reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    FOR             reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    CLASS           reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    IMPORT          reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    VOID            reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    FINAL_TYPE      reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    CONST_TYPE      reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    VAR_TYPE        reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    INT_TYPE        reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    STRING_TYPE     reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    DOUBLE_TYPE     reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    BOOL_TYPE       reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    LIST            reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    MAP             reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    SET             reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    $end            reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)
    RKEY            reduce using rule 89 (for -> FOR LPAREN tipo_dato VARIABLE ASSIGN elemento SEMICOLON comparacion_logica SEMICOLON VARIABLE INCREMENT_VAR RPAREN LKEY sentencias RKEY .)


state 248

    (106) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FOR             reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    CLASS           reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IMPORT          reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FINAL_TYPE      reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    CONST_TYPE      reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    SET             reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 106 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 52 resolved as shift
WARNING: reduce/reduce conflict in state 127 resolved using rule (diccionario -> LKEY RKEY)
WARNING: rejected rule (set -> LKEY RKEY) in state 127
WARNING: Rule (set -> LKEY RKEY) is never reduced
