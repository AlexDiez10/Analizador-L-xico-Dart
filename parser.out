Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOC_COMMENT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     sentencias -> asignar_variable
Rule 4     sentencias -> funcion
Rule 5     sentencias -> class
Rule 6     sentencias -> import
Rule 7     sentencias_funcion -> asignar_variable
Rule 8     sentencias_funcion -> cambiar_variable
Rule 9     sentencias_funcion -> impresion
Rule 10    sentencias_funcion -> condicional
Rule 11    sentencias_funcion -> retorno
Rule 12    sentencias_funcion -> while
Rule 13    sentencias_funcion -> do_while
Rule 14    sentencias_funcion -> for
Rule 15    sentencias_funcion -> for_each
Rule 16    sentencias_funcion -> invocacion
Rule 17    cuerpo_funcion -> sentencias_funcion
Rule 18    cuerpo_funcion -> sentencias_funcion cuerpo_funcion
Rule 19    sentencias_clase -> asignar_variable
Rule 20    sentencias_clase -> cambiar_variable
Rule 21    sentencias_clase -> funcion
Rule 22    sentencias_clase -> constructor
Rule 23    sentencias_clase -> funcion_static
Rule 24    cuerpo_clase -> sentencias_clase
Rule 25    cuerpo_clase -> sentencias_clase cuerpo_clase
Rule 26    invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON
Rule 27    invocacion -> VARIABLE LPAREN RPAREN SEMICOLON
Rule 28    invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
Rule 29    invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
Rule 30    invocar -> VARIABLE LPAREN element_list RPAREN
Rule 31    invocar -> VARIABLE LPAREN RPAREN
Rule 32    constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON
Rule 33    atributo_list -> THIS DOT VARIABLE
Rule 34    atributo_list -> THIS DOT VARIABLE COMA atributo_list
Rule 35    funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
Rule 36    funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
Rule 37    funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
Rule 38    funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
Rule 39    variables -> VARIABLE
Rule 40    variables -> variable_indexada
Rule 41    asignar_variable -> tipo_dato variables asignador expresion SEMICOLON
Rule 42    asignar_variable -> tipo_dato variables SEMICOLON
Rule 43    asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
Rule 44    asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON
Rule 45    cambiar_variable -> variables modificador SEMICOLON
Rule 46    cambiar_variable -> variables asignador expresion SEMICOLON
Rule 47    modificador -> INCREMENT_VAR
Rule 48    modificador -> DECREMENT_VAR
Rule 49    asignador -> ASSIGN
Rule 50    asignador -> PLUS_ASSIGN
Rule 51    asignador -> MINUS_ASSIGN
Rule 52    asignador -> TIMES_ASSIGN
Rule 53    asignador -> DIVIDE_ASSIGN
Rule 54    asignador -> MODULO_ASSIGN
Rule 55    expresion -> operacion
Rule 56    expresion -> comparacion
Rule 57    expresion -> list
Rule 58    expresion -> diccionario
Rule 59    expresion -> set
Rule 60    expresion -> input
Rule 61    expresion -> invocar
Rule 62    expresion -> variable_indexada
Rule 63    retorno -> RETURN SEMICOLON
Rule 64    retorno -> RETURN expresion SEMICOLON
Rule 65    variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS
Rule 66    import -> IMPORT STRING SEMICOLON
Rule 67    impresion -> PRINT LPAREN operacion RPAREN SEMICOLON
Rule 68    impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON
Rule 69    impresion -> PRINT LPAREN RPAREN SEMICOLON
Rule 70    input -> STDIN DOT READLINESYNC LPAREN RPAREN
Rule 71    elemento -> INT
Rule 72    elemento -> DOUBLE
Rule 73    elemento -> STRING
Rule 74    elemento -> BOOLEAN
Rule 75    elemento -> get_variable
Rule 76    get_variable -> VARIABLE
Rule 77    get_variable -> VARIABLE DOT get_variable
Rule 78    comparacion -> operacion comparador operacion
Rule 79    comparacion_logica -> comparacion
Rule 80    comparacion_logica -> comparacion operador_logico comparacion_logica
Rule 81    operador_logico -> AND
Rule 82    operador_logico -> OR
Rule 83    operador_logico -> NOT
Rule 84    comparador -> EQUALITY
Rule 85    comparador -> INEQUALITY
Rule 86    comparador -> GREATER_THAN
Rule 87    comparador -> LESS_THAN
Rule 88    comparador -> GREATER_EQ_THAN
Rule 89    comparador -> LESS_EQ_THAN
Rule 90    operacion -> elemento
Rule 91    operacion -> elemento operador operacion
Rule 92    operador -> PLUS
Rule 93    operador -> MINUS
Rule 94    operador -> TIMES
Rule 95    operador -> DIVIDE
Rule 96    operador -> MODULO
Rule 97    list -> LBRACKETS element_list RBRACKETS
Rule 98    list -> LBRACKETS RBRACKETS
Rule 99    element_list -> elemento
Rule 100   element_list -> elemento COMA element_list
Rule 101   tipo_dato -> VOID
Rule 102   tipo_dato -> VARIABLE
Rule 103   tipo_dato -> FINAL_TYPE
Rule 104   tipo_dato -> CONST_TYPE
Rule 105   tipo_dato -> VAR_TYPE
Rule 106   tipo_dato -> INT_TYPE
Rule 107   tipo_dato -> STRING_TYPE
Rule 108   tipo_dato -> DOUBLE_TYPE
Rule 109   tipo_dato -> BOOL_TYPE
Rule 110   tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN
Rule 111   tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
Rule 112   tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN
Rule 113   tipo_coleccion -> INT_TYPE
Rule 114   tipo_coleccion -> STRING_TYPE
Rule 115   tipo_coleccion -> DOUBLE_TYPE
Rule 116   tipo_coleccion -> FINAL_TYPE
Rule 117   tipo_coleccion -> CONST_TYPE
Rule 118   tipo_coleccion -> VAR_TYPE
Rule 119   tipo_coleccion -> BOOL_TYPE
Rule 120   for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
Rule 121   for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
Rule 122   for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
Rule 123   for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
Rule 124   for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
Rule 125   for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
Rule 126   specific_instance -> DOS_PUNTOS VARIABLE
Rule 127   specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance
Rule 128   while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
Rule 129   while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
Rule 130   while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
Rule 131   do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
Rule 132   do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
Rule 133   do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
Rule 134   inmutables -> STRING
Rule 135   inmutables -> INT
Rule 136   inmutables -> DOUBLE
Rule 137   key_element -> inmutables DOS_PUNTOS elemento
Rule 138   key_element_list -> key_element
Rule 139   key_element_list -> key_element COMA key_element_list
Rule 140   diccionario -> LKEY key_element_list RKEY
Rule 141   diccionario -> LKEY RKEY
Rule 142   diccionario -> DICT LPAREN RPAREN
Rule 143   set -> LKEY element_list RKEY
Rule 144   set -> CONJUNTO LPAREN RPAREN
Rule 145   condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 146   condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
Rule 147   condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 148   condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
Rule 149   condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 150   condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
Rule 151   bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 152   bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 153   bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
Rule 154   bloques_else -> ELSE LKEY cuerpo_funcion RKEY
Rule 155   parametros -> tipo_dato VARIABLE
Rule 156   parametros -> tipo_dato VARIABLE COMA parametros
Rule 157   class -> CLASS VARIABLE LKEY cuerpo_clase RKEY

Terminals, with rules where they appear

AND                  : 81
ASSIGN               : 49
BOOLEAN              : 74 130 133 149 150 153
BOOL_TYPE            : 109 119
CLASS                : 157
COMA                 : 34 100 111 127 139 156
COMMENT              : 
CONJUNTO             : 144
CONST_TYPE           : 104 117
DECREMENT_VAR        : 48
DICT                 : 142
DIVIDE               : 95
DIVIDE_ASSIGN        : 53
DO                   : 131 132 133
DOC_COMMENT          : 
DOS_PUNTOS           : 126 127 137
DOT                  : 28 29 33 34 70 77 124
DOUBLE               : 72 136
DOUBLE_TYPE          : 108 115
ELSE                 : 151 152 153 154
EQUALITY             : 84
FINAL_TYPE           : 43 44 103 116
FOR                  : 120 121 122 123 124 125
GREATER_EQ_THAN      : 88
GREATER_THAN         : 86 110 111 112
IF                   : 145 146 147 148 149 150 151 152 153
IMPORT               : 66
IN                   : 123 124 125
INCREMENT_VAR        : 47
INEQUALITY           : 85
INT                  : 71 135
INT_TYPE             : 106 113
LBRACKETS            : 65 97 98
LESS_EQ_THAN         : 89
LESS_THAN            : 87 110 111 112
LIST                 : 110
LKEY                 : 35 36 37 38 120 121 122 123 124 125 128 129 130 131 132 133 140 141 143 145 146 147 148 149 150 151 152 153 154 157
LPAREN               : 26 27 28 29 30 31 32 35 36 37 38 67 68 69 70 120 121 122 123 124 125 125 128 129 130 131 132 133 142 144 145 146 147 148 149 150 151 152 153
MAP                  : 111
MINUS                : 93
MINUS_ASSIGN         : 51
MODULO               : 96
MODULO_ASSIGN        : 54
NOT                  : 83
OR                   : 82
PLUS                 : 92
PLUS_ASSIGN          : 50
PRINT                : 67 68 69
RBRACKETS            : 65 97 98
READLINESYNC         : 70
RETURN               : 63 64
RKEY                 : 35 36 37 38 120 121 122 123 124 125 128 129 130 131 132 133 140 141 143 145 146 147 148 149 150 151 152 153 154 157
RPAREN               : 26 27 28 29 30 31 32 35 36 37 38 67 68 69 70 120 121 122 123 124 125 125 128 129 130 131 132 133 142 144 145 146 147 148 149 150 151 152 153
SEMICOLON            : 26 27 28 29 32 41 42 43 44 45 46 63 64 66 67 68 69 120 121 121 122 122 131 132 133
SET                  : 112
STATIC               : 37 38
STDIN                : 70
STRING               : 66 73 134
STRING_TYPE          : 107 114
THIS                 : 33 34
TIMES                : 94
TIMES_ASSIGN         : 52
VARIABLE             : 26 27 28 28 29 29 30 31 32 33 34 35 36 37 38 39 65 76 77 102 120 121 122 123 123 124 124 124 125 125 126 127 155 156 157
VAR_TYPE             : 105 118
VOID                 : 101
WHILE                : 128 129 130 131 132 133
error                : 

Nonterminals, with rules where they appear

asignador            : 41 43 46
asignar_variable     : 3 7 19 120
atributo_list        : 32 34
bloques_else         : 145 147 149 151 152 153
cambiar_variable     : 8 20
class                : 5
comparacion          : 56 79 80
comparacion_logica   : 68 80 120 121 128 131 145 146 151
comparador           : 78
condicional          : 10
constructor          : 22
cuerpo_clase         : 25 157
cuerpo_funcion       : 18 35 36 37 38 120 121 122 123 124 125 128 129 130 131 132 133 145 146 147 148 149 150 151 152 153 154
diccionario          : 58
do_while             : 13
element_list         : 26 28 30 97 100 143
elemento             : 90 91 99 100 137
expresion            : 41 43 46 64
for                  : 14
for_each             : 15
funcion              : 4 21
funcion_static       : 23
get_variable         : 75 77 129 132 147 148 152
import               : 6
impresion            : 9
inmutables           : 65 137
input                : 60
invocacion           : 16
invocar              : 61
key_element          : 138 139
key_element_list     : 139 140
list                 : 57
modificador          : 45 120 121 122
operacion            : 55 67 78 78 91
operador             : 91
operador_logico      : 80
parametros           : 35 37 156
programa             : 2 0
retorno              : 11
sentencias           : 1 2
sentencias_clase     : 24 25
sentencias_funcion   : 17 18
set                  : 59
specific_instance    : 125 127
tipo_coleccion       : 110 111 111 112
tipo_dato            : 35 36 37 38 41 42 43 44 123 124 125 155 156
variable_indexada    : 40 62
variables            : 41 42 43 44 45 46
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . funcion
    (5) sentencias -> . class
    (6) sentencias -> . import
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (35) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (157) class -> . CLASS VARIABLE LKEY cuerpo_clase RKEY
    (66) import -> . IMPORT STRING SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    FINAL_TYPE      shift and go to state 8
    CLASS           shift and go to state 10
    IMPORT          shift and go to state 11
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    funcion                        shift and go to state 4
    class                          shift and go to state 5
    import                         shift and go to state 6
    tipo_dato                      shift and go to state 7

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . funcion
    (5) sentencias -> . class
    (6) sentencias -> . import
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (35) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (157) class -> . CLASS VARIABLE LKEY cuerpo_clase RKEY
    (66) import -> . IMPORT STRING SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    $end            reduce using rule 1 (programa -> sentencias .)
    FINAL_TYPE      shift and go to state 8
    CLASS           shift and go to state 10
    IMPORT          shift and go to state 11
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    sentencias                     shift and go to state 2
    programa                       shift and go to state 22
    asignar_variable               shift and go to state 3
    funcion                        shift and go to state 4
    class                          shift and go to state 5
    import                         shift and go to state 6
    tipo_dato                      shift and go to state 7

state 3

    (3) sentencias -> asignar_variable .

    FINAL_TYPE      reduce using rule 3 (sentencias -> asignar_variable .)
    CLASS           reduce using rule 3 (sentencias -> asignar_variable .)
    IMPORT          reduce using rule 3 (sentencias -> asignar_variable .)
    VOID            reduce using rule 3 (sentencias -> asignar_variable .)
    VARIABLE        reduce using rule 3 (sentencias -> asignar_variable .)
    CONST_TYPE      reduce using rule 3 (sentencias -> asignar_variable .)
    VAR_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    INT_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    STRING_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    BOOL_TYPE       reduce using rule 3 (sentencias -> asignar_variable .)
    LIST            reduce using rule 3 (sentencias -> asignar_variable .)
    MAP             reduce using rule 3 (sentencias -> asignar_variable .)
    SET             reduce using rule 3 (sentencias -> asignar_variable .)
    $end            reduce using rule 3 (sentencias -> asignar_variable .)


state 4

    (4) sentencias -> funcion .

    FINAL_TYPE      reduce using rule 4 (sentencias -> funcion .)
    CLASS           reduce using rule 4 (sentencias -> funcion .)
    IMPORT          reduce using rule 4 (sentencias -> funcion .)
    VOID            reduce using rule 4 (sentencias -> funcion .)
    VARIABLE        reduce using rule 4 (sentencias -> funcion .)
    CONST_TYPE      reduce using rule 4 (sentencias -> funcion .)
    VAR_TYPE        reduce using rule 4 (sentencias -> funcion .)
    INT_TYPE        reduce using rule 4 (sentencias -> funcion .)
    STRING_TYPE     reduce using rule 4 (sentencias -> funcion .)
    DOUBLE_TYPE     reduce using rule 4 (sentencias -> funcion .)
    BOOL_TYPE       reduce using rule 4 (sentencias -> funcion .)
    LIST            reduce using rule 4 (sentencias -> funcion .)
    MAP             reduce using rule 4 (sentencias -> funcion .)
    SET             reduce using rule 4 (sentencias -> funcion .)
    $end            reduce using rule 4 (sentencias -> funcion .)


state 5

    (5) sentencias -> class .

    FINAL_TYPE      reduce using rule 5 (sentencias -> class .)
    CLASS           reduce using rule 5 (sentencias -> class .)
    IMPORT          reduce using rule 5 (sentencias -> class .)
    VOID            reduce using rule 5 (sentencias -> class .)
    VARIABLE        reduce using rule 5 (sentencias -> class .)
    CONST_TYPE      reduce using rule 5 (sentencias -> class .)
    VAR_TYPE        reduce using rule 5 (sentencias -> class .)
    INT_TYPE        reduce using rule 5 (sentencias -> class .)
    STRING_TYPE     reduce using rule 5 (sentencias -> class .)
    DOUBLE_TYPE     reduce using rule 5 (sentencias -> class .)
    BOOL_TYPE       reduce using rule 5 (sentencias -> class .)
    LIST            reduce using rule 5 (sentencias -> class .)
    MAP             reduce using rule 5 (sentencias -> class .)
    SET             reduce using rule 5 (sentencias -> class .)
    $end            reduce using rule 5 (sentencias -> class .)


state 6

    (6) sentencias -> import .

    FINAL_TYPE      reduce using rule 6 (sentencias -> import .)
    CLASS           reduce using rule 6 (sentencias -> import .)
    IMPORT          reduce using rule 6 (sentencias -> import .)
    VOID            reduce using rule 6 (sentencias -> import .)
    VARIABLE        reduce using rule 6 (sentencias -> import .)
    CONST_TYPE      reduce using rule 6 (sentencias -> import .)
    VAR_TYPE        reduce using rule 6 (sentencias -> import .)
    INT_TYPE        reduce using rule 6 (sentencias -> import .)
    STRING_TYPE     reduce using rule 6 (sentencias -> import .)
    DOUBLE_TYPE     reduce using rule 6 (sentencias -> import .)
    BOOL_TYPE       reduce using rule 6 (sentencias -> import .)
    LIST            reduce using rule 6 (sentencias -> import .)
    MAP             reduce using rule 6 (sentencias -> import .)
    SET             reduce using rule 6 (sentencias -> import .)
    $end            reduce using rule 6 (sentencias -> import .)


state 7

    (41) asignar_variable -> tipo_dato . variables asignador expresion SEMICOLON
    (42) asignar_variable -> tipo_dato . variables SEMICOLON
    (35) funcion -> tipo_dato . VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> tipo_dato . VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    VARIABLE        shift and go to state 24

    variables                      shift and go to state 23
    variable_indexada              shift and go to state 25

state 8

    (43) asignar_variable -> FINAL_TYPE . tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> FINAL_TYPE . tipo_dato variables SEMICOLON
    (103) tipo_dato -> FINAL_TYPE .
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

  ! shift/reduce conflict for VARIABLE resolved as shift
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

  ! VARIABLE        [ reduce using rule 103 (tipo_dato -> FINAL_TYPE .) ]

    tipo_dato                      shift and go to state 27

state 9

    (102) tipo_dato -> VARIABLE .

    VARIABLE        reduce using rule 102 (tipo_dato -> VARIABLE .)


state 10

    (157) class -> CLASS . VARIABLE LKEY cuerpo_clase RKEY

    VARIABLE        shift and go to state 28


state 11

    (66) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 29


state 12

    (101) tipo_dato -> VOID .

    VARIABLE        reduce using rule 101 (tipo_dato -> VOID .)


state 13

    (104) tipo_dato -> CONST_TYPE .

    VARIABLE        reduce using rule 104 (tipo_dato -> CONST_TYPE .)


state 14

    (105) tipo_dato -> VAR_TYPE .

    VARIABLE        reduce using rule 105 (tipo_dato -> VAR_TYPE .)


state 15

    (106) tipo_dato -> INT_TYPE .

    VARIABLE        reduce using rule 106 (tipo_dato -> INT_TYPE .)


state 16

    (107) tipo_dato -> STRING_TYPE .

    VARIABLE        reduce using rule 107 (tipo_dato -> STRING_TYPE .)


state 17

    (108) tipo_dato -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 108 (tipo_dato -> DOUBLE_TYPE .)


state 18

    (109) tipo_dato -> BOOL_TYPE .

    VARIABLE        reduce using rule 109 (tipo_dato -> BOOL_TYPE .)


state 19

    (110) tipo_dato -> LIST . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 30


state 20

    (111) tipo_dato -> MAP . LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 31


state 21

    (112) tipo_dato -> SET . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 32


state 22

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)


state 23

    (41) asignar_variable -> tipo_dato variables . asignador expresion SEMICOLON
    (42) asignar_variable -> tipo_dato variables . SEMICOLON
    (49) asignador -> . ASSIGN
    (50) asignador -> . PLUS_ASSIGN
    (51) asignador -> . MINUS_ASSIGN
    (52) asignador -> . TIMES_ASSIGN
    (53) asignador -> . DIVIDE_ASSIGN
    (54) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 34
    ASSIGN          shift and go to state 35
    PLUS_ASSIGN     shift and go to state 36
    MINUS_ASSIGN    shift and go to state 37
    TIMES_ASSIGN    shift and go to state 38
    DIVIDE_ASSIGN   shift and go to state 39
    MODULO_ASSIGN   shift and go to state 40

    asignador                      shift and go to state 33

state 24

    (35) funcion -> tipo_dato VARIABLE . LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> tipo_dato VARIABLE . LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (39) variables -> VARIABLE .
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS

    LPAREN          shift and go to state 41
    SEMICOLON       reduce using rule 39 (variables -> VARIABLE .)
    ASSIGN          reduce using rule 39 (variables -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 39 (variables -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    MODULO_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    LBRACKETS       shift and go to state 42


state 25

    (40) variables -> variable_indexada .

    SEMICOLON       reduce using rule 40 (variables -> variable_indexada .)
    ASSIGN          reduce using rule 40 (variables -> variable_indexada .)
    PLUS_ASSIGN     reduce using rule 40 (variables -> variable_indexada .)
    MINUS_ASSIGN    reduce using rule 40 (variables -> variable_indexada .)
    TIMES_ASSIGN    reduce using rule 40 (variables -> variable_indexada .)
    DIVIDE_ASSIGN   reduce using rule 40 (variables -> variable_indexada .)
    MODULO_ASSIGN   reduce using rule 40 (variables -> variable_indexada .)
    INCREMENT_VAR   reduce using rule 40 (variables -> variable_indexada .)
    DECREMENT_VAR   reduce using rule 40 (variables -> variable_indexada .)


state 26

    (103) tipo_dato -> FINAL_TYPE .

    VARIABLE        reduce using rule 103 (tipo_dato -> FINAL_TYPE .)


state 27

    (43) asignar_variable -> FINAL_TYPE tipo_dato . variables asignador expresion SEMICOLON
    (44) asignar_variable -> FINAL_TYPE tipo_dato . variables SEMICOLON
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    VARIABLE        shift and go to state 44

    variables                      shift and go to state 43
    variable_indexada              shift and go to state 25

state 28

    (157) class -> CLASS VARIABLE . LKEY cuerpo_clase RKEY

    LKEY            shift and go to state 45


state 29

    (66) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 46


state 30

    (110) tipo_dato -> LIST LESS_THAN . tipo_coleccion GREATER_THAN
    (113) tipo_coleccion -> . INT_TYPE
    (114) tipo_coleccion -> . STRING_TYPE
    (115) tipo_coleccion -> . DOUBLE_TYPE
    (116) tipo_coleccion -> . FINAL_TYPE
    (117) tipo_coleccion -> . CONST_TYPE
    (118) tipo_coleccion -> . VAR_TYPE
    (119) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 48
    STRING_TYPE     shift and go to state 49
    DOUBLE_TYPE     shift and go to state 50
    FINAL_TYPE      shift and go to state 51
    CONST_TYPE      shift and go to state 52
    VAR_TYPE        shift and go to state 53
    BOOL_TYPE       shift and go to state 54

    tipo_coleccion                 shift and go to state 47

state 31

    (111) tipo_dato -> MAP LESS_THAN . tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (113) tipo_coleccion -> . INT_TYPE
    (114) tipo_coleccion -> . STRING_TYPE
    (115) tipo_coleccion -> . DOUBLE_TYPE
    (116) tipo_coleccion -> . FINAL_TYPE
    (117) tipo_coleccion -> . CONST_TYPE
    (118) tipo_coleccion -> . VAR_TYPE
    (119) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 48
    STRING_TYPE     shift and go to state 49
    DOUBLE_TYPE     shift and go to state 50
    FINAL_TYPE      shift and go to state 51
    CONST_TYPE      shift and go to state 52
    VAR_TYPE        shift and go to state 53
    BOOL_TYPE       shift and go to state 54

    tipo_coleccion                 shift and go to state 55

state 32

    (112) tipo_dato -> SET LESS_THAN . tipo_coleccion GREATER_THAN
    (113) tipo_coleccion -> . INT_TYPE
    (114) tipo_coleccion -> . STRING_TYPE
    (115) tipo_coleccion -> . DOUBLE_TYPE
    (116) tipo_coleccion -> . FINAL_TYPE
    (117) tipo_coleccion -> . CONST_TYPE
    (118) tipo_coleccion -> . VAR_TYPE
    (119) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 48
    STRING_TYPE     shift and go to state 49
    DOUBLE_TYPE     shift and go to state 50
    FINAL_TYPE      shift and go to state 51
    CONST_TYPE      shift and go to state 52
    VAR_TYPE        shift and go to state 53
    BOOL_TYPE       shift and go to state 54

    tipo_coleccion                 shift and go to state 56

state 33

    (41) asignar_variable -> tipo_dato variables asignador . expresion SEMICOLON
    (55) expresion -> . operacion
    (56) expresion -> . comparacion
    (57) expresion -> . list
    (58) expresion -> . diccionario
    (59) expresion -> . set
    (60) expresion -> . input
    (61) expresion -> . invocar
    (62) expresion -> . variable_indexada
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (78) comparacion -> . operacion comparador operacion
    (97) list -> . LBRACKETS element_list RBRACKETS
    (98) list -> . LBRACKETS RBRACKETS
    (140) diccionario -> . LKEY key_element_list RKEY
    (141) diccionario -> . LKEY RKEY
    (142) diccionario -> . DICT LPAREN RPAREN
    (143) set -> . LKEY element_list RKEY
    (144) set -> . CONJUNTO LPAREN RPAREN
    (70) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (30) invocar -> . VARIABLE LPAREN element_list RPAREN
    (31) invocar -> . VARIABLE LPAREN RPAREN
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    LBRACKETS       shift and go to state 67
    LKEY            shift and go to state 68
    DICT            shift and go to state 69
    CONJUNTO        shift and go to state 70
    STDIN           shift and go to state 71
    VARIABLE        shift and go to state 72
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76

    expresion                      shift and go to state 57
    operacion                      shift and go to state 58
    comparacion                    shift and go to state 59
    list                           shift and go to state 60
    diccionario                    shift and go to state 61
    set                            shift and go to state 62
    input                          shift and go to state 63
    invocar                        shift and go to state 64
    variable_indexada              shift and go to state 65
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 34

    (42) asignar_variable -> tipo_dato variables SEMICOLON .

    FINAL_TYPE      reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    CLASS           reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    IMPORT          reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    VOID            reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    VARIABLE        reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    CONST_TYPE      reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    VAR_TYPE        reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    INT_TYPE        reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    STRING_TYPE     reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    BOOL_TYPE       reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    LIST            reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    MAP             reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    SET             reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    $end            reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    STATIC          reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    RKEY            reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    PRINT           reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    IF              reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    RETURN          reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    WHILE           reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    DO              reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    FOR             reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    INT             reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    DOUBLE          reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    STRING          reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)
    BOOLEAN         reduce using rule 42 (asignar_variable -> tipo_dato variables SEMICOLON .)


state 35

    (49) asignador -> ASSIGN .

    LBRACKETS       reduce using rule 49 (asignador -> ASSIGN .)
    LKEY            reduce using rule 49 (asignador -> ASSIGN .)
    DICT            reduce using rule 49 (asignador -> ASSIGN .)
    CONJUNTO        reduce using rule 49 (asignador -> ASSIGN .)
    STDIN           reduce using rule 49 (asignador -> ASSIGN .)
    VARIABLE        reduce using rule 49 (asignador -> ASSIGN .)
    INT             reduce using rule 49 (asignador -> ASSIGN .)
    DOUBLE          reduce using rule 49 (asignador -> ASSIGN .)
    STRING          reduce using rule 49 (asignador -> ASSIGN .)
    BOOLEAN         reduce using rule 49 (asignador -> ASSIGN .)


state 36

    (50) asignador -> PLUS_ASSIGN .

    LBRACKETS       reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    LKEY            reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    DICT            reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    CONJUNTO        reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    STDIN           reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    INT             reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    DOUBLE          reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    STRING          reduce using rule 50 (asignador -> PLUS_ASSIGN .)
    BOOLEAN         reduce using rule 50 (asignador -> PLUS_ASSIGN .)


state 37

    (51) asignador -> MINUS_ASSIGN .

    LBRACKETS       reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    LKEY            reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    DICT            reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    CONJUNTO        reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    STDIN           reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    VARIABLE        reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    INT             reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    DOUBLE          reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    STRING          reduce using rule 51 (asignador -> MINUS_ASSIGN .)
    BOOLEAN         reduce using rule 51 (asignador -> MINUS_ASSIGN .)


state 38

    (52) asignador -> TIMES_ASSIGN .

    LBRACKETS       reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    LKEY            reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    DICT            reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    CONJUNTO        reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    STDIN           reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    VARIABLE        reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    INT             reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    DOUBLE          reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    STRING          reduce using rule 52 (asignador -> TIMES_ASSIGN .)
    BOOLEAN         reduce using rule 52 (asignador -> TIMES_ASSIGN .)


state 39

    (53) asignador -> DIVIDE_ASSIGN .

    LBRACKETS       reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    LKEY            reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    DICT            reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    CONJUNTO        reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    STDIN           reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    INT             reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    DOUBLE          reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)
    BOOLEAN         reduce using rule 53 (asignador -> DIVIDE_ASSIGN .)


state 40

    (54) asignador -> MODULO_ASSIGN .

    LBRACKETS       reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    LKEY            reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    DICT            reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    CONJUNTO        reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    STDIN           reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    VARIABLE        reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    INT             reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    DOUBLE          reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    STRING          reduce using rule 54 (asignador -> MODULO_ASSIGN .)
    BOOLEAN         reduce using rule 54 (asignador -> MODULO_ASSIGN .)


state 41

    (35) funcion -> tipo_dato VARIABLE LPAREN . parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> tipo_dato VARIABLE LPAREN . RPAREN LKEY cuerpo_funcion RKEY
    (155) parametros -> . tipo_dato VARIABLE
    (156) parametros -> . tipo_dato VARIABLE COMA parametros
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    RPAREN          shift and go to state 80
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 78
    parametros                     shift and go to state 79

state 42

    (65) variable_indexada -> VARIABLE LBRACKETS . inmutables RBRACKETS
    (134) inmutables -> . STRING
    (135) inmutables -> . INT
    (136) inmutables -> . DOUBLE

    STRING          shift and go to state 82
    INT             shift and go to state 83
    DOUBLE          shift and go to state 84

    inmutables                     shift and go to state 81

state 43

    (43) asignar_variable -> FINAL_TYPE tipo_dato variables . asignador expresion SEMICOLON
    (44) asignar_variable -> FINAL_TYPE tipo_dato variables . SEMICOLON
    (49) asignador -> . ASSIGN
    (50) asignador -> . PLUS_ASSIGN
    (51) asignador -> . MINUS_ASSIGN
    (52) asignador -> . TIMES_ASSIGN
    (53) asignador -> . DIVIDE_ASSIGN
    (54) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 86
    ASSIGN          shift and go to state 35
    PLUS_ASSIGN     shift and go to state 36
    MINUS_ASSIGN    shift and go to state 37
    TIMES_ASSIGN    shift and go to state 38
    DIVIDE_ASSIGN   shift and go to state 39
    MODULO_ASSIGN   shift and go to state 40

    asignador                      shift and go to state 85

state 44

    (39) variables -> VARIABLE .
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS

    SEMICOLON       reduce using rule 39 (variables -> VARIABLE .)
    ASSIGN          reduce using rule 39 (variables -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 39 (variables -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    MODULO_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    LBRACKETS       shift and go to state 42


state 45

    (157) class -> CLASS VARIABLE LKEY . cuerpo_clase RKEY
    (24) cuerpo_clase -> . sentencias_clase
    (25) cuerpo_clase -> . sentencias_clase cuerpo_clase
    (19) sentencias_clase -> . asignar_variable
    (20) sentencias_clase -> . cambiar_variable
    (21) sentencias_clase -> . funcion
    (22) sentencias_clase -> . constructor
    (23) sentencias_clase -> . funcion_static
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (35) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (32) constructor -> . VARIABLE LPAREN atributo_list RPAREN SEMICOLON
    (37) funcion_static -> . STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> . STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    VARIABLE        shift and go to state 87
    STATIC          shift and go to state 96
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_clase                   shift and go to state 88
    sentencias_clase               shift and go to state 89
    asignar_variable               shift and go to state 90
    cambiar_variable               shift and go to state 91
    funcion                        shift and go to state 92
    constructor                    shift and go to state 93
    funcion_static                 shift and go to state 94
    tipo_dato                      shift and go to state 7
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 46

    (66) import -> IMPORT STRING SEMICOLON .

    FINAL_TYPE      reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    CLASS           reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    IMPORT          reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    VOID            reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    VARIABLE        reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    CONST_TYPE      reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    VAR_TYPE        reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    INT_TYPE        reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    STRING_TYPE     reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    BOOL_TYPE       reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    LIST            reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    MAP             reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    SET             reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)
    $end            reduce using rule 66 (import -> IMPORT STRING SEMICOLON .)


state 47

    (110) tipo_dato -> LIST LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 97


state 48

    (113) tipo_coleccion -> INT_TYPE .

    GREATER_THAN    reduce using rule 113 (tipo_coleccion -> INT_TYPE .)
    COMA            reduce using rule 113 (tipo_coleccion -> INT_TYPE .)


state 49

    (114) tipo_coleccion -> STRING_TYPE .

    GREATER_THAN    reduce using rule 114 (tipo_coleccion -> STRING_TYPE .)
    COMA            reduce using rule 114 (tipo_coleccion -> STRING_TYPE .)


state 50

    (115) tipo_coleccion -> DOUBLE_TYPE .

    GREATER_THAN    reduce using rule 115 (tipo_coleccion -> DOUBLE_TYPE .)
    COMA            reduce using rule 115 (tipo_coleccion -> DOUBLE_TYPE .)


state 51

    (116) tipo_coleccion -> FINAL_TYPE .

    GREATER_THAN    reduce using rule 116 (tipo_coleccion -> FINAL_TYPE .)
    COMA            reduce using rule 116 (tipo_coleccion -> FINAL_TYPE .)


state 52

    (117) tipo_coleccion -> CONST_TYPE .

    GREATER_THAN    reduce using rule 117 (tipo_coleccion -> CONST_TYPE .)
    COMA            reduce using rule 117 (tipo_coleccion -> CONST_TYPE .)


state 53

    (118) tipo_coleccion -> VAR_TYPE .

    GREATER_THAN    reduce using rule 118 (tipo_coleccion -> VAR_TYPE .)
    COMA            reduce using rule 118 (tipo_coleccion -> VAR_TYPE .)


state 54

    (119) tipo_coleccion -> BOOL_TYPE .

    GREATER_THAN    reduce using rule 119 (tipo_coleccion -> BOOL_TYPE .)
    COMA            reduce using rule 119 (tipo_coleccion -> BOOL_TYPE .)


state 55

    (111) tipo_dato -> MAP LESS_THAN tipo_coleccion . COMA tipo_coleccion GREATER_THAN

    COMA            shift and go to state 98


state 56

    (112) tipo_dato -> SET LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 99


state 57

    (41) asignar_variable -> tipo_dato variables asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 100


state 58

    (55) expresion -> operacion .
    (78) comparacion -> operacion . comparador operacion
    (84) comparador -> . EQUALITY
    (85) comparador -> . INEQUALITY
    (86) comparador -> . GREATER_THAN
    (87) comparador -> . LESS_THAN
    (88) comparador -> . GREATER_EQ_THAN
    (89) comparador -> . LESS_EQ_THAN

    SEMICOLON       reduce using rule 55 (expresion -> operacion .)
    EQUALITY        shift and go to state 102
    INEQUALITY      shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    GREATER_EQ_THAN shift and go to state 106
    LESS_EQ_THAN    shift and go to state 107

    comparador                     shift and go to state 101

state 59

    (56) expresion -> comparacion .

    SEMICOLON       reduce using rule 56 (expresion -> comparacion .)


state 60

    (57) expresion -> list .

    SEMICOLON       reduce using rule 57 (expresion -> list .)


state 61

    (58) expresion -> diccionario .

    SEMICOLON       reduce using rule 58 (expresion -> diccionario .)


state 62

    (59) expresion -> set .

    SEMICOLON       reduce using rule 59 (expresion -> set .)


state 63

    (60) expresion -> input .

    SEMICOLON       reduce using rule 60 (expresion -> input .)


state 64

    (61) expresion -> invocar .

    SEMICOLON       reduce using rule 61 (expresion -> invocar .)


state 65

    (62) expresion -> variable_indexada .

    SEMICOLON       reduce using rule 62 (expresion -> variable_indexada .)


state 66

    (90) operacion -> elemento .
    (91) operacion -> elemento . operador operacion
    (92) operador -> . PLUS
    (93) operador -> . MINUS
    (94) operador -> . TIMES
    (95) operador -> . DIVIDE
    (96) operador -> . MODULO

    EQUALITY        reduce using rule 90 (operacion -> elemento .)
    INEQUALITY      reduce using rule 90 (operacion -> elemento .)
    GREATER_THAN    reduce using rule 90 (operacion -> elemento .)
    LESS_THAN       reduce using rule 90 (operacion -> elemento .)
    GREATER_EQ_THAN reduce using rule 90 (operacion -> elemento .)
    LESS_EQ_THAN    reduce using rule 90 (operacion -> elemento .)
    SEMICOLON       reduce using rule 90 (operacion -> elemento .)
    AND             reduce using rule 90 (operacion -> elemento .)
    OR              reduce using rule 90 (operacion -> elemento .)
    NOT             reduce using rule 90 (operacion -> elemento .)
    RPAREN          reduce using rule 90 (operacion -> elemento .)
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    TIMES           shift and go to state 111
    DIVIDE          shift and go to state 112
    MODULO          shift and go to state 113

    operador                       shift and go to state 108

state 67

    (97) list -> LBRACKETS . element_list RBRACKETS
    (98) list -> LBRACKETS . RBRACKETS
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RBRACKETS       shift and go to state 115
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    element_list                   shift and go to state 114
    elemento                       shift and go to state 116
    get_variable                   shift and go to state 77

state 68

    (140) diccionario -> LKEY . key_element_list RKEY
    (141) diccionario -> LKEY . RKEY
    (143) set -> LKEY . element_list RKEY
    (138) key_element_list -> . key_element
    (139) key_element_list -> . key_element COMA key_element_list
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (137) key_element -> . inmutables DOS_PUNTOS elemento
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (134) inmutables -> . STRING
    (135) inmutables -> . INT
    (136) inmutables -> . DOUBLE
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RKEY            shift and go to state 119
    INT             shift and go to state 123
    DOUBLE          shift and go to state 124
    STRING          shift and go to state 125
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    key_element_list               shift and go to state 118
    element_list                   shift and go to state 120
    key_element                    shift and go to state 121
    elemento                       shift and go to state 116
    inmutables                     shift and go to state 122
    get_variable                   shift and go to state 77

state 69

    (142) diccionario -> DICT . LPAREN RPAREN

    LPAREN          shift and go to state 126


state 70

    (144) set -> CONJUNTO . LPAREN RPAREN

    LPAREN          shift and go to state 127


state 71

    (70) input -> STDIN . DOT READLINESYNC LPAREN RPAREN

    DOT             shift and go to state 128


state 72

    (30) invocar -> VARIABLE . LPAREN element_list RPAREN
    (31) invocar -> VARIABLE . LPAREN RPAREN
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS
    (76) get_variable -> VARIABLE .
    (77) get_variable -> VARIABLE . DOT get_variable

    LPAREN          shift and go to state 129
    LBRACKETS       shift and go to state 42
    PLUS            reduce using rule 76 (get_variable -> VARIABLE .)
    MINUS           reduce using rule 76 (get_variable -> VARIABLE .)
    TIMES           reduce using rule 76 (get_variable -> VARIABLE .)
    DIVIDE          reduce using rule 76 (get_variable -> VARIABLE .)
    MODULO          reduce using rule 76 (get_variable -> VARIABLE .)
    EQUALITY        reduce using rule 76 (get_variable -> VARIABLE .)
    INEQUALITY      reduce using rule 76 (get_variable -> VARIABLE .)
    GREATER_THAN    reduce using rule 76 (get_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 76 (get_variable -> VARIABLE .)
    GREATER_EQ_THAN reduce using rule 76 (get_variable -> VARIABLE .)
    LESS_EQ_THAN    reduce using rule 76 (get_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (get_variable -> VARIABLE .)
    DOT             shift and go to state 130


state 73

    (71) elemento -> INT .

    PLUS            reduce using rule 71 (elemento -> INT .)
    MINUS           reduce using rule 71 (elemento -> INT .)
    TIMES           reduce using rule 71 (elemento -> INT .)
    DIVIDE          reduce using rule 71 (elemento -> INT .)
    MODULO          reduce using rule 71 (elemento -> INT .)
    EQUALITY        reduce using rule 71 (elemento -> INT .)
    INEQUALITY      reduce using rule 71 (elemento -> INT .)
    GREATER_THAN    reduce using rule 71 (elemento -> INT .)
    LESS_THAN       reduce using rule 71 (elemento -> INT .)
    GREATER_EQ_THAN reduce using rule 71 (elemento -> INT .)
    LESS_EQ_THAN    reduce using rule 71 (elemento -> INT .)
    SEMICOLON       reduce using rule 71 (elemento -> INT .)
    COMA            reduce using rule 71 (elemento -> INT .)
    RBRACKETS       reduce using rule 71 (elemento -> INT .)
    AND             reduce using rule 71 (elemento -> INT .)
    OR              reduce using rule 71 (elemento -> INT .)
    NOT             reduce using rule 71 (elemento -> INT .)
    RPAREN          reduce using rule 71 (elemento -> INT .)
    RKEY            reduce using rule 71 (elemento -> INT .)


state 74

    (72) elemento -> DOUBLE .

    PLUS            reduce using rule 72 (elemento -> DOUBLE .)
    MINUS           reduce using rule 72 (elemento -> DOUBLE .)
    TIMES           reduce using rule 72 (elemento -> DOUBLE .)
    DIVIDE          reduce using rule 72 (elemento -> DOUBLE .)
    MODULO          reduce using rule 72 (elemento -> DOUBLE .)
    EQUALITY        reduce using rule 72 (elemento -> DOUBLE .)
    INEQUALITY      reduce using rule 72 (elemento -> DOUBLE .)
    GREATER_THAN    reduce using rule 72 (elemento -> DOUBLE .)
    LESS_THAN       reduce using rule 72 (elemento -> DOUBLE .)
    GREATER_EQ_THAN reduce using rule 72 (elemento -> DOUBLE .)
    LESS_EQ_THAN    reduce using rule 72 (elemento -> DOUBLE .)
    SEMICOLON       reduce using rule 72 (elemento -> DOUBLE .)
    COMA            reduce using rule 72 (elemento -> DOUBLE .)
    RBRACKETS       reduce using rule 72 (elemento -> DOUBLE .)
    AND             reduce using rule 72 (elemento -> DOUBLE .)
    OR              reduce using rule 72 (elemento -> DOUBLE .)
    NOT             reduce using rule 72 (elemento -> DOUBLE .)
    RPAREN          reduce using rule 72 (elemento -> DOUBLE .)
    RKEY            reduce using rule 72 (elemento -> DOUBLE .)


state 75

    (73) elemento -> STRING .

    PLUS            reduce using rule 73 (elemento -> STRING .)
    MINUS           reduce using rule 73 (elemento -> STRING .)
    TIMES           reduce using rule 73 (elemento -> STRING .)
    DIVIDE          reduce using rule 73 (elemento -> STRING .)
    MODULO          reduce using rule 73 (elemento -> STRING .)
    EQUALITY        reduce using rule 73 (elemento -> STRING .)
    INEQUALITY      reduce using rule 73 (elemento -> STRING .)
    GREATER_THAN    reduce using rule 73 (elemento -> STRING .)
    LESS_THAN       reduce using rule 73 (elemento -> STRING .)
    GREATER_EQ_THAN reduce using rule 73 (elemento -> STRING .)
    LESS_EQ_THAN    reduce using rule 73 (elemento -> STRING .)
    SEMICOLON       reduce using rule 73 (elemento -> STRING .)
    COMA            reduce using rule 73 (elemento -> STRING .)
    RBRACKETS       reduce using rule 73 (elemento -> STRING .)
    AND             reduce using rule 73 (elemento -> STRING .)
    OR              reduce using rule 73 (elemento -> STRING .)
    NOT             reduce using rule 73 (elemento -> STRING .)
    RPAREN          reduce using rule 73 (elemento -> STRING .)
    RKEY            reduce using rule 73 (elemento -> STRING .)


state 76

    (74) elemento -> BOOLEAN .

    PLUS            reduce using rule 74 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 74 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 74 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 74 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 74 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 74 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    SEMICOLON       reduce using rule 74 (elemento -> BOOLEAN .)
    COMA            reduce using rule 74 (elemento -> BOOLEAN .)
    RBRACKETS       reduce using rule 74 (elemento -> BOOLEAN .)
    RKEY            reduce using rule 74 (elemento -> BOOLEAN .)
    AND             reduce using rule 74 (elemento -> BOOLEAN .)
    OR              reduce using rule 74 (elemento -> BOOLEAN .)
    NOT             reduce using rule 74 (elemento -> BOOLEAN .)
    RPAREN          reduce using rule 74 (elemento -> BOOLEAN .)


state 77

    (75) elemento -> get_variable .

    PLUS            reduce using rule 75 (elemento -> get_variable .)
    MINUS           reduce using rule 75 (elemento -> get_variable .)
    TIMES           reduce using rule 75 (elemento -> get_variable .)
    DIVIDE          reduce using rule 75 (elemento -> get_variable .)
    MODULO          reduce using rule 75 (elemento -> get_variable .)
    EQUALITY        reduce using rule 75 (elemento -> get_variable .)
    INEQUALITY      reduce using rule 75 (elemento -> get_variable .)
    GREATER_THAN    reduce using rule 75 (elemento -> get_variable .)
    LESS_THAN       reduce using rule 75 (elemento -> get_variable .)
    GREATER_EQ_THAN reduce using rule 75 (elemento -> get_variable .)
    LESS_EQ_THAN    reduce using rule 75 (elemento -> get_variable .)
    SEMICOLON       reduce using rule 75 (elemento -> get_variable .)
    COMA            reduce using rule 75 (elemento -> get_variable .)
    RBRACKETS       reduce using rule 75 (elemento -> get_variable .)
    RKEY            reduce using rule 75 (elemento -> get_variable .)
    AND             reduce using rule 75 (elemento -> get_variable .)
    OR              reduce using rule 75 (elemento -> get_variable .)
    NOT             reduce using rule 75 (elemento -> get_variable .)
    RPAREN          reduce using rule 75 (elemento -> get_variable .)


state 78

    (155) parametros -> tipo_dato . VARIABLE
    (156) parametros -> tipo_dato . VARIABLE COMA parametros

    VARIABLE        shift and go to state 131


state 79

    (35) funcion -> tipo_dato VARIABLE LPAREN parametros . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 132


state 80

    (36) funcion -> tipo_dato VARIABLE LPAREN RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 133


state 81

    (65) variable_indexada -> VARIABLE LBRACKETS inmutables . RBRACKETS

    RBRACKETS       shift and go to state 134


state 82

    (134) inmutables -> STRING .

    RBRACKETS       reduce using rule 134 (inmutables -> STRING .)
    DOS_PUNTOS      reduce using rule 134 (inmutables -> STRING .)


state 83

    (135) inmutables -> INT .

    RBRACKETS       reduce using rule 135 (inmutables -> INT .)
    DOS_PUNTOS      reduce using rule 135 (inmutables -> INT .)


state 84

    (136) inmutables -> DOUBLE .

    RBRACKETS       reduce using rule 136 (inmutables -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 136 (inmutables -> DOUBLE .)


state 85

    (43) asignar_variable -> FINAL_TYPE tipo_dato variables asignador . expresion SEMICOLON
    (55) expresion -> . operacion
    (56) expresion -> . comparacion
    (57) expresion -> . list
    (58) expresion -> . diccionario
    (59) expresion -> . set
    (60) expresion -> . input
    (61) expresion -> . invocar
    (62) expresion -> . variable_indexada
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (78) comparacion -> . operacion comparador operacion
    (97) list -> . LBRACKETS element_list RBRACKETS
    (98) list -> . LBRACKETS RBRACKETS
    (140) diccionario -> . LKEY key_element_list RKEY
    (141) diccionario -> . LKEY RKEY
    (142) diccionario -> . DICT LPAREN RPAREN
    (143) set -> . LKEY element_list RKEY
    (144) set -> . CONJUNTO LPAREN RPAREN
    (70) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (30) invocar -> . VARIABLE LPAREN element_list RPAREN
    (31) invocar -> . VARIABLE LPAREN RPAREN
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    LBRACKETS       shift and go to state 67
    LKEY            shift and go to state 68
    DICT            shift and go to state 69
    CONJUNTO        shift and go to state 70
    STDIN           shift and go to state 71
    VARIABLE        shift and go to state 72
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76

    expresion                      shift and go to state 135
    operacion                      shift and go to state 58
    comparacion                    shift and go to state 59
    list                           shift and go to state 60
    diccionario                    shift and go to state 61
    set                            shift and go to state 62
    input                          shift and go to state 63
    invocar                        shift and go to state 64
    variable_indexada              shift and go to state 65
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 86

    (44) asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .

    FINAL_TYPE      reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    CLASS           reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    IMPORT          reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    VOID            reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    VARIABLE        reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    CONST_TYPE      reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    VAR_TYPE        reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    INT_TYPE        reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    STRING_TYPE     reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    BOOL_TYPE       reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    LIST            reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    MAP             reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    SET             reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    $end            reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    STATIC          reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    RKEY            reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    PRINT           reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    IF              reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    RETURN          reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    WHILE           reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    DO              reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    FOR             reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    INT             reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    DOUBLE          reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    STRING          reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)
    BOOLEAN         reduce using rule 44 (asignar_variable -> FINAL_TYPE tipo_dato variables SEMICOLON .)


state 87

    (32) constructor -> VARIABLE . LPAREN atributo_list RPAREN SEMICOLON
    (102) tipo_dato -> VARIABLE .
    (39) variables -> VARIABLE .
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS

    LPAREN          shift and go to state 136
    VARIABLE        reduce using rule 102 (tipo_dato -> VARIABLE .)
    INCREMENT_VAR   reduce using rule 39 (variables -> VARIABLE .)
    DECREMENT_VAR   reduce using rule 39 (variables -> VARIABLE .)
    ASSIGN          reduce using rule 39 (variables -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 39 (variables -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    MODULO_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    LBRACKETS       shift and go to state 42


state 88

    (157) class -> CLASS VARIABLE LKEY cuerpo_clase . RKEY

    RKEY            shift and go to state 137


state 89

    (24) cuerpo_clase -> sentencias_clase .
    (25) cuerpo_clase -> sentencias_clase . cuerpo_clase
    (24) cuerpo_clase -> . sentencias_clase
    (25) cuerpo_clase -> . sentencias_clase cuerpo_clase
    (19) sentencias_clase -> . asignar_variable
    (20) sentencias_clase -> . cambiar_variable
    (21) sentencias_clase -> . funcion
    (22) sentencias_clase -> . constructor
    (23) sentencias_clase -> . funcion_static
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (35) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (36) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (32) constructor -> . VARIABLE LPAREN atributo_list RPAREN SEMICOLON
    (37) funcion_static -> . STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> . STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    RKEY            reduce using rule 24 (cuerpo_clase -> sentencias_clase .)
    FINAL_TYPE      shift and go to state 8
    VARIABLE        shift and go to state 87
    STATIC          shift and go to state 96
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    sentencias_clase               shift and go to state 89
    cuerpo_clase                   shift and go to state 138
    asignar_variable               shift and go to state 90
    cambiar_variable               shift and go to state 91
    funcion                        shift and go to state 92
    constructor                    shift and go to state 93
    funcion_static                 shift and go to state 94
    tipo_dato                      shift and go to state 7
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 90

    (19) sentencias_clase -> asignar_variable .

    FINAL_TYPE      reduce using rule 19 (sentencias_clase -> asignar_variable .)
    VARIABLE        reduce using rule 19 (sentencias_clase -> asignar_variable .)
    STATIC          reduce using rule 19 (sentencias_clase -> asignar_variable .)
    VOID            reduce using rule 19 (sentencias_clase -> asignar_variable .)
    CONST_TYPE      reduce using rule 19 (sentencias_clase -> asignar_variable .)
    VAR_TYPE        reduce using rule 19 (sentencias_clase -> asignar_variable .)
    INT_TYPE        reduce using rule 19 (sentencias_clase -> asignar_variable .)
    STRING_TYPE     reduce using rule 19 (sentencias_clase -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 19 (sentencias_clase -> asignar_variable .)
    BOOL_TYPE       reduce using rule 19 (sentencias_clase -> asignar_variable .)
    LIST            reduce using rule 19 (sentencias_clase -> asignar_variable .)
    MAP             reduce using rule 19 (sentencias_clase -> asignar_variable .)
    SET             reduce using rule 19 (sentencias_clase -> asignar_variable .)
    RKEY            reduce using rule 19 (sentencias_clase -> asignar_variable .)


state 91

    (20) sentencias_clase -> cambiar_variable .

    FINAL_TYPE      reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    VARIABLE        reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    STATIC          reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    VOID            reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    CONST_TYPE      reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    VAR_TYPE        reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    INT_TYPE        reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    STRING_TYPE     reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    DOUBLE_TYPE     reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    BOOL_TYPE       reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    LIST            reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    MAP             reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    SET             reduce using rule 20 (sentencias_clase -> cambiar_variable .)
    RKEY            reduce using rule 20 (sentencias_clase -> cambiar_variable .)


state 92

    (21) sentencias_clase -> funcion .

    FINAL_TYPE      reduce using rule 21 (sentencias_clase -> funcion .)
    VARIABLE        reduce using rule 21 (sentencias_clase -> funcion .)
    STATIC          reduce using rule 21 (sentencias_clase -> funcion .)
    VOID            reduce using rule 21 (sentencias_clase -> funcion .)
    CONST_TYPE      reduce using rule 21 (sentencias_clase -> funcion .)
    VAR_TYPE        reduce using rule 21 (sentencias_clase -> funcion .)
    INT_TYPE        reduce using rule 21 (sentencias_clase -> funcion .)
    STRING_TYPE     reduce using rule 21 (sentencias_clase -> funcion .)
    DOUBLE_TYPE     reduce using rule 21 (sentencias_clase -> funcion .)
    BOOL_TYPE       reduce using rule 21 (sentencias_clase -> funcion .)
    LIST            reduce using rule 21 (sentencias_clase -> funcion .)
    MAP             reduce using rule 21 (sentencias_clase -> funcion .)
    SET             reduce using rule 21 (sentencias_clase -> funcion .)
    RKEY            reduce using rule 21 (sentencias_clase -> funcion .)


state 93

    (22) sentencias_clase -> constructor .

    FINAL_TYPE      reduce using rule 22 (sentencias_clase -> constructor .)
    VARIABLE        reduce using rule 22 (sentencias_clase -> constructor .)
    STATIC          reduce using rule 22 (sentencias_clase -> constructor .)
    VOID            reduce using rule 22 (sentencias_clase -> constructor .)
    CONST_TYPE      reduce using rule 22 (sentencias_clase -> constructor .)
    VAR_TYPE        reduce using rule 22 (sentencias_clase -> constructor .)
    INT_TYPE        reduce using rule 22 (sentencias_clase -> constructor .)
    STRING_TYPE     reduce using rule 22 (sentencias_clase -> constructor .)
    DOUBLE_TYPE     reduce using rule 22 (sentencias_clase -> constructor .)
    BOOL_TYPE       reduce using rule 22 (sentencias_clase -> constructor .)
    LIST            reduce using rule 22 (sentencias_clase -> constructor .)
    MAP             reduce using rule 22 (sentencias_clase -> constructor .)
    SET             reduce using rule 22 (sentencias_clase -> constructor .)
    RKEY            reduce using rule 22 (sentencias_clase -> constructor .)


state 94

    (23) sentencias_clase -> funcion_static .

    FINAL_TYPE      reduce using rule 23 (sentencias_clase -> funcion_static .)
    VARIABLE        reduce using rule 23 (sentencias_clase -> funcion_static .)
    STATIC          reduce using rule 23 (sentencias_clase -> funcion_static .)
    VOID            reduce using rule 23 (sentencias_clase -> funcion_static .)
    CONST_TYPE      reduce using rule 23 (sentencias_clase -> funcion_static .)
    VAR_TYPE        reduce using rule 23 (sentencias_clase -> funcion_static .)
    INT_TYPE        reduce using rule 23 (sentencias_clase -> funcion_static .)
    STRING_TYPE     reduce using rule 23 (sentencias_clase -> funcion_static .)
    DOUBLE_TYPE     reduce using rule 23 (sentencias_clase -> funcion_static .)
    BOOL_TYPE       reduce using rule 23 (sentencias_clase -> funcion_static .)
    LIST            reduce using rule 23 (sentencias_clase -> funcion_static .)
    MAP             reduce using rule 23 (sentencias_clase -> funcion_static .)
    SET             reduce using rule 23 (sentencias_clase -> funcion_static .)
    RKEY            reduce using rule 23 (sentencias_clase -> funcion_static .)


state 95

    (45) cambiar_variable -> variables . modificador SEMICOLON
    (46) cambiar_variable -> variables . asignador expresion SEMICOLON
    (47) modificador -> . INCREMENT_VAR
    (48) modificador -> . DECREMENT_VAR
    (49) asignador -> . ASSIGN
    (50) asignador -> . PLUS_ASSIGN
    (51) asignador -> . MINUS_ASSIGN
    (52) asignador -> . TIMES_ASSIGN
    (53) asignador -> . DIVIDE_ASSIGN
    (54) asignador -> . MODULO_ASSIGN

    INCREMENT_VAR   shift and go to state 141
    DECREMENT_VAR   shift and go to state 142
    ASSIGN          shift and go to state 35
    PLUS_ASSIGN     shift and go to state 36
    MINUS_ASSIGN    shift and go to state 37
    TIMES_ASSIGN    shift and go to state 38
    DIVIDE_ASSIGN   shift and go to state 39
    MODULO_ASSIGN   shift and go to state 40

    modificador                    shift and go to state 139
    asignador                      shift and go to state 140

state 96

    (37) funcion_static -> STATIC . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> STATIC . tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 143

state 97

    (110) tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 110 (tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .)


state 98

    (111) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA . tipo_coleccion GREATER_THAN
    (113) tipo_coleccion -> . INT_TYPE
    (114) tipo_coleccion -> . STRING_TYPE
    (115) tipo_coleccion -> . DOUBLE_TYPE
    (116) tipo_coleccion -> . FINAL_TYPE
    (117) tipo_coleccion -> . CONST_TYPE
    (118) tipo_coleccion -> . VAR_TYPE
    (119) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 48
    STRING_TYPE     shift and go to state 49
    DOUBLE_TYPE     shift and go to state 50
    FINAL_TYPE      shift and go to state 51
    CONST_TYPE      shift and go to state 52
    VAR_TYPE        shift and go to state 53
    BOOL_TYPE       shift and go to state 54

    tipo_coleccion                 shift and go to state 144

state 99

    (112) tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 112 (tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .)


state 100

    (41) asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .

    FINAL_TYPE      reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    CLASS           reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    VOID            reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    VARIABLE        reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    LIST            reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    MAP             reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    SET             reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    $end            reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    STATIC          reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    RKEY            reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    PRINT           reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    IF              reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    RETURN          reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    WHILE           reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    DO              reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    FOR             reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    INT             reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    DOUBLE          reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    STRING          reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)
    BOOLEAN         reduce using rule 41 (asignar_variable -> tipo_dato variables asignador expresion SEMICOLON .)


state 101

    (78) comparacion -> operacion comparador . operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    operacion                      shift and go to state 145
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 102

    (84) comparador -> EQUALITY .

    INT             reduce using rule 84 (comparador -> EQUALITY .)
    DOUBLE          reduce using rule 84 (comparador -> EQUALITY .)
    STRING          reduce using rule 84 (comparador -> EQUALITY .)
    BOOLEAN         reduce using rule 84 (comparador -> EQUALITY .)
    VARIABLE        reduce using rule 84 (comparador -> EQUALITY .)


state 103

    (85) comparador -> INEQUALITY .

    INT             reduce using rule 85 (comparador -> INEQUALITY .)
    DOUBLE          reduce using rule 85 (comparador -> INEQUALITY .)
    STRING          reduce using rule 85 (comparador -> INEQUALITY .)
    BOOLEAN         reduce using rule 85 (comparador -> INEQUALITY .)
    VARIABLE        reduce using rule 85 (comparador -> INEQUALITY .)


state 104

    (86) comparador -> GREATER_THAN .

    INT             reduce using rule 86 (comparador -> GREATER_THAN .)
    DOUBLE          reduce using rule 86 (comparador -> GREATER_THAN .)
    STRING          reduce using rule 86 (comparador -> GREATER_THAN .)
    BOOLEAN         reduce using rule 86 (comparador -> GREATER_THAN .)
    VARIABLE        reduce using rule 86 (comparador -> GREATER_THAN .)


state 105

    (87) comparador -> LESS_THAN .

    INT             reduce using rule 87 (comparador -> LESS_THAN .)
    DOUBLE          reduce using rule 87 (comparador -> LESS_THAN .)
    STRING          reduce using rule 87 (comparador -> LESS_THAN .)
    BOOLEAN         reduce using rule 87 (comparador -> LESS_THAN .)
    VARIABLE        reduce using rule 87 (comparador -> LESS_THAN .)


state 106

    (88) comparador -> GREATER_EQ_THAN .

    INT             reduce using rule 88 (comparador -> GREATER_EQ_THAN .)
    DOUBLE          reduce using rule 88 (comparador -> GREATER_EQ_THAN .)
    STRING          reduce using rule 88 (comparador -> GREATER_EQ_THAN .)
    BOOLEAN         reduce using rule 88 (comparador -> GREATER_EQ_THAN .)
    VARIABLE        reduce using rule 88 (comparador -> GREATER_EQ_THAN .)


state 107

    (89) comparador -> LESS_EQ_THAN .

    INT             reduce using rule 89 (comparador -> LESS_EQ_THAN .)
    DOUBLE          reduce using rule 89 (comparador -> LESS_EQ_THAN .)
    STRING          reduce using rule 89 (comparador -> LESS_EQ_THAN .)
    BOOLEAN         reduce using rule 89 (comparador -> LESS_EQ_THAN .)
    VARIABLE        reduce using rule 89 (comparador -> LESS_EQ_THAN .)


state 108

    (91) operacion -> elemento operador . operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    elemento                       shift and go to state 66
    operacion                      shift and go to state 146
    get_variable                   shift and go to state 77

state 109

    (92) operador -> PLUS .

    INT             reduce using rule 92 (operador -> PLUS .)
    DOUBLE          reduce using rule 92 (operador -> PLUS .)
    STRING          reduce using rule 92 (operador -> PLUS .)
    BOOLEAN         reduce using rule 92 (operador -> PLUS .)
    VARIABLE        reduce using rule 92 (operador -> PLUS .)


state 110

    (93) operador -> MINUS .

    INT             reduce using rule 93 (operador -> MINUS .)
    DOUBLE          reduce using rule 93 (operador -> MINUS .)
    STRING          reduce using rule 93 (operador -> MINUS .)
    BOOLEAN         reduce using rule 93 (operador -> MINUS .)
    VARIABLE        reduce using rule 93 (operador -> MINUS .)


state 111

    (94) operador -> TIMES .

    INT             reduce using rule 94 (operador -> TIMES .)
    DOUBLE          reduce using rule 94 (operador -> TIMES .)
    STRING          reduce using rule 94 (operador -> TIMES .)
    BOOLEAN         reduce using rule 94 (operador -> TIMES .)
    VARIABLE        reduce using rule 94 (operador -> TIMES .)


state 112

    (95) operador -> DIVIDE .

    INT             reduce using rule 95 (operador -> DIVIDE .)
    DOUBLE          reduce using rule 95 (operador -> DIVIDE .)
    STRING          reduce using rule 95 (operador -> DIVIDE .)
    BOOLEAN         reduce using rule 95 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 95 (operador -> DIVIDE .)


state 113

    (96) operador -> MODULO .

    INT             reduce using rule 96 (operador -> MODULO .)
    DOUBLE          reduce using rule 96 (operador -> MODULO .)
    STRING          reduce using rule 96 (operador -> MODULO .)
    BOOLEAN         reduce using rule 96 (operador -> MODULO .)
    VARIABLE        reduce using rule 96 (operador -> MODULO .)


state 114

    (97) list -> LBRACKETS element_list . RBRACKETS

    RBRACKETS       shift and go to state 147


state 115

    (98) list -> LBRACKETS RBRACKETS .

    SEMICOLON       reduce using rule 98 (list -> LBRACKETS RBRACKETS .)


state 116

    (99) element_list -> elemento .
    (100) element_list -> elemento . COMA element_list

    RBRACKETS       reduce using rule 99 (element_list -> elemento .)
    RKEY            reduce using rule 99 (element_list -> elemento .)
    RPAREN          reduce using rule 99 (element_list -> elemento .)
    COMA            shift and go to state 148


state 117

    (76) get_variable -> VARIABLE .
    (77) get_variable -> VARIABLE . DOT get_variable

    COMA            reduce using rule 76 (get_variable -> VARIABLE .)
    RBRACKETS       reduce using rule 76 (get_variable -> VARIABLE .)
    RKEY            reduce using rule 76 (get_variable -> VARIABLE .)
    PLUS            reduce using rule 76 (get_variable -> VARIABLE .)
    MINUS           reduce using rule 76 (get_variable -> VARIABLE .)
    TIMES           reduce using rule 76 (get_variable -> VARIABLE .)
    DIVIDE          reduce using rule 76 (get_variable -> VARIABLE .)
    MODULO          reduce using rule 76 (get_variable -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (get_variable -> VARIABLE .)
    AND             reduce using rule 76 (get_variable -> VARIABLE .)
    OR              reduce using rule 76 (get_variable -> VARIABLE .)
    NOT             reduce using rule 76 (get_variable -> VARIABLE .)
    RPAREN          reduce using rule 76 (get_variable -> VARIABLE .)
    EQUALITY        reduce using rule 76 (get_variable -> VARIABLE .)
    INEQUALITY      reduce using rule 76 (get_variable -> VARIABLE .)
    GREATER_THAN    reduce using rule 76 (get_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 76 (get_variable -> VARIABLE .)
    GREATER_EQ_THAN reduce using rule 76 (get_variable -> VARIABLE .)
    LESS_EQ_THAN    reduce using rule 76 (get_variable -> VARIABLE .)
    DOT             shift and go to state 130


state 118

    (140) diccionario -> LKEY key_element_list . RKEY

    RKEY            shift and go to state 149


state 119

    (141) diccionario -> LKEY RKEY .

    SEMICOLON       reduce using rule 141 (diccionario -> LKEY RKEY .)


state 120

    (143) set -> LKEY element_list . RKEY

    RKEY            shift and go to state 150


state 121

    (138) key_element_list -> key_element .
    (139) key_element_list -> key_element . COMA key_element_list

    RKEY            reduce using rule 138 (key_element_list -> key_element .)
    COMA            shift and go to state 151


state 122

    (137) key_element -> inmutables . DOS_PUNTOS elemento

    DOS_PUNTOS      shift and go to state 152


state 123

    (71) elemento -> INT .
    (135) inmutables -> INT .

    COMA            reduce using rule 71 (elemento -> INT .)
    RKEY            reduce using rule 71 (elemento -> INT .)
    DOS_PUNTOS      reduce using rule 135 (inmutables -> INT .)


state 124

    (72) elemento -> DOUBLE .
    (136) inmutables -> DOUBLE .

    COMA            reduce using rule 72 (elemento -> DOUBLE .)
    RKEY            reduce using rule 72 (elemento -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 136 (inmutables -> DOUBLE .)


state 125

    (73) elemento -> STRING .
    (134) inmutables -> STRING .

    COMA            reduce using rule 73 (elemento -> STRING .)
    RKEY            reduce using rule 73 (elemento -> STRING .)
    DOS_PUNTOS      reduce using rule 134 (inmutables -> STRING .)


state 126

    (142) diccionario -> DICT LPAREN . RPAREN

    RPAREN          shift and go to state 153


state 127

    (144) set -> CONJUNTO LPAREN . RPAREN

    RPAREN          shift and go to state 154


state 128

    (70) input -> STDIN DOT . READLINESYNC LPAREN RPAREN

    READLINESYNC    shift and go to state 155


state 129

    (30) invocar -> VARIABLE LPAREN . element_list RPAREN
    (31) invocar -> VARIABLE LPAREN . RPAREN
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RPAREN          shift and go to state 157
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    element_list                   shift and go to state 156
    elemento                       shift and go to state 116
    get_variable                   shift and go to state 77

state 130

    (77) get_variable -> VARIABLE DOT . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    VARIABLE        shift and go to state 117

    get_variable                   shift and go to state 158

state 131

    (155) parametros -> tipo_dato VARIABLE .
    (156) parametros -> tipo_dato VARIABLE . COMA parametros

    RPAREN          reduce using rule 155 (parametros -> tipo_dato VARIABLE .)
    COMA            shift and go to state 159


state 132

    (35) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 160


state 133

    (36) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 163
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 134

    (65) variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .

    SEMICOLON       reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    ASSIGN          reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    PLUS_ASSIGN     reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    MINUS_ASSIGN    reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    TIMES_ASSIGN    reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    DIVIDE_ASSIGN   reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    MODULO_ASSIGN   reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    INCREMENT_VAR   reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)
    DECREMENT_VAR   reduce using rule 65 (variable_indexada -> VARIABLE LBRACKETS inmutables RBRACKETS .)


state 135

    (43) asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 181


state 136

    (32) constructor -> VARIABLE LPAREN . atributo_list RPAREN SEMICOLON
    (33) atributo_list -> . THIS DOT VARIABLE
    (34) atributo_list -> . THIS DOT VARIABLE COMA atributo_list

    THIS            shift and go to state 183

    atributo_list                  shift and go to state 182

state 137

    (157) class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .

    FINAL_TYPE      reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    CLASS           reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    IMPORT          reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    VOID            reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    VARIABLE        reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    CONST_TYPE      reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    VAR_TYPE        reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    INT_TYPE        reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    STRING_TYPE     reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    DOUBLE_TYPE     reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    BOOL_TYPE       reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    LIST            reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    MAP             reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    SET             reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)
    $end            reduce using rule 157 (class -> CLASS VARIABLE LKEY cuerpo_clase RKEY .)


state 138

    (25) cuerpo_clase -> sentencias_clase cuerpo_clase .

    RKEY            reduce using rule 25 (cuerpo_clase -> sentencias_clase cuerpo_clase .)


state 139

    (45) cambiar_variable -> variables modificador . SEMICOLON

    SEMICOLON       shift and go to state 184


state 140

    (46) cambiar_variable -> variables asignador . expresion SEMICOLON
    (55) expresion -> . operacion
    (56) expresion -> . comparacion
    (57) expresion -> . list
    (58) expresion -> . diccionario
    (59) expresion -> . set
    (60) expresion -> . input
    (61) expresion -> . invocar
    (62) expresion -> . variable_indexada
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (78) comparacion -> . operacion comparador operacion
    (97) list -> . LBRACKETS element_list RBRACKETS
    (98) list -> . LBRACKETS RBRACKETS
    (140) diccionario -> . LKEY key_element_list RKEY
    (141) diccionario -> . LKEY RKEY
    (142) diccionario -> . DICT LPAREN RPAREN
    (143) set -> . LKEY element_list RKEY
    (144) set -> . CONJUNTO LPAREN RPAREN
    (70) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (30) invocar -> . VARIABLE LPAREN element_list RPAREN
    (31) invocar -> . VARIABLE LPAREN RPAREN
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    LBRACKETS       shift and go to state 67
    LKEY            shift and go to state 68
    DICT            shift and go to state 69
    CONJUNTO        shift and go to state 70
    STDIN           shift and go to state 71
    VARIABLE        shift and go to state 72
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76

    expresion                      shift and go to state 185
    operacion                      shift and go to state 58
    comparacion                    shift and go to state 59
    list                           shift and go to state 60
    diccionario                    shift and go to state 61
    set                            shift and go to state 62
    input                          shift and go to state 63
    invocar                        shift and go to state 64
    variable_indexada              shift and go to state 65
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 141

    (47) modificador -> INCREMENT_VAR .

    SEMICOLON       reduce using rule 47 (modificador -> INCREMENT_VAR .)
    RPAREN          reduce using rule 47 (modificador -> INCREMENT_VAR .)


state 142

    (48) modificador -> DECREMENT_VAR .

    SEMICOLON       reduce using rule 48 (modificador -> DECREMENT_VAR .)
    RPAREN          reduce using rule 48 (modificador -> DECREMENT_VAR .)


state 143

    (37) funcion_static -> STATIC tipo_dato . VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> STATIC tipo_dato . VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 186


state 144

    (111) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 187


state 145

    (78) comparacion -> operacion comparador operacion .

    SEMICOLON       reduce using rule 78 (comparacion -> operacion comparador operacion .)
    AND             reduce using rule 78 (comparacion -> operacion comparador operacion .)
    OR              reduce using rule 78 (comparacion -> operacion comparador operacion .)
    NOT             reduce using rule 78 (comparacion -> operacion comparador operacion .)
    RPAREN          reduce using rule 78 (comparacion -> operacion comparador operacion .)


state 146

    (91) operacion -> elemento operador operacion .

    EQUALITY        reduce using rule 91 (operacion -> elemento operador operacion .)
    INEQUALITY      reduce using rule 91 (operacion -> elemento operador operacion .)
    GREATER_THAN    reduce using rule 91 (operacion -> elemento operador operacion .)
    LESS_THAN       reduce using rule 91 (operacion -> elemento operador operacion .)
    GREATER_EQ_THAN reduce using rule 91 (operacion -> elemento operador operacion .)
    LESS_EQ_THAN    reduce using rule 91 (operacion -> elemento operador operacion .)
    SEMICOLON       reduce using rule 91 (operacion -> elemento operador operacion .)
    AND             reduce using rule 91 (operacion -> elemento operador operacion .)
    OR              reduce using rule 91 (operacion -> elemento operador operacion .)
    NOT             reduce using rule 91 (operacion -> elemento operador operacion .)
    RPAREN          reduce using rule 91 (operacion -> elemento operador operacion .)


state 147

    (97) list -> LBRACKETS element_list RBRACKETS .

    SEMICOLON       reduce using rule 97 (list -> LBRACKETS element_list RBRACKETS .)


state 148

    (100) element_list -> elemento COMA . element_list
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    elemento                       shift and go to state 116
    element_list                   shift and go to state 188
    get_variable                   shift and go to state 77

state 149

    (140) diccionario -> LKEY key_element_list RKEY .

    SEMICOLON       reduce using rule 140 (diccionario -> LKEY key_element_list RKEY .)


state 150

    (143) set -> LKEY element_list RKEY .

    SEMICOLON       reduce using rule 143 (set -> LKEY element_list RKEY .)


state 151

    (139) key_element_list -> key_element COMA . key_element_list
    (138) key_element_list -> . key_element
    (139) key_element_list -> . key_element COMA key_element_list
    (137) key_element -> . inmutables DOS_PUNTOS elemento
    (134) inmutables -> . STRING
    (135) inmutables -> . INT
    (136) inmutables -> . DOUBLE

    STRING          shift and go to state 82
    INT             shift and go to state 83
    DOUBLE          shift and go to state 84

    key_element                    shift and go to state 121
    key_element_list               shift and go to state 189
    inmutables                     shift and go to state 122

state 152

    (137) key_element -> inmutables DOS_PUNTOS . elemento
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    elemento                       shift and go to state 190
    get_variable                   shift and go to state 77

state 153

    (142) diccionario -> DICT LPAREN RPAREN .

    SEMICOLON       reduce using rule 142 (diccionario -> DICT LPAREN RPAREN .)


state 154

    (144) set -> CONJUNTO LPAREN RPAREN .

    SEMICOLON       reduce using rule 144 (set -> CONJUNTO LPAREN RPAREN .)


state 155

    (70) input -> STDIN DOT READLINESYNC . LPAREN RPAREN

    LPAREN          shift and go to state 191


state 156

    (30) invocar -> VARIABLE LPAREN element_list . RPAREN

    RPAREN          shift and go to state 192


state 157

    (31) invocar -> VARIABLE LPAREN RPAREN .

    SEMICOLON       reduce using rule 31 (invocar -> VARIABLE LPAREN RPAREN .)


state 158

    (77) get_variable -> VARIABLE DOT get_variable .

    PLUS            reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    MINUS           reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    TIMES           reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    DIVIDE          reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    MODULO          reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    EQUALITY        reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    INEQUALITY      reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    GREATER_THAN    reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    LESS_THAN       reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    GREATER_EQ_THAN reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    LESS_EQ_THAN    reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    SEMICOLON       reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    COMA            reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    RBRACKETS       reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    RKEY            reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    AND             reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    OR              reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    NOT             reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)
    RPAREN          reduce using rule 77 (get_variable -> VARIABLE DOT get_variable .)


state 159

    (156) parametros -> tipo_dato VARIABLE COMA . parametros
    (155) parametros -> . tipo_dato VARIABLE
    (156) parametros -> . tipo_dato VARIABLE COMA parametros
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 78
    parametros                     shift and go to state 193

state 160

    (35) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 194
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 161

    (41) asignar_variable -> tipo_dato . variables asignador expresion SEMICOLON
    (42) asignar_variable -> tipo_dato . variables SEMICOLON
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    VARIABLE        shift and go to state 44

    variables                      shift and go to state 23
    variable_indexada              shift and go to state 25

state 162

    (26) invocacion -> VARIABLE . LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> VARIABLE . LPAREN RPAREN SEMICOLON
    (28) invocacion -> VARIABLE . DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> VARIABLE . DOT VARIABLE LPAREN RPAREN SEMICOLON
    (102) tipo_dato -> VARIABLE .
    (39) variables -> VARIABLE .
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS

    LPAREN          shift and go to state 195
    DOT             shift and go to state 196
    VARIABLE        reduce using rule 102 (tipo_dato -> VARIABLE .)
    INCREMENT_VAR   reduce using rule 39 (variables -> VARIABLE .)
    DECREMENT_VAR   reduce using rule 39 (variables -> VARIABLE .)
    ASSIGN          reduce using rule 39 (variables -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 39 (variables -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    MODULO_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    LBRACKETS       shift and go to state 42


state 163

    (36) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 197


state 164

    (17) cuerpo_funcion -> sentencias_funcion .
    (18) cuerpo_funcion -> sentencias_funcion . cuerpo_funcion
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    RKEY            reduce using rule 17 (cuerpo_funcion -> sentencias_funcion .)
    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    sentencias_funcion             shift and go to state 164
    cuerpo_funcion                 shift and go to state 198
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 165

    (7) sentencias_funcion -> asignar_variable .

    FINAL_TYPE      reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    PRINT           reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    IF              reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    RETURN          reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    WHILE           reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    DO              reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    FOR             reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    VARIABLE        reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    VOID            reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    CONST_TYPE      reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    VAR_TYPE        reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    INT_TYPE        reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    STRING_TYPE     reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    BOOL_TYPE       reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    LIST            reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    MAP             reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    SET             reduce using rule 7 (sentencias_funcion -> asignar_variable .)
    RKEY            reduce using rule 7 (sentencias_funcion -> asignar_variable .)


state 166

    (8) sentencias_funcion -> cambiar_variable .

    FINAL_TYPE      reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    PRINT           reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    IF              reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    RETURN          reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    WHILE           reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    DO              reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    FOR             reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    VARIABLE        reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    VOID            reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    CONST_TYPE      reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    VAR_TYPE        reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    INT_TYPE        reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    STRING_TYPE     reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    DOUBLE_TYPE     reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    BOOL_TYPE       reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    LIST            reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    MAP             reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    SET             reduce using rule 8 (sentencias_funcion -> cambiar_variable .)
    RKEY            reduce using rule 8 (sentencias_funcion -> cambiar_variable .)


state 167

    (9) sentencias_funcion -> impresion .

    FINAL_TYPE      reduce using rule 9 (sentencias_funcion -> impresion .)
    PRINT           reduce using rule 9 (sentencias_funcion -> impresion .)
    IF              reduce using rule 9 (sentencias_funcion -> impresion .)
    RETURN          reduce using rule 9 (sentencias_funcion -> impresion .)
    WHILE           reduce using rule 9 (sentencias_funcion -> impresion .)
    DO              reduce using rule 9 (sentencias_funcion -> impresion .)
    FOR             reduce using rule 9 (sentencias_funcion -> impresion .)
    VARIABLE        reduce using rule 9 (sentencias_funcion -> impresion .)
    VOID            reduce using rule 9 (sentencias_funcion -> impresion .)
    CONST_TYPE      reduce using rule 9 (sentencias_funcion -> impresion .)
    VAR_TYPE        reduce using rule 9 (sentencias_funcion -> impresion .)
    INT_TYPE        reduce using rule 9 (sentencias_funcion -> impresion .)
    STRING_TYPE     reduce using rule 9 (sentencias_funcion -> impresion .)
    DOUBLE_TYPE     reduce using rule 9 (sentencias_funcion -> impresion .)
    BOOL_TYPE       reduce using rule 9 (sentencias_funcion -> impresion .)
    LIST            reduce using rule 9 (sentencias_funcion -> impresion .)
    MAP             reduce using rule 9 (sentencias_funcion -> impresion .)
    SET             reduce using rule 9 (sentencias_funcion -> impresion .)
    RKEY            reduce using rule 9 (sentencias_funcion -> impresion .)


state 168

    (10) sentencias_funcion -> condicional .

    FINAL_TYPE      reduce using rule 10 (sentencias_funcion -> condicional .)
    PRINT           reduce using rule 10 (sentencias_funcion -> condicional .)
    IF              reduce using rule 10 (sentencias_funcion -> condicional .)
    RETURN          reduce using rule 10 (sentencias_funcion -> condicional .)
    WHILE           reduce using rule 10 (sentencias_funcion -> condicional .)
    DO              reduce using rule 10 (sentencias_funcion -> condicional .)
    FOR             reduce using rule 10 (sentencias_funcion -> condicional .)
    VARIABLE        reduce using rule 10 (sentencias_funcion -> condicional .)
    VOID            reduce using rule 10 (sentencias_funcion -> condicional .)
    CONST_TYPE      reduce using rule 10 (sentencias_funcion -> condicional .)
    VAR_TYPE        reduce using rule 10 (sentencias_funcion -> condicional .)
    INT_TYPE        reduce using rule 10 (sentencias_funcion -> condicional .)
    STRING_TYPE     reduce using rule 10 (sentencias_funcion -> condicional .)
    DOUBLE_TYPE     reduce using rule 10 (sentencias_funcion -> condicional .)
    BOOL_TYPE       reduce using rule 10 (sentencias_funcion -> condicional .)
    LIST            reduce using rule 10 (sentencias_funcion -> condicional .)
    MAP             reduce using rule 10 (sentencias_funcion -> condicional .)
    SET             reduce using rule 10 (sentencias_funcion -> condicional .)
    RKEY            reduce using rule 10 (sentencias_funcion -> condicional .)


state 169

    (11) sentencias_funcion -> retorno .

    FINAL_TYPE      reduce using rule 11 (sentencias_funcion -> retorno .)
    PRINT           reduce using rule 11 (sentencias_funcion -> retorno .)
    IF              reduce using rule 11 (sentencias_funcion -> retorno .)
    RETURN          reduce using rule 11 (sentencias_funcion -> retorno .)
    WHILE           reduce using rule 11 (sentencias_funcion -> retorno .)
    DO              reduce using rule 11 (sentencias_funcion -> retorno .)
    FOR             reduce using rule 11 (sentencias_funcion -> retorno .)
    VARIABLE        reduce using rule 11 (sentencias_funcion -> retorno .)
    VOID            reduce using rule 11 (sentencias_funcion -> retorno .)
    CONST_TYPE      reduce using rule 11 (sentencias_funcion -> retorno .)
    VAR_TYPE        reduce using rule 11 (sentencias_funcion -> retorno .)
    INT_TYPE        reduce using rule 11 (sentencias_funcion -> retorno .)
    STRING_TYPE     reduce using rule 11 (sentencias_funcion -> retorno .)
    DOUBLE_TYPE     reduce using rule 11 (sentencias_funcion -> retorno .)
    BOOL_TYPE       reduce using rule 11 (sentencias_funcion -> retorno .)
    LIST            reduce using rule 11 (sentencias_funcion -> retorno .)
    MAP             reduce using rule 11 (sentencias_funcion -> retorno .)
    SET             reduce using rule 11 (sentencias_funcion -> retorno .)
    RKEY            reduce using rule 11 (sentencias_funcion -> retorno .)


state 170

    (12) sentencias_funcion -> while .

    FINAL_TYPE      reduce using rule 12 (sentencias_funcion -> while .)
    PRINT           reduce using rule 12 (sentencias_funcion -> while .)
    IF              reduce using rule 12 (sentencias_funcion -> while .)
    RETURN          reduce using rule 12 (sentencias_funcion -> while .)
    WHILE           reduce using rule 12 (sentencias_funcion -> while .)
    DO              reduce using rule 12 (sentencias_funcion -> while .)
    FOR             reduce using rule 12 (sentencias_funcion -> while .)
    VARIABLE        reduce using rule 12 (sentencias_funcion -> while .)
    VOID            reduce using rule 12 (sentencias_funcion -> while .)
    CONST_TYPE      reduce using rule 12 (sentencias_funcion -> while .)
    VAR_TYPE        reduce using rule 12 (sentencias_funcion -> while .)
    INT_TYPE        reduce using rule 12 (sentencias_funcion -> while .)
    STRING_TYPE     reduce using rule 12 (sentencias_funcion -> while .)
    DOUBLE_TYPE     reduce using rule 12 (sentencias_funcion -> while .)
    BOOL_TYPE       reduce using rule 12 (sentencias_funcion -> while .)
    LIST            reduce using rule 12 (sentencias_funcion -> while .)
    MAP             reduce using rule 12 (sentencias_funcion -> while .)
    SET             reduce using rule 12 (sentencias_funcion -> while .)
    RKEY            reduce using rule 12 (sentencias_funcion -> while .)


state 171

    (13) sentencias_funcion -> do_while .

    FINAL_TYPE      reduce using rule 13 (sentencias_funcion -> do_while .)
    PRINT           reduce using rule 13 (sentencias_funcion -> do_while .)
    IF              reduce using rule 13 (sentencias_funcion -> do_while .)
    RETURN          reduce using rule 13 (sentencias_funcion -> do_while .)
    WHILE           reduce using rule 13 (sentencias_funcion -> do_while .)
    DO              reduce using rule 13 (sentencias_funcion -> do_while .)
    FOR             reduce using rule 13 (sentencias_funcion -> do_while .)
    VARIABLE        reduce using rule 13 (sentencias_funcion -> do_while .)
    VOID            reduce using rule 13 (sentencias_funcion -> do_while .)
    CONST_TYPE      reduce using rule 13 (sentencias_funcion -> do_while .)
    VAR_TYPE        reduce using rule 13 (sentencias_funcion -> do_while .)
    INT_TYPE        reduce using rule 13 (sentencias_funcion -> do_while .)
    STRING_TYPE     reduce using rule 13 (sentencias_funcion -> do_while .)
    DOUBLE_TYPE     reduce using rule 13 (sentencias_funcion -> do_while .)
    BOOL_TYPE       reduce using rule 13 (sentencias_funcion -> do_while .)
    LIST            reduce using rule 13 (sentencias_funcion -> do_while .)
    MAP             reduce using rule 13 (sentencias_funcion -> do_while .)
    SET             reduce using rule 13 (sentencias_funcion -> do_while .)
    RKEY            reduce using rule 13 (sentencias_funcion -> do_while .)


state 172

    (14) sentencias_funcion -> for .

    FINAL_TYPE      reduce using rule 14 (sentencias_funcion -> for .)
    PRINT           reduce using rule 14 (sentencias_funcion -> for .)
    IF              reduce using rule 14 (sentencias_funcion -> for .)
    RETURN          reduce using rule 14 (sentencias_funcion -> for .)
    WHILE           reduce using rule 14 (sentencias_funcion -> for .)
    DO              reduce using rule 14 (sentencias_funcion -> for .)
    FOR             reduce using rule 14 (sentencias_funcion -> for .)
    VARIABLE        reduce using rule 14 (sentencias_funcion -> for .)
    VOID            reduce using rule 14 (sentencias_funcion -> for .)
    CONST_TYPE      reduce using rule 14 (sentencias_funcion -> for .)
    VAR_TYPE        reduce using rule 14 (sentencias_funcion -> for .)
    INT_TYPE        reduce using rule 14 (sentencias_funcion -> for .)
    STRING_TYPE     reduce using rule 14 (sentencias_funcion -> for .)
    DOUBLE_TYPE     reduce using rule 14 (sentencias_funcion -> for .)
    BOOL_TYPE       reduce using rule 14 (sentencias_funcion -> for .)
    LIST            reduce using rule 14 (sentencias_funcion -> for .)
    MAP             reduce using rule 14 (sentencias_funcion -> for .)
    SET             reduce using rule 14 (sentencias_funcion -> for .)
    RKEY            reduce using rule 14 (sentencias_funcion -> for .)


state 173

    (15) sentencias_funcion -> for_each .

    FINAL_TYPE      reduce using rule 15 (sentencias_funcion -> for_each .)
    PRINT           reduce using rule 15 (sentencias_funcion -> for_each .)
    IF              reduce using rule 15 (sentencias_funcion -> for_each .)
    RETURN          reduce using rule 15 (sentencias_funcion -> for_each .)
    WHILE           reduce using rule 15 (sentencias_funcion -> for_each .)
    DO              reduce using rule 15 (sentencias_funcion -> for_each .)
    FOR             reduce using rule 15 (sentencias_funcion -> for_each .)
    VARIABLE        reduce using rule 15 (sentencias_funcion -> for_each .)
    VOID            reduce using rule 15 (sentencias_funcion -> for_each .)
    CONST_TYPE      reduce using rule 15 (sentencias_funcion -> for_each .)
    VAR_TYPE        reduce using rule 15 (sentencias_funcion -> for_each .)
    INT_TYPE        reduce using rule 15 (sentencias_funcion -> for_each .)
    STRING_TYPE     reduce using rule 15 (sentencias_funcion -> for_each .)
    DOUBLE_TYPE     reduce using rule 15 (sentencias_funcion -> for_each .)
    BOOL_TYPE       reduce using rule 15 (sentencias_funcion -> for_each .)
    LIST            reduce using rule 15 (sentencias_funcion -> for_each .)
    MAP             reduce using rule 15 (sentencias_funcion -> for_each .)
    SET             reduce using rule 15 (sentencias_funcion -> for_each .)
    RKEY            reduce using rule 15 (sentencias_funcion -> for_each .)


state 174

    (16) sentencias_funcion -> invocacion .

    FINAL_TYPE      reduce using rule 16 (sentencias_funcion -> invocacion .)
    PRINT           reduce using rule 16 (sentencias_funcion -> invocacion .)
    IF              reduce using rule 16 (sentencias_funcion -> invocacion .)
    RETURN          reduce using rule 16 (sentencias_funcion -> invocacion .)
    WHILE           reduce using rule 16 (sentencias_funcion -> invocacion .)
    DO              reduce using rule 16 (sentencias_funcion -> invocacion .)
    FOR             reduce using rule 16 (sentencias_funcion -> invocacion .)
    VARIABLE        reduce using rule 16 (sentencias_funcion -> invocacion .)
    VOID            reduce using rule 16 (sentencias_funcion -> invocacion .)
    CONST_TYPE      reduce using rule 16 (sentencias_funcion -> invocacion .)
    VAR_TYPE        reduce using rule 16 (sentencias_funcion -> invocacion .)
    INT_TYPE        reduce using rule 16 (sentencias_funcion -> invocacion .)
    STRING_TYPE     reduce using rule 16 (sentencias_funcion -> invocacion .)
    DOUBLE_TYPE     reduce using rule 16 (sentencias_funcion -> invocacion .)
    BOOL_TYPE       reduce using rule 16 (sentencias_funcion -> invocacion .)
    LIST            reduce using rule 16 (sentencias_funcion -> invocacion .)
    MAP             reduce using rule 16 (sentencias_funcion -> invocacion .)
    SET             reduce using rule 16 (sentencias_funcion -> invocacion .)
    RKEY            reduce using rule 16 (sentencias_funcion -> invocacion .)


state 175

    (67) impresion -> PRINT . LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> PRINT . LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 199


state 176

    (145) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> IF . LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> IF . LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> IF . LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> IF . LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY

    LPAREN          shift and go to state 200


state 177

    (63) retorno -> RETURN . SEMICOLON
    (64) retorno -> RETURN . expresion SEMICOLON
    (55) expresion -> . operacion
    (56) expresion -> . comparacion
    (57) expresion -> . list
    (58) expresion -> . diccionario
    (59) expresion -> . set
    (60) expresion -> . input
    (61) expresion -> . invocar
    (62) expresion -> . variable_indexada
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (78) comparacion -> . operacion comparador operacion
    (97) list -> . LBRACKETS element_list RBRACKETS
    (98) list -> . LBRACKETS RBRACKETS
    (140) diccionario -> . LKEY key_element_list RKEY
    (141) diccionario -> . LKEY RKEY
    (142) diccionario -> . DICT LPAREN RPAREN
    (143) set -> . LKEY element_list RKEY
    (144) set -> . CONJUNTO LPAREN RPAREN
    (70) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (30) invocar -> . VARIABLE LPAREN element_list RPAREN
    (31) invocar -> . VARIABLE LPAREN RPAREN
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    SEMICOLON       shift and go to state 201
    LBRACKETS       shift and go to state 67
    LKEY            shift and go to state 68
    DICT            shift and go to state 69
    CONJUNTO        shift and go to state 70
    STDIN           shift and go to state 71
    VARIABLE        shift and go to state 72
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76

    expresion                      shift and go to state 202
    operacion                      shift and go to state 58
    comparacion                    shift and go to state 59
    list                           shift and go to state 60
    diccionario                    shift and go to state 61
    set                            shift and go to state 62
    input                          shift and go to state 63
    invocar                        shift and go to state 64
    variable_indexada              shift and go to state 65
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 178

    (128) while -> WHILE . LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> WHILE . LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> WHILE . LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY

    LPAREN          shift and go to state 203


state 179

    (131) do_while -> DO . LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO . LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> DO . LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON

    LKEY            shift and go to state 204


state 180

    (120) for -> FOR . LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> FOR . LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> FOR . LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> FOR . LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR . LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> FOR . LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    LPAREN          shift and go to state 205


state 181

    (43) asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .

    FINAL_TYPE      reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    CLASS           reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    VOID            reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    VARIABLE        reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    LIST            reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    MAP             reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    SET             reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    $end            reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    STATIC          reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    RKEY            reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    PRINT           reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    IF              reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    RETURN          reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    WHILE           reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    DO              reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    FOR             reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    INT             reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    DOUBLE          reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    STRING          reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)
    BOOLEAN         reduce using rule 43 (asignar_variable -> FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON .)


state 182

    (32) constructor -> VARIABLE LPAREN atributo_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 206


state 183

    (33) atributo_list -> THIS . DOT VARIABLE
    (34) atributo_list -> THIS . DOT VARIABLE COMA atributo_list

    DOT             shift and go to state 207


state 184

    (45) cambiar_variable -> variables modificador SEMICOLON .

    FINAL_TYPE      reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    VARIABLE        reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    STATIC          reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    VOID            reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    CONST_TYPE      reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    VAR_TYPE        reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    INT_TYPE        reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    STRING_TYPE     reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    BOOL_TYPE       reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    LIST            reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    MAP             reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    SET             reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    RKEY            reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    PRINT           reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    IF              reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    RETURN          reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    WHILE           reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    DO              reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)
    FOR             reduce using rule 45 (cambiar_variable -> variables modificador SEMICOLON .)


state 185

    (46) cambiar_variable -> variables asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 208


state 186

    (37) funcion_static -> STATIC tipo_dato VARIABLE . LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> STATIC tipo_dato VARIABLE . LPAREN RPAREN LKEY cuerpo_funcion RKEY

    LPAREN          shift and go to state 209


state 187

    (111) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 111 (tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .)


state 188

    (100) element_list -> elemento COMA element_list .

    RBRACKETS       reduce using rule 100 (element_list -> elemento COMA element_list .)
    RKEY            reduce using rule 100 (element_list -> elemento COMA element_list .)
    RPAREN          reduce using rule 100 (element_list -> elemento COMA element_list .)


state 189

    (139) key_element_list -> key_element COMA key_element_list .

    RKEY            reduce using rule 139 (key_element_list -> key_element COMA key_element_list .)


state 190

    (137) key_element -> inmutables DOS_PUNTOS elemento .

    COMA            reduce using rule 137 (key_element -> inmutables DOS_PUNTOS elemento .)
    RKEY            reduce using rule 137 (key_element -> inmutables DOS_PUNTOS elemento .)


state 191

    (70) input -> STDIN DOT READLINESYNC LPAREN . RPAREN

    RPAREN          shift and go to state 210


state 192

    (30) invocar -> VARIABLE LPAREN element_list RPAREN .

    SEMICOLON       reduce using rule 30 (invocar -> VARIABLE LPAREN element_list RPAREN .)


state 193

    (156) parametros -> tipo_dato VARIABLE COMA parametros .

    RPAREN          reduce using rule 156 (parametros -> tipo_dato VARIABLE COMA parametros .)


state 194

    (35) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 211


state 195

    (26) invocacion -> VARIABLE LPAREN . element_list RPAREN SEMICOLON
    (27) invocacion -> VARIABLE LPAREN . RPAREN SEMICOLON
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RPAREN          shift and go to state 213
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    element_list                   shift and go to state 212
    elemento                       shift and go to state 116
    get_variable                   shift and go to state 77

state 196

    (28) invocacion -> VARIABLE DOT . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> VARIABLE DOT . VARIABLE LPAREN RPAREN SEMICOLON

    VARIABLE        shift and go to state 214


state 197

    (36) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    CLASS           reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    IMPORT          reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    $end            reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    STATIC          reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 36 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)


state 198

    (18) cuerpo_funcion -> sentencias_funcion cuerpo_funcion .

    RKEY            reduce using rule 18 (cuerpo_funcion -> sentencias_funcion cuerpo_funcion .)


state 199

    (67) impresion -> PRINT LPAREN . operacion RPAREN SEMICOLON
    (68) impresion -> PRINT LPAREN . comparacion_logica RPAREN SEMICOLON
    (69) impresion -> PRINT LPAREN . RPAREN SEMICOLON
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (78) comparacion -> . operacion comparador operacion
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RPAREN          shift and go to state 216
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    operacion                      shift and go to state 215
    comparacion_logica             shift and go to state 217
    elemento                       shift and go to state 66
    comparacion                    shift and go to state 218
    get_variable                   shift and go to state 77

state 200

    (145) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> IF LPAREN . get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> IF LPAREN . get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> IF LPAREN . BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> IF LPAREN . BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable

    BOOLEAN         shift and go to state 221
    VARIABLE        shift and go to state 117
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75

    comparacion_logica             shift and go to state 219
    get_variable                   shift and go to state 220
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66

state 201

    (63) retorno -> RETURN SEMICOLON .

    FINAL_TYPE      reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    PRINT           reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    IF              reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    RETURN          reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    WHILE           reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    DO              reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    FOR             reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    VARIABLE        reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    VOID            reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    CONST_TYPE      reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    VAR_TYPE        reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    LIST            reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    MAP             reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    SET             reduce using rule 63 (retorno -> RETURN SEMICOLON .)
    RKEY            reduce using rule 63 (retorno -> RETURN SEMICOLON .)


state 202

    (64) retorno -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 223


state 203

    (128) while -> WHILE LPAREN . comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> WHILE LPAREN . get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> WHILE LPAREN . BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable

    BOOLEAN         shift and go to state 226
    VARIABLE        shift and go to state 117
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75

    comparacion_logica             shift and go to state 224
    get_variable                   shift and go to state 225
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66

state 204

    (131) do_while -> DO LKEY . cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO LKEY . cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> DO LKEY . cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 227
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 205

    (120) for -> FOR LPAREN . asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> FOR LPAREN . SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> FOR LPAREN . SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> FOR LPAREN . tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR LPAREN . tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> FOR LPAREN . tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    SEMICOLON       shift and go to state 229
    FINAL_TYPE      shift and go to state 8
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    asignar_variable               shift and go to state 228
    tipo_dato                      shift and go to state 230

state 206

    (32) constructor -> VARIABLE LPAREN atributo_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 231


state 207

    (33) atributo_list -> THIS DOT . VARIABLE
    (34) atributo_list -> THIS DOT . VARIABLE COMA atributo_list

    VARIABLE        shift and go to state 232


state 208

    (46) cambiar_variable -> variables asignador expresion SEMICOLON .

    FINAL_TYPE      reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    VARIABLE        reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    STATIC          reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    VOID            reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    LIST            reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    MAP             reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    SET             reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    RKEY            reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    PRINT           reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    IF              reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    RETURN          reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    WHILE           reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    DO              reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)
    FOR             reduce using rule 46 (cambiar_variable -> variables asignador expresion SEMICOLON .)


state 209

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN . parametros RPAREN LKEY cuerpo_funcion RKEY
    (38) funcion_static -> STATIC tipo_dato VARIABLE LPAREN . RPAREN LKEY cuerpo_funcion RKEY
    (155) parametros -> . tipo_dato VARIABLE
    (156) parametros -> . tipo_dato VARIABLE COMA parametros
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    RPAREN          shift and go to state 234
    VOID            shift and go to state 12
    VARIABLE        shift and go to state 9
    FINAL_TYPE      shift and go to state 26
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 78
    parametros                     shift and go to state 233

state 210

    (70) input -> STDIN DOT READLINESYNC LPAREN RPAREN .

    SEMICOLON       reduce using rule 70 (input -> STDIN DOT READLINESYNC LPAREN RPAREN .)


state 211

    (35) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    CLASS           reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    IMPORT          reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    $end            reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    STATIC          reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 35 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)


state 212

    (26) invocacion -> VARIABLE LPAREN element_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 235


state 213

    (27) invocacion -> VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 236


state 214

    (28) invocacion -> VARIABLE DOT VARIABLE . LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> VARIABLE DOT VARIABLE . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 237


state 215

    (67) impresion -> PRINT LPAREN operacion . RPAREN SEMICOLON
    (78) comparacion -> operacion . comparador operacion
    (84) comparador -> . EQUALITY
    (85) comparador -> . INEQUALITY
    (86) comparador -> . GREATER_THAN
    (87) comparador -> . LESS_THAN
    (88) comparador -> . GREATER_EQ_THAN
    (89) comparador -> . LESS_EQ_THAN

    RPAREN          shift and go to state 238
    EQUALITY        shift and go to state 102
    INEQUALITY      shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    GREATER_EQ_THAN shift and go to state 106
    LESS_EQ_THAN    shift and go to state 107

    comparador                     shift and go to state 101

state 216

    (69) impresion -> PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 239


state 217

    (68) impresion -> PRINT LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 240


state 218

    (79) comparacion_logica -> comparacion .
    (80) comparacion_logica -> comparacion . operador_logico comparacion_logica
    (81) operador_logico -> . AND
    (82) operador_logico -> . OR
    (83) operador_logico -> . NOT

    RPAREN          reduce using rule 79 (comparacion_logica -> comparacion .)
    SEMICOLON       reduce using rule 79 (comparacion_logica -> comparacion .)
    AND             shift and go to state 242
    OR              shift and go to state 243
    NOT             shift and go to state 244

    operador_logico                shift and go to state 241

state 219

    (145) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 245


state 220

    (147) condicional -> IF LPAREN get_variable . RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> IF LPAREN get_variable . RPAREN LKEY cuerpo_funcion RKEY
    (75) elemento -> get_variable .

    RPAREN          shift and go to state 246
    PLUS            reduce using rule 75 (elemento -> get_variable .)
    MINUS           reduce using rule 75 (elemento -> get_variable .)
    TIMES           reduce using rule 75 (elemento -> get_variable .)
    DIVIDE          reduce using rule 75 (elemento -> get_variable .)
    MODULO          reduce using rule 75 (elemento -> get_variable .)
    EQUALITY        reduce using rule 75 (elemento -> get_variable .)
    INEQUALITY      reduce using rule 75 (elemento -> get_variable .)
    GREATER_THAN    reduce using rule 75 (elemento -> get_variable .)
    LESS_THAN       reduce using rule 75 (elemento -> get_variable .)
    GREATER_EQ_THAN reduce using rule 75 (elemento -> get_variable .)
    LESS_EQ_THAN    reduce using rule 75 (elemento -> get_variable .)


state 221

    (149) condicional -> IF LPAREN BOOLEAN . RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> IF LPAREN BOOLEAN . RPAREN LKEY cuerpo_funcion RKEY
    (74) elemento -> BOOLEAN .

    RPAREN          shift and go to state 247
    PLUS            reduce using rule 74 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 74 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 74 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 74 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 74 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 74 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 74 (elemento -> BOOLEAN .)


state 222

    (78) comparacion -> operacion . comparador operacion
    (84) comparador -> . EQUALITY
    (85) comparador -> . INEQUALITY
    (86) comparador -> . GREATER_THAN
    (87) comparador -> . LESS_THAN
    (88) comparador -> . GREATER_EQ_THAN
    (89) comparador -> . LESS_EQ_THAN

    EQUALITY        shift and go to state 102
    INEQUALITY      shift and go to state 103
    GREATER_THAN    shift and go to state 104
    LESS_THAN       shift and go to state 105
    GREATER_EQ_THAN shift and go to state 106
    LESS_EQ_THAN    shift and go to state 107

    comparador                     shift and go to state 101

state 223

    (64) retorno -> RETURN expresion SEMICOLON .

    FINAL_TYPE      reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    PRINT           reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    IF              reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    RETURN          reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    WHILE           reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    DO              reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    FOR             reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    VARIABLE        reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    VOID            reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    CONST_TYPE      reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    INT_TYPE        reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    LIST            reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    MAP             reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    SET             reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)
    RKEY            reduce using rule 64 (retorno -> RETURN expresion SEMICOLON .)


state 224

    (128) while -> WHILE LPAREN comparacion_logica . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 248


state 225

    (129) while -> WHILE LPAREN get_variable . RPAREN LKEY cuerpo_funcion RKEY
    (75) elemento -> get_variable .

    RPAREN          shift and go to state 249
    PLUS            reduce using rule 75 (elemento -> get_variable .)
    MINUS           reduce using rule 75 (elemento -> get_variable .)
    TIMES           reduce using rule 75 (elemento -> get_variable .)
    DIVIDE          reduce using rule 75 (elemento -> get_variable .)
    MODULO          reduce using rule 75 (elemento -> get_variable .)
    EQUALITY        reduce using rule 75 (elemento -> get_variable .)
    INEQUALITY      reduce using rule 75 (elemento -> get_variable .)
    GREATER_THAN    reduce using rule 75 (elemento -> get_variable .)
    LESS_THAN       reduce using rule 75 (elemento -> get_variable .)
    GREATER_EQ_THAN reduce using rule 75 (elemento -> get_variable .)
    LESS_EQ_THAN    reduce using rule 75 (elemento -> get_variable .)


state 226

    (130) while -> WHILE LPAREN BOOLEAN . RPAREN LKEY cuerpo_funcion RKEY
    (74) elemento -> BOOLEAN .

    RPAREN          shift and go to state 250
    PLUS            reduce using rule 74 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 74 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 74 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 74 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 74 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 74 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 74 (elemento -> BOOLEAN .)


state 227

    (131) do_while -> DO LKEY cuerpo_funcion . RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO LKEY cuerpo_funcion . RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> DO LKEY cuerpo_funcion . RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON

    RKEY            shift and go to state 251


state 228

    (120) for -> FOR LPAREN asignar_variable . comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    comparacion_logica             shift and go to state 252
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 229

    (121) for -> FOR LPAREN SEMICOLON . comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> FOR LPAREN SEMICOLON . SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    SEMICOLON       shift and go to state 253
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    comparacion_logica             shift and go to state 254
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 230

    (123) for_each -> FOR LPAREN tipo_dato . VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR LPAREN tipo_dato . VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> FOR LPAREN tipo_dato . VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (41) asignar_variable -> tipo_dato . variables asignador expresion SEMICOLON
    (42) asignar_variable -> tipo_dato . variables SEMICOLON
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    VARIABLE        shift and go to state 255

    variables                      shift and go to state 23
    variable_indexada              shift and go to state 25

state 231

    (32) constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    STATIC          reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    VOID            reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    LIST            reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    MAP             reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    SET             reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)
    RKEY            reduce using rule 32 (constructor -> VARIABLE LPAREN atributo_list RPAREN SEMICOLON .)


state 232

    (33) atributo_list -> THIS DOT VARIABLE .
    (34) atributo_list -> THIS DOT VARIABLE . COMA atributo_list

    RPAREN          reduce using rule 33 (atributo_list -> THIS DOT VARIABLE .)
    COMA            shift and go to state 256


state 233

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 257


state 234

    (38) funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 258


state 235

    (26) invocacion -> VARIABLE LPAREN element_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 259


state 236

    (27) invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    SET             reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 27 (invocacion -> VARIABLE LPAREN RPAREN SEMICOLON .)


state 237

    (28) invocacion -> VARIABLE DOT VARIABLE LPAREN . element_list RPAREN SEMICOLON
    (29) invocacion -> VARIABLE DOT VARIABLE LPAREN . RPAREN SEMICOLON
    (99) element_list -> . elemento
    (100) element_list -> . elemento COMA element_list
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    RPAREN          shift and go to state 261
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    element_list                   shift and go to state 260
    elemento                       shift and go to state 116
    get_variable                   shift and go to state 77

state 238

    (67) impresion -> PRINT LPAREN operacion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 262


state 239

    (69) impresion -> PRINT LPAREN RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    SET             reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 69 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)


state 240

    (68) impresion -> PRINT LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 263


state 241

    (80) comparacion_logica -> comparacion operador_logico . comparacion_logica
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable

    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75
    BOOLEAN         shift and go to state 76
    VARIABLE        shift and go to state 117

    comparacion                    shift and go to state 218
    comparacion_logica             shift and go to state 264
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66
    get_variable                   shift and go to state 77

state 242

    (81) operador_logico -> AND .

    INT             reduce using rule 81 (operador_logico -> AND .)
    DOUBLE          reduce using rule 81 (operador_logico -> AND .)
    STRING          reduce using rule 81 (operador_logico -> AND .)
    BOOLEAN         reduce using rule 81 (operador_logico -> AND .)
    VARIABLE        reduce using rule 81 (operador_logico -> AND .)


state 243

    (82) operador_logico -> OR .

    INT             reduce using rule 82 (operador_logico -> OR .)
    DOUBLE          reduce using rule 82 (operador_logico -> OR .)
    STRING          reduce using rule 82 (operador_logico -> OR .)
    BOOLEAN         reduce using rule 82 (operador_logico -> OR .)
    VARIABLE        reduce using rule 82 (operador_logico -> OR .)


state 244

    (83) operador_logico -> NOT .

    INT             reduce using rule 83 (operador_logico -> NOT .)
    DOUBLE          reduce using rule 83 (operador_logico -> NOT .)
    STRING          reduce using rule 83 (operador_logico -> NOT .)
    BOOLEAN         reduce using rule 83 (operador_logico -> NOT .)
    VARIABLE        reduce using rule 83 (operador_logico -> NOT .)


state 245

    (145) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 265


state 246

    (147) condicional -> IF LPAREN get_variable RPAREN . LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> IF LPAREN get_variable RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 266


state 247

    (149) condicional -> IF LPAREN BOOLEAN RPAREN . LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> IF LPAREN BOOLEAN RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 267


state 248

    (128) while -> WHILE LPAREN comparacion_logica RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 268


state 249

    (129) while -> WHILE LPAREN get_variable RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 269


state 250

    (130) while -> WHILE LPAREN BOOLEAN RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 270


state 251

    (131) do_while -> DO LKEY cuerpo_funcion RKEY . WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO LKEY cuerpo_funcion RKEY . WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> DO LKEY cuerpo_funcion RKEY . WHILE LPAREN BOOLEAN RPAREN SEMICOLON

    WHILE           shift and go to state 271


state 252

    (120) for -> FOR LPAREN asignar_variable comparacion_logica . SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY

    SEMICOLON       shift and go to state 272


state 253

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON . VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 273


state 254

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica . SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY

    SEMICOLON       shift and go to state 274


state 255

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE . IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR LPAREN tipo_dato VARIABLE . IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> FOR LPAREN tipo_dato VARIABLE . LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (39) variables -> VARIABLE .
    (65) variable_indexada -> VARIABLE . LBRACKETS inmutables RBRACKETS

    IN              shift and go to state 276
    LPAREN          shift and go to state 275
    SEMICOLON       reduce using rule 39 (variables -> VARIABLE .)
    ASSIGN          reduce using rule 39 (variables -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 39 (variables -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 39 (variables -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    MODULO_ASSIGN   reduce using rule 39 (variables -> VARIABLE .)
    LBRACKETS       shift and go to state 42


state 256

    (34) atributo_list -> THIS DOT VARIABLE COMA . atributo_list
    (33) atributo_list -> . THIS DOT VARIABLE
    (34) atributo_list -> . THIS DOT VARIABLE COMA atributo_list

    THIS            shift and go to state 183

    atributo_list                  shift and go to state 277

state 257

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 278


state 258

    (38) funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 279
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 259

    (26) invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    IF              reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DO              reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    FOR             reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VOID            reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    LIST            reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    MAP             reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    SET             reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RKEY            reduce using rule 26 (invocacion -> VARIABLE LPAREN element_list RPAREN SEMICOLON .)


state 260

    (28) invocacion -> VARIABLE DOT VARIABLE LPAREN element_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 280


state 261

    (29) invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 281


state 262

    (67) impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    PRINT           reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IF              reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DO              reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    FOR             reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VOID            reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    LIST            reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    MAP             reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    SET             reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RKEY            reduce using rule 67 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)


state 263

    (68) impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 68 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)


state 264

    (80) comparacion_logica -> comparacion operador_logico comparacion_logica .

    RPAREN          reduce using rule 80 (comparacion_logica -> comparacion operador_logico comparacion_logica .)
    SEMICOLON       reduce using rule 80 (comparacion_logica -> comparacion operador_logico comparacion_logica .)


state 265

    (145) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (146) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 282
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 266

    (147) condicional -> IF LPAREN get_variable RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (148) condicional -> IF LPAREN get_variable RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 283
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 267

    (149) condicional -> IF LPAREN BOOLEAN RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (150) condicional -> IF LPAREN BOOLEAN RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 284
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 268

    (128) while -> WHILE LPAREN comparacion_logica RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 285
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 269

    (129) while -> WHILE LPAREN get_variable RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 286
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 270

    (130) while -> WHILE LPAREN BOOLEAN RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 287
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 271

    (131) do_while -> DO LKEY cuerpo_funcion RKEY WHILE . LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO LKEY cuerpo_funcion RKEY WHILE . LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> DO LKEY cuerpo_funcion RKEY WHILE . LPAREN BOOLEAN RPAREN SEMICOLON

    LPAREN          shift and go to state 288


state 272

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON . VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 289


state 273

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE . modificador RPAREN LKEY cuerpo_funcion RKEY
    (47) modificador -> . INCREMENT_VAR
    (48) modificador -> . DECREMENT_VAR

    INCREMENT_VAR   shift and go to state 141
    DECREMENT_VAR   shift and go to state 142

    modificador                    shift and go to state 290

state 274

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON . VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 291


state 275

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN . specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (126) specific_instance -> . DOS_PUNTOS VARIABLE
    (127) specific_instance -> . DOS_PUNTOS VARIABLE COMA specific_instance

    DOS_PUNTOS      shift and go to state 293

    specific_instance              shift and go to state 292

state 276

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN . VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN . VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 294


state 277

    (34) atributo_list -> THIS DOT VARIABLE COMA atributo_list .

    RPAREN          reduce using rule 34 (atributo_list -> THIS DOT VARIABLE COMA atributo_list .)


state 278

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 295
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 279

    (38) funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 296


state 280

    (28) invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 297


state 281

    (29) invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    SET             reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 29 (invocacion -> VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON .)


state 282

    (145) condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion . RKEY bloques_else
    (146) condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 298


state 283

    (147) condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion . RKEY bloques_else
    (148) condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 299


state 284

    (149) condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion . RKEY bloques_else
    (150) condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 300


state 285

    (128) while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 301


state 286

    (129) while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 302


state 287

    (130) while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 303


state 288

    (131) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN . comparacion_logica RPAREN SEMICOLON
    (132) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN . get_variable RPAREN SEMICOLON
    (133) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN . BOOLEAN RPAREN SEMICOLON
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable

    BOOLEAN         shift and go to state 306
    VARIABLE        shift and go to state 117
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75

    comparacion_logica             shift and go to state 304
    get_variable                   shift and go to state 305
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66

state 289

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE . modificador RPAREN LKEY cuerpo_funcion RKEY
    (47) modificador -> . INCREMENT_VAR
    (48) modificador -> . DECREMENT_VAR

    INCREMENT_VAR   shift and go to state 141
    DECREMENT_VAR   shift and go to state 142

    modificador                    shift and go to state 307

state 290

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 308


state 291

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE . modificador RPAREN LKEY cuerpo_funcion RKEY
    (47) modificador -> . INCREMENT_VAR
    (48) modificador -> . DECREMENT_VAR

    INCREMENT_VAR   shift and go to state 141
    DECREMENT_VAR   shift and go to state 142

    modificador                    shift and go to state 309

state 292

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance . RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 310


state 293

    (126) specific_instance -> DOS_PUNTOS . VARIABLE
    (127) specific_instance -> DOS_PUNTOS . VARIABLE COMA specific_instance

    VARIABLE        shift and go to state 311


state 294

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE . RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE . DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 312
    DOT             shift and go to state 313


state 295

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 314


state 296

    (38) funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    STATIC          reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 38 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN RPAREN LKEY cuerpo_funcion RKEY .)


state 297

    (28) invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    IF              reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DO              reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    FOR             reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VOID            reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    LIST            reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    MAP             reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    SET             reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)
    RKEY            reduce using rule 28 (invocacion -> VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON .)


state 298

    (145) condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (146) condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    FINAL_TYPE      reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 146 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 315

state 299

    (147) condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (148) condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    FINAL_TYPE      reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 148 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 317

state 300

    (149) condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (150) condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    FINAL_TYPE      reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 150 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 318

state 301

    (128) while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 128 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY .)


state 302

    (129) while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 129 (while -> WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY .)


state 303

    (130) while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 130 (while -> WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY .)


state 304

    (131) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 319


state 305

    (132) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable . RPAREN SEMICOLON
    (75) elemento -> get_variable .

    RPAREN          shift and go to state 320
    PLUS            reduce using rule 75 (elemento -> get_variable .)
    MINUS           reduce using rule 75 (elemento -> get_variable .)
    TIMES           reduce using rule 75 (elemento -> get_variable .)
    DIVIDE          reduce using rule 75 (elemento -> get_variable .)
    MODULO          reduce using rule 75 (elemento -> get_variable .)
    EQUALITY        reduce using rule 75 (elemento -> get_variable .)
    INEQUALITY      reduce using rule 75 (elemento -> get_variable .)
    GREATER_THAN    reduce using rule 75 (elemento -> get_variable .)
    LESS_THAN       reduce using rule 75 (elemento -> get_variable .)
    GREATER_EQ_THAN reduce using rule 75 (elemento -> get_variable .)
    LESS_EQ_THAN    reduce using rule 75 (elemento -> get_variable .)


state 306

    (133) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN . RPAREN SEMICOLON
    (74) elemento -> BOOLEAN .

    RPAREN          shift and go to state 321
    PLUS            reduce using rule 74 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 74 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 74 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 74 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 74 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 74 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 74 (elemento -> BOOLEAN .)


state 307

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 322


state 308

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 323


state 309

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 324


state 310

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN . IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    IN              shift and go to state 325


state 311

    (126) specific_instance -> DOS_PUNTOS VARIABLE .
    (127) specific_instance -> DOS_PUNTOS VARIABLE . COMA specific_instance

    RPAREN          reduce using rule 126 (specific_instance -> DOS_PUNTOS VARIABLE .)
    COMA            shift and go to state 326


state 312

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 327


state 313

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT . VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 328


state 314

    (37) funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    STATIC          reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 37 (funcion_static -> STATIC tipo_dato VARIABLE LPAREN parametros RPAREN LKEY cuerpo_funcion RKEY .)


state 315

    (145) condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 145 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)


state 316

    (151) bloques_else -> ELSE . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> ELSE . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> ELSE . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> ELSE . LKEY cuerpo_funcion RKEY

    IF              shift and go to state 329
    LKEY            shift and go to state 330


state 317

    (147) condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 147 (condicional -> IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)


state 318

    (149) condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 149 (condicional -> IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)


state 319

    (131) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 331


state 320

    (132) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 332


state 321

    (133) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 333


state 322

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 334


state 323

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 335
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 324

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 336


state 325

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN . VARIABLE RPAREN LKEY cuerpo_funcion RKEY

    VARIABLE        shift and go to state 337


state 326

    (127) specific_instance -> DOS_PUNTOS VARIABLE COMA . specific_instance
    (126) specific_instance -> . DOS_PUNTOS VARIABLE
    (127) specific_instance -> . DOS_PUNTOS VARIABLE COMA specific_instance

    DOS_PUNTOS      shift and go to state 293

    specific_instance              shift and go to state 338

state 327

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 339
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 328

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 340


state 329

    (151) bloques_else -> ELSE IF . LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> ELSE IF . LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> ELSE IF . LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else

    LPAREN          shift and go to state 341


state 330

    (154) bloques_else -> ELSE LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 342
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 331

    (131) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 131 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)


state 332

    (132) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    PRINT           reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    IF              reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    RETURN          reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    WHILE           reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    DO              reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    FOR             reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    VOID            reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    LIST            reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    MAP             reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    SET             reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)
    RKEY            reduce using rule 132 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON .)


state 333

    (133) do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .

    FINAL_TYPE      reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    PRINT           reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    IF              reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    RETURN          reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    WHILE           reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    DO              reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    FOR             reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    VOID            reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    CONST_TYPE      reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    LIST            reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    MAP             reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    SET             reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)
    RKEY            reduce using rule 133 (do_while -> DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON .)


state 334

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    asignar_variable               shift and go to state 165
    cuerpo_funcion                 shift and go to state 343
    sentencias_funcion             shift and go to state 164
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 335

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 344


state 336

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 345
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 337

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE . RPAREN LKEY cuerpo_funcion RKEY

    RPAREN          shift and go to state 346


state 338

    (127) specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance .

    RPAREN          reduce using rule 127 (specific_instance -> DOS_PUNTOS VARIABLE COMA specific_instance .)


state 339

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 347


state 340

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 348


state 341

    (151) bloques_else -> ELSE IF LPAREN . comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> ELSE IF LPAREN . get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> ELSE IF LPAREN . BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (79) comparacion_logica -> . comparacion
    (80) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (76) get_variable -> . VARIABLE
    (77) get_variable -> . VARIABLE DOT get_variable
    (78) comparacion -> . operacion comparador operacion
    (90) operacion -> . elemento
    (91) operacion -> . elemento operador operacion
    (71) elemento -> . INT
    (72) elemento -> . DOUBLE
    (73) elemento -> . STRING
    (74) elemento -> . BOOLEAN
    (75) elemento -> . get_variable

    BOOLEAN         shift and go to state 351
    VARIABLE        shift and go to state 117
    INT             shift and go to state 73
    DOUBLE          shift and go to state 74
    STRING          shift and go to state 75

    comparacion_logica             shift and go to state 349
    get_variable                   shift and go to state 350
    comparacion                    shift and go to state 218
    operacion                      shift and go to state 222
    elemento                       shift and go to state 66

state 342

    (154) bloques_else -> ELSE LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 352


state 343

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 353


state 344

    (122) for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 122 (for -> FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)


state 345

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 354


state 346

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN . LKEY cuerpo_funcion RKEY

    LKEY            shift and go to state 355


state 347

    (123) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 123 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)


state 348

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 356
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 349

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica . RPAREN LKEY cuerpo_funcion RKEY bloques_else

    RPAREN          shift and go to state 357


state 350

    (152) bloques_else -> ELSE IF LPAREN get_variable . RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (75) elemento -> get_variable .

    RPAREN          shift and go to state 358
    PLUS            reduce using rule 75 (elemento -> get_variable .)
    MINUS           reduce using rule 75 (elemento -> get_variable .)
    TIMES           reduce using rule 75 (elemento -> get_variable .)
    DIVIDE          reduce using rule 75 (elemento -> get_variable .)
    MODULO          reduce using rule 75 (elemento -> get_variable .)
    EQUALITY        reduce using rule 75 (elemento -> get_variable .)
    INEQUALITY      reduce using rule 75 (elemento -> get_variable .)
    GREATER_THAN    reduce using rule 75 (elemento -> get_variable .)
    LESS_THAN       reduce using rule 75 (elemento -> get_variable .)
    GREATER_EQ_THAN reduce using rule 75 (elemento -> get_variable .)
    LESS_EQ_THAN    reduce using rule 75 (elemento -> get_variable .)


state 351

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN . RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (74) elemento -> BOOLEAN .

    RPAREN          shift and go to state 359
    PLUS            reduce using rule 74 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 74 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 74 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 74 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 74 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 74 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 74 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 74 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 74 (elemento -> BOOLEAN .)


state 352

    (154) bloques_else -> ELSE LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 154 (bloques_else -> ELSE LKEY cuerpo_funcion RKEY .)


state 353

    (120) for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 120 (for -> FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)


state 354

    (121) for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 121 (for -> FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY .)


state 355

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY . cuerpo_funcion RKEY
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    tipo_dato                      shift and go to state 161
    cuerpo_funcion                 shift and go to state 360
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 356

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 361


state 357

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN . LKEY cuerpo_funcion RKEY bloques_else

    LKEY            shift and go to state 362


state 358

    (152) bloques_else -> ELSE IF LPAREN get_variable RPAREN . LKEY cuerpo_funcion RKEY bloques_else

    LKEY            shift and go to state 363


state 359

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN . LKEY cuerpo_funcion RKEY bloques_else

    LKEY            shift and go to state 364


state 360

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion . RKEY

    RKEY            shift and go to state 365


state 361

    (124) for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 124 (for_each -> FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)


state 362

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 366
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 363

    (152) bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 367
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 364

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY . cuerpo_funcion RKEY bloques_else
    (17) cuerpo_funcion -> . sentencias_funcion
    (18) cuerpo_funcion -> . sentencias_funcion cuerpo_funcion
    (7) sentencias_funcion -> . asignar_variable
    (8) sentencias_funcion -> . cambiar_variable
    (9) sentencias_funcion -> . impresion
    (10) sentencias_funcion -> . condicional
    (11) sentencias_funcion -> . retorno
    (12) sentencias_funcion -> . while
    (13) sentencias_funcion -> . do_while
    (14) sentencias_funcion -> . for
    (15) sentencias_funcion -> . for_each
    (16) sentencias_funcion -> . invocacion
    (41) asignar_variable -> . tipo_dato variables asignador expresion SEMICOLON
    (42) asignar_variable -> . tipo_dato variables SEMICOLON
    (43) asignar_variable -> . FINAL_TYPE tipo_dato variables asignador expresion SEMICOLON
    (44) asignar_variable -> . FINAL_TYPE tipo_dato variables SEMICOLON
    (45) cambiar_variable -> . variables modificador SEMICOLON
    (46) cambiar_variable -> . variables asignador expresion SEMICOLON
    (67) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (68) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (69) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (145) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (146) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (147) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (148) condicional -> . IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (149) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (150) condicional -> . IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (63) retorno -> . RETURN SEMICOLON
    (64) retorno -> . RETURN expresion SEMICOLON
    (128) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY
    (129) while -> . WHILE LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY
    (130) while -> . WHILE LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY
    (131) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (132) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN get_variable RPAREN SEMICOLON
    (133) do_while -> . DO LKEY cuerpo_funcion RKEY WHILE LPAREN BOOLEAN RPAREN SEMICOLON
    (120) for -> . FOR LPAREN asignar_variable comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (121) for -> . FOR LPAREN SEMICOLON comparacion_logica SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (122) for -> . FOR LPAREN SEMICOLON SEMICOLON VARIABLE modificador RPAREN LKEY cuerpo_funcion RKEY
    (123) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (124) for_each -> . FOR LPAREN tipo_dato VARIABLE IN VARIABLE DOT VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (125) for_each -> . FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY
    (26) invocacion -> . VARIABLE LPAREN element_list RPAREN SEMICOLON
    (27) invocacion -> . VARIABLE LPAREN RPAREN SEMICOLON
    (28) invocacion -> . VARIABLE DOT VARIABLE LPAREN element_list RPAREN SEMICOLON
    (29) invocacion -> . VARIABLE DOT VARIABLE LPAREN RPAREN SEMICOLON
    (101) tipo_dato -> . VOID
    (102) tipo_dato -> . VARIABLE
    (103) tipo_dato -> . FINAL_TYPE
    (104) tipo_dato -> . CONST_TYPE
    (105) tipo_dato -> . VAR_TYPE
    (106) tipo_dato -> . INT_TYPE
    (107) tipo_dato -> . STRING_TYPE
    (108) tipo_dato -> . DOUBLE_TYPE
    (109) tipo_dato -> . BOOL_TYPE
    (110) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (111) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (112) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN
    (39) variables -> . VARIABLE
    (40) variables -> . variable_indexada
    (65) variable_indexada -> . VARIABLE LBRACKETS inmutables RBRACKETS

    FINAL_TYPE      shift and go to state 8
    PRINT           shift and go to state 175
    IF              shift and go to state 176
    RETURN          shift and go to state 177
    WHILE           shift and go to state 178
    DO              shift and go to state 179
    FOR             shift and go to state 180
    VARIABLE        shift and go to state 162
    VOID            shift and go to state 12
    CONST_TYPE      shift and go to state 13
    VAR_TYPE        shift and go to state 14
    INT_TYPE        shift and go to state 15
    STRING_TYPE     shift and go to state 16
    DOUBLE_TYPE     shift and go to state 17
    BOOL_TYPE       shift and go to state 18
    LIST            shift and go to state 19
    MAP             shift and go to state 20
    SET             shift and go to state 21

    cuerpo_funcion                 shift and go to state 368
    sentencias_funcion             shift and go to state 164
    asignar_variable               shift and go to state 165
    cambiar_variable               shift and go to state 166
    impresion                      shift and go to state 167
    condicional                    shift and go to state 168
    retorno                        shift and go to state 169
    while                          shift and go to state 170
    do_while                       shift and go to state 171
    for                            shift and go to state 172
    for_each                       shift and go to state 173
    invocacion                     shift and go to state 174
    tipo_dato                      shift and go to state 161
    variables                      shift and go to state 95
    variable_indexada              shift and go to state 25

state 365

    (125) for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .

    FINAL_TYPE      reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    PRINT           reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    IF              reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RETURN          reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    WHILE           reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DO              reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    FOR             reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VARIABLE        reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VOID            reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    CONST_TYPE      reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    VAR_TYPE        reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    INT_TYPE        reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    STRING_TYPE     reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    DOUBLE_TYPE     reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    BOOL_TYPE       reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    LIST            reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    MAP             reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    SET             reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)
    RKEY            reduce using rule 125 (for_each -> FOR LPAREN tipo_dato VARIABLE LPAREN specific_instance RPAREN IN VARIABLE RPAREN LKEY cuerpo_funcion RKEY .)


state 366

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion . RKEY bloques_else

    RKEY            shift and go to state 369


state 367

    (152) bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion . RKEY bloques_else

    RKEY            shift and go to state 370


state 368

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion . RKEY bloques_else

    RKEY            shift and go to state 371


state 369

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 372

state 370

    (152) bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 373

state 371

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY . bloques_else
    (151) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (152) bloques_else -> . ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (153) bloques_else -> . ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else
    (154) bloques_else -> . ELSE LKEY cuerpo_funcion RKEY

    ELSE            shift and go to state 316

    bloques_else                   shift and go to state 374

state 372

    (151) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 151 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY cuerpo_funcion RKEY bloques_else .)


state 373

    (152) bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 152 (bloques_else -> ELSE IF LPAREN get_variable RPAREN LKEY cuerpo_funcion RKEY bloques_else .)


state 374

    (153) bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .

    FINAL_TYPE      reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    PRINT           reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    IF              reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RETURN          reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    WHILE           reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DO              reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    FOR             reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VARIABLE        reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VOID            reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    CONST_TYPE      reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    VAR_TYPE        reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    INT_TYPE        reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    STRING_TYPE     reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    LIST            reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    MAP             reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    SET             reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)
    RKEY            reduce using rule 153 (bloques_else -> ELSE IF LPAREN BOOLEAN RPAREN LKEY cuerpo_funcion RKEY bloques_else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 8 resolved as shift
