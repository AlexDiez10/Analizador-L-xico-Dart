Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOC_COMMENT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     sentencias -> asignar_variable
Rule 4     sentencias -> cambiar_variable
Rule 5     sentencias -> impresion
Rule 6     sentencias -> condicional
Rule 7     sentencias -> funcion
Rule 8     sentencias -> retorno
Rule 9     sentencias -> while
Rule 10    sentencias -> do_while
Rule 11    sentencias -> for
Rule 12    sentencias -> import
Rule 13    funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
Rule 14    funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
Rule 15    asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON
Rule 16    asignar_variable -> tipo_dato VARIABLE SEMICOLON
Rule 17    cambiar_variable -> VARIABLE modificador SEMICOLON
Rule 18    cambiar_variable -> VARIABLE asignador expresion SEMICOLON
Rule 19    modificador -> INCREMENT_VAR
Rule 20    modificador -> DECREMENT_VAR
Rule 21    asignador -> ASSIGN
Rule 22    asignador -> PLUS_ASSIGN
Rule 23    asignador -> MINUS_ASSIGN
Rule 24    asignador -> TIMES_ASSIGN
Rule 25    asignador -> DIVIDE_ASSIGN
Rule 26    asignador -> MODULO_ASSIGN
Rule 27    expresion -> operacion
Rule 28    expresion -> comparacion
Rule 29    expresion -> list
Rule 30    expresion -> diccionario
Rule 31    expresion -> set
Rule 32    expresion -> input
Rule 33    retorno -> RETURN SEMICOLON
Rule 34    retorno -> RETURN operacion SEMICOLON
Rule 35    import -> IMPORT STRING SEMICOLON
Rule 36    impresion -> PRINT LPAREN operacion RPAREN SEMICOLON
Rule 37    impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON
Rule 38    impresion -> PRINT LPAREN RPAREN SEMICOLON
Rule 39    input -> STDIN DOT READLINESYNC LPAREN RPAREN
Rule 40    elemento -> INT
Rule 41    elemento -> VARIABLE
Rule 42    elemento -> DOUBLE
Rule 43    elemento -> STRING
Rule 44    elemento -> BOOLEAN
Rule 45    comparacion -> operacion comparador operacion
Rule 46    comparacion_logica -> comparacion
Rule 47    comparacion_logica -> comparacion operador_logico comparacion_logica
Rule 48    operador_logico -> AND
Rule 49    operador_logico -> OR
Rule 50    operador_logico -> NOT
Rule 51    comparador -> EQUALITY
Rule 52    comparador -> INEQUALITY
Rule 53    comparador -> GREATER_THAN
Rule 54    comparador -> LESS_THAN
Rule 55    comparador -> GREATER_EQ_THAN
Rule 56    comparador -> LESS_EQ_THAN
Rule 57    operacion -> elemento
Rule 58    operacion -> elemento operador operacion
Rule 59    operador -> PLUS
Rule 60    operador -> MINUS
Rule 61    operador -> TIMES
Rule 62    operador -> DIVIDE
Rule 63    operador -> MODULO
Rule 64    list -> LBRACKETS element_list RBRACKETS
Rule 65    list -> LBRACKETS RBRACKETS
Rule 66    element_list -> elemento
Rule 67    element_list -> elemento COMA element_list
Rule 68    tipo_dato -> VOID
Rule 69    tipo_dato -> VAR_TYPE
Rule 70    tipo_dato -> INT_TYPE
Rule 71    tipo_dato -> STRING_TYPE
Rule 72    tipo_dato -> DOUBLE_TYPE
Rule 73    tipo_dato -> BOOL_TYPE
Rule 74    tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN
Rule 75    tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
Rule 76    tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN
Rule 77    tipo_coleccion -> INT_TYPE
Rule 78    tipo_coleccion -> STRING_TYPE
Rule 79    tipo_coleccion -> DOUBLE_TYPE
Rule 80    tipo_coleccion -> BOOL_TYPE
Rule 81    instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE asignador expresion
Rule 82    instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE modificador
Rule 83    for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
Rule 84    while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 85    do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
Rule 86    diccionario -> LKEY key_element_list RKEY
Rule 87    diccionario -> LKEY RKEY
Rule 88    set -> LKEY element_list RKEY
Rule 89    set -> LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY
Rule 90    key_element -> elemento DOS_PUNTOS elemento
Rule 91    key_element_list -> key_element
Rule 92    key_element_list -> key_element COMA key_element_list
Rule 93    condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 94    condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
Rule 95    bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
Rule 96    bloques_else -> ELSE LKEY programa RKEY
Rule 97    parametros -> tipo_dato VARIABLE
Rule 98    parametros -> tipo_dato VARIABLE COMA parametros

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 21
BOOLEAN              : 44
BOOL_TYPE            : 73 80
COMA                 : 67 75 92 98
COMMENT              : 
DECREMENT_VAR        : 20
DIVIDE               : 62
DIVIDE_ASSIGN        : 25
DO                   : 85
DOC_COMMENT          : 
DOS_PUNTOS           : 90
DOT                  : 39
DOUBLE               : 42
DOUBLE_TYPE          : 72 79
ELSE                 : 95 96
EQUALITY             : 51
FOR                  : 83
GREATER_EQ_THAN      : 55
GREATER_THAN         : 53 74 75 76 89
IF                   : 93 94 95
IMPORT               : 35
INCREMENT_VAR        : 19
INEQUALITY           : 52
INT                  : 40
INT_TYPE             : 70 77
LBRACKETS            : 64 65
LESS_EQ_THAN         : 56
LESS_THAN            : 54 74 75 76 89
LIST                 : 74
LKEY                 : 13 14 83 84 85 86 87 88 89 93 94 95 96
LPAREN               : 13 14 36 37 38 39 83 84 85 93 94 95
MAP                  : 75
MINUS                : 60
MINUS_ASSIGN         : 23
MODULO               : 63
MODULO_ASSIGN        : 26
NOT                  : 50
OR                   : 49
PLUS                 : 59
PLUS_ASSIGN          : 22
PRINT                : 36 37 38
RBRACKETS            : 64 65
READLINESYNC         : 39
RETURN               : 33 34
RKEY                 : 13 14 83 84 85 86 87 88 89 93 94 95 96
RPAREN               : 13 14 36 37 38 39 83 84 85 93 94 95
SEMICOLON            : 15 16 17 18 33 34 35 36 37 38 81 82 85
SET                  : 76
STDIN                : 39
STRING               : 35 43
STRING_TYPE          : 71 78
TIMES                : 61
TIMES_ASSIGN         : 24
VARIABLE             : 13 14 15 16 17 18 41 81 82 97 98
VAR_TYPE             : 69
VOID                 : 68
WHILE                : 84 85
error                : 

Nonterminals, with rules where they appear

asignador            : 15 18 81
asignar_variable     : 3 81 82
bloques_else         : 93 95
cambiar_variable     : 4
comparacion          : 28 46 47
comparacion_logica   : 37 47 81 82 84 85 93 94 95
comparador           : 45
condicional          : 6
diccionario          : 30
do_while             : 10
element_list         : 64 67 88
elemento             : 57 58 66 67 90 90
expresion            : 15 18 81
for                  : 11
funcion              : 7
import               : 12
impresion            : 5
input                : 32
instruccion_for      : 83
key_element          : 91 92
key_element_list     : 86 92
list                 : 29
modificador          : 17 82
operacion            : 27 34 36 45 45 58
operador             : 58
operador_logico      : 47
parametros           : 13 98
programa             : 2 13 14 83 84 85 93 94 95 96 0
retorno              : 8
sentencias           : 1 2
set                  : 31
tipo_coleccion       : 74 75 75 76 89
tipo_dato            : 13 14 15 16 97 98
while                : 9

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    $end            reduce using rule 1 (programa -> sentencias .)
    RKEY            reduce using rule 1 (programa -> sentencias .)
    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    sentencias                     shift and go to state 2
    programa                       shift and go to state 31
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 3

    (3) sentencias -> asignar_variable .

    VARIABLE        reduce using rule 3 (sentencias -> asignar_variable .)
    PRINT           reduce using rule 3 (sentencias -> asignar_variable .)
    IF              reduce using rule 3 (sentencias -> asignar_variable .)
    RETURN          reduce using rule 3 (sentencias -> asignar_variable .)
    WHILE           reduce using rule 3 (sentencias -> asignar_variable .)
    DO              reduce using rule 3 (sentencias -> asignar_variable .)
    FOR             reduce using rule 3 (sentencias -> asignar_variable .)
    IMPORT          reduce using rule 3 (sentencias -> asignar_variable .)
    VOID            reduce using rule 3 (sentencias -> asignar_variable .)
    VAR_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    INT_TYPE        reduce using rule 3 (sentencias -> asignar_variable .)
    STRING_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    DOUBLE_TYPE     reduce using rule 3 (sentencias -> asignar_variable .)
    BOOL_TYPE       reduce using rule 3 (sentencias -> asignar_variable .)
    LIST            reduce using rule 3 (sentencias -> asignar_variable .)
    MAP             reduce using rule 3 (sentencias -> asignar_variable .)
    SET             reduce using rule 3 (sentencias -> asignar_variable .)
    $end            reduce using rule 3 (sentencias -> asignar_variable .)
    RKEY            reduce using rule 3 (sentencias -> asignar_variable .)


state 4

    (4) sentencias -> cambiar_variable .

    VARIABLE        reduce using rule 4 (sentencias -> cambiar_variable .)
    PRINT           reduce using rule 4 (sentencias -> cambiar_variable .)
    IF              reduce using rule 4 (sentencias -> cambiar_variable .)
    RETURN          reduce using rule 4 (sentencias -> cambiar_variable .)
    WHILE           reduce using rule 4 (sentencias -> cambiar_variable .)
    DO              reduce using rule 4 (sentencias -> cambiar_variable .)
    FOR             reduce using rule 4 (sentencias -> cambiar_variable .)
    IMPORT          reduce using rule 4 (sentencias -> cambiar_variable .)
    VOID            reduce using rule 4 (sentencias -> cambiar_variable .)
    VAR_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    INT_TYPE        reduce using rule 4 (sentencias -> cambiar_variable .)
    STRING_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    DOUBLE_TYPE     reduce using rule 4 (sentencias -> cambiar_variable .)
    BOOL_TYPE       reduce using rule 4 (sentencias -> cambiar_variable .)
    LIST            reduce using rule 4 (sentencias -> cambiar_variable .)
    MAP             reduce using rule 4 (sentencias -> cambiar_variable .)
    SET             reduce using rule 4 (sentencias -> cambiar_variable .)
    $end            reduce using rule 4 (sentencias -> cambiar_variable .)
    RKEY            reduce using rule 4 (sentencias -> cambiar_variable .)


state 5

    (5) sentencias -> impresion .

    VARIABLE        reduce using rule 5 (sentencias -> impresion .)
    PRINT           reduce using rule 5 (sentencias -> impresion .)
    IF              reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)
    WHILE           reduce using rule 5 (sentencias -> impresion .)
    DO              reduce using rule 5 (sentencias -> impresion .)
    FOR             reduce using rule 5 (sentencias -> impresion .)
    IMPORT          reduce using rule 5 (sentencias -> impresion .)
    VOID            reduce using rule 5 (sentencias -> impresion .)
    VAR_TYPE        reduce using rule 5 (sentencias -> impresion .)
    INT_TYPE        reduce using rule 5 (sentencias -> impresion .)
    STRING_TYPE     reduce using rule 5 (sentencias -> impresion .)
    DOUBLE_TYPE     reduce using rule 5 (sentencias -> impresion .)
    BOOL_TYPE       reduce using rule 5 (sentencias -> impresion .)
    LIST            reduce using rule 5 (sentencias -> impresion .)
    MAP             reduce using rule 5 (sentencias -> impresion .)
    SET             reduce using rule 5 (sentencias -> impresion .)
    $end            reduce using rule 5 (sentencias -> impresion .)
    RKEY            reduce using rule 5 (sentencias -> impresion .)


state 6

    (6) sentencias -> condicional .

    VARIABLE        reduce using rule 6 (sentencias -> condicional .)
    PRINT           reduce using rule 6 (sentencias -> condicional .)
    IF              reduce using rule 6 (sentencias -> condicional .)
    RETURN          reduce using rule 6 (sentencias -> condicional .)
    WHILE           reduce using rule 6 (sentencias -> condicional .)
    DO              reduce using rule 6 (sentencias -> condicional .)
    FOR             reduce using rule 6 (sentencias -> condicional .)
    IMPORT          reduce using rule 6 (sentencias -> condicional .)
    VOID            reduce using rule 6 (sentencias -> condicional .)
    VAR_TYPE        reduce using rule 6 (sentencias -> condicional .)
    INT_TYPE        reduce using rule 6 (sentencias -> condicional .)
    STRING_TYPE     reduce using rule 6 (sentencias -> condicional .)
    DOUBLE_TYPE     reduce using rule 6 (sentencias -> condicional .)
    BOOL_TYPE       reduce using rule 6 (sentencias -> condicional .)
    LIST            reduce using rule 6 (sentencias -> condicional .)
    MAP             reduce using rule 6 (sentencias -> condicional .)
    SET             reduce using rule 6 (sentencias -> condicional .)
    $end            reduce using rule 6 (sentencias -> condicional .)
    RKEY            reduce using rule 6 (sentencias -> condicional .)


state 7

    (7) sentencias -> funcion .

    VARIABLE        reduce using rule 7 (sentencias -> funcion .)
    PRINT           reduce using rule 7 (sentencias -> funcion .)
    IF              reduce using rule 7 (sentencias -> funcion .)
    RETURN          reduce using rule 7 (sentencias -> funcion .)
    WHILE           reduce using rule 7 (sentencias -> funcion .)
    DO              reduce using rule 7 (sentencias -> funcion .)
    FOR             reduce using rule 7 (sentencias -> funcion .)
    IMPORT          reduce using rule 7 (sentencias -> funcion .)
    VOID            reduce using rule 7 (sentencias -> funcion .)
    VAR_TYPE        reduce using rule 7 (sentencias -> funcion .)
    INT_TYPE        reduce using rule 7 (sentencias -> funcion .)
    STRING_TYPE     reduce using rule 7 (sentencias -> funcion .)
    DOUBLE_TYPE     reduce using rule 7 (sentencias -> funcion .)
    BOOL_TYPE       reduce using rule 7 (sentencias -> funcion .)
    LIST            reduce using rule 7 (sentencias -> funcion .)
    MAP             reduce using rule 7 (sentencias -> funcion .)
    SET             reduce using rule 7 (sentencias -> funcion .)
    $end            reduce using rule 7 (sentencias -> funcion .)
    RKEY            reduce using rule 7 (sentencias -> funcion .)


state 8

    (8) sentencias -> retorno .

    VARIABLE        reduce using rule 8 (sentencias -> retorno .)
    PRINT           reduce using rule 8 (sentencias -> retorno .)
    IF              reduce using rule 8 (sentencias -> retorno .)
    RETURN          reduce using rule 8 (sentencias -> retorno .)
    WHILE           reduce using rule 8 (sentencias -> retorno .)
    DO              reduce using rule 8 (sentencias -> retorno .)
    FOR             reduce using rule 8 (sentencias -> retorno .)
    IMPORT          reduce using rule 8 (sentencias -> retorno .)
    VOID            reduce using rule 8 (sentencias -> retorno .)
    VAR_TYPE        reduce using rule 8 (sentencias -> retorno .)
    INT_TYPE        reduce using rule 8 (sentencias -> retorno .)
    STRING_TYPE     reduce using rule 8 (sentencias -> retorno .)
    DOUBLE_TYPE     reduce using rule 8 (sentencias -> retorno .)
    BOOL_TYPE       reduce using rule 8 (sentencias -> retorno .)
    LIST            reduce using rule 8 (sentencias -> retorno .)
    MAP             reduce using rule 8 (sentencias -> retorno .)
    SET             reduce using rule 8 (sentencias -> retorno .)
    $end            reduce using rule 8 (sentencias -> retorno .)
    RKEY            reduce using rule 8 (sentencias -> retorno .)


state 9

    (9) sentencias -> while .

    VARIABLE        reduce using rule 9 (sentencias -> while .)
    PRINT           reduce using rule 9 (sentencias -> while .)
    IF              reduce using rule 9 (sentencias -> while .)
    RETURN          reduce using rule 9 (sentencias -> while .)
    WHILE           reduce using rule 9 (sentencias -> while .)
    DO              reduce using rule 9 (sentencias -> while .)
    FOR             reduce using rule 9 (sentencias -> while .)
    IMPORT          reduce using rule 9 (sentencias -> while .)
    VOID            reduce using rule 9 (sentencias -> while .)
    VAR_TYPE        reduce using rule 9 (sentencias -> while .)
    INT_TYPE        reduce using rule 9 (sentencias -> while .)
    STRING_TYPE     reduce using rule 9 (sentencias -> while .)
    DOUBLE_TYPE     reduce using rule 9 (sentencias -> while .)
    BOOL_TYPE       reduce using rule 9 (sentencias -> while .)
    LIST            reduce using rule 9 (sentencias -> while .)
    MAP             reduce using rule 9 (sentencias -> while .)
    SET             reduce using rule 9 (sentencias -> while .)
    $end            reduce using rule 9 (sentencias -> while .)
    RKEY            reduce using rule 9 (sentencias -> while .)


state 10

    (10) sentencias -> do_while .

    VARIABLE        reduce using rule 10 (sentencias -> do_while .)
    PRINT           reduce using rule 10 (sentencias -> do_while .)
    IF              reduce using rule 10 (sentencias -> do_while .)
    RETURN          reduce using rule 10 (sentencias -> do_while .)
    WHILE           reduce using rule 10 (sentencias -> do_while .)
    DO              reduce using rule 10 (sentencias -> do_while .)
    FOR             reduce using rule 10 (sentencias -> do_while .)
    IMPORT          reduce using rule 10 (sentencias -> do_while .)
    VOID            reduce using rule 10 (sentencias -> do_while .)
    VAR_TYPE        reduce using rule 10 (sentencias -> do_while .)
    INT_TYPE        reduce using rule 10 (sentencias -> do_while .)
    STRING_TYPE     reduce using rule 10 (sentencias -> do_while .)
    DOUBLE_TYPE     reduce using rule 10 (sentencias -> do_while .)
    BOOL_TYPE       reduce using rule 10 (sentencias -> do_while .)
    LIST            reduce using rule 10 (sentencias -> do_while .)
    MAP             reduce using rule 10 (sentencias -> do_while .)
    SET             reduce using rule 10 (sentencias -> do_while .)
    $end            reduce using rule 10 (sentencias -> do_while .)
    RKEY            reduce using rule 10 (sentencias -> do_while .)


state 11

    (11) sentencias -> for .

    VARIABLE        reduce using rule 11 (sentencias -> for .)
    PRINT           reduce using rule 11 (sentencias -> for .)
    IF              reduce using rule 11 (sentencias -> for .)
    RETURN          reduce using rule 11 (sentencias -> for .)
    WHILE           reduce using rule 11 (sentencias -> for .)
    DO              reduce using rule 11 (sentencias -> for .)
    FOR             reduce using rule 11 (sentencias -> for .)
    IMPORT          reduce using rule 11 (sentencias -> for .)
    VOID            reduce using rule 11 (sentencias -> for .)
    VAR_TYPE        reduce using rule 11 (sentencias -> for .)
    INT_TYPE        reduce using rule 11 (sentencias -> for .)
    STRING_TYPE     reduce using rule 11 (sentencias -> for .)
    DOUBLE_TYPE     reduce using rule 11 (sentencias -> for .)
    BOOL_TYPE       reduce using rule 11 (sentencias -> for .)
    LIST            reduce using rule 11 (sentencias -> for .)
    MAP             reduce using rule 11 (sentencias -> for .)
    SET             reduce using rule 11 (sentencias -> for .)
    $end            reduce using rule 11 (sentencias -> for .)
    RKEY            reduce using rule 11 (sentencias -> for .)


state 12

    (12) sentencias -> import .

    VARIABLE        reduce using rule 12 (sentencias -> import .)
    PRINT           reduce using rule 12 (sentencias -> import .)
    IF              reduce using rule 12 (sentencias -> import .)
    RETURN          reduce using rule 12 (sentencias -> import .)
    WHILE           reduce using rule 12 (sentencias -> import .)
    DO              reduce using rule 12 (sentencias -> import .)
    FOR             reduce using rule 12 (sentencias -> import .)
    IMPORT          reduce using rule 12 (sentencias -> import .)
    VOID            reduce using rule 12 (sentencias -> import .)
    VAR_TYPE        reduce using rule 12 (sentencias -> import .)
    INT_TYPE        reduce using rule 12 (sentencias -> import .)
    STRING_TYPE     reduce using rule 12 (sentencias -> import .)
    DOUBLE_TYPE     reduce using rule 12 (sentencias -> import .)
    BOOL_TYPE       reduce using rule 12 (sentencias -> import .)
    LIST            reduce using rule 12 (sentencias -> import .)
    MAP             reduce using rule 12 (sentencias -> import .)
    SET             reduce using rule 12 (sentencias -> import .)
    $end            reduce using rule 12 (sentencias -> import .)
    RKEY            reduce using rule 12 (sentencias -> import .)


state 13

    (15) asignar_variable -> tipo_dato . VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> tipo_dato . VARIABLE SEMICOLON
    (13) funcion -> tipo_dato . VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> tipo_dato . VARIABLE LPAREN RPAREN LKEY programa RKEY

    VARIABLE        shift and go to state 32


state 14

    (17) cambiar_variable -> VARIABLE . modificador SEMICOLON
    (18) cambiar_variable -> VARIABLE . asignador expresion SEMICOLON
    (19) modificador -> . INCREMENT_VAR
    (20) modificador -> . DECREMENT_VAR
    (21) asignador -> . ASSIGN
    (22) asignador -> . PLUS_ASSIGN
    (23) asignador -> . MINUS_ASSIGN
    (24) asignador -> . TIMES_ASSIGN
    (25) asignador -> . DIVIDE_ASSIGN
    (26) asignador -> . MODULO_ASSIGN

    INCREMENT_VAR   shift and go to state 35
    DECREMENT_VAR   shift and go to state 36
    ASSIGN          shift and go to state 37
    PLUS_ASSIGN     shift and go to state 38
    MINUS_ASSIGN    shift and go to state 39
    TIMES_ASSIGN    shift and go to state 40
    DIVIDE_ASSIGN   shift and go to state 41
    MODULO_ASSIGN   shift and go to state 42

    modificador                    shift and go to state 33
    asignador                      shift and go to state 34

state 15

    (36) impresion -> PRINT . LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> PRINT . LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 43


state 16

    (93) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 44


state 17

    (33) retorno -> RETURN . SEMICOLON
    (34) retorno -> RETURN . operacion SEMICOLON
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    SEMICOLON       shift and go to state 45
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    operacion                      shift and go to state 46
    elemento                       shift and go to state 47

state 18

    (84) while -> WHILE . LPAREN comparacion_logica RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 53


state 19

    (85) do_while -> DO . LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    LKEY            shift and go to state 54


state 20

    (83) for -> FOR . LPAREN instruccion_for RPAREN LKEY programa RKEY

    LPAREN          shift and go to state 55


state 21

    (35) import -> IMPORT . STRING SEMICOLON

    STRING          shift and go to state 56


state 22

    (68) tipo_dato -> VOID .

    VARIABLE        reduce using rule 68 (tipo_dato -> VOID .)


state 23

    (69) tipo_dato -> VAR_TYPE .

    VARIABLE        reduce using rule 69 (tipo_dato -> VAR_TYPE .)


state 24

    (70) tipo_dato -> INT_TYPE .

    VARIABLE        reduce using rule 70 (tipo_dato -> INT_TYPE .)


state 25

    (71) tipo_dato -> STRING_TYPE .

    VARIABLE        reduce using rule 71 (tipo_dato -> STRING_TYPE .)


state 26

    (72) tipo_dato -> DOUBLE_TYPE .

    VARIABLE        reduce using rule 72 (tipo_dato -> DOUBLE_TYPE .)


state 27

    (73) tipo_dato -> BOOL_TYPE .

    VARIABLE        reduce using rule 73 (tipo_dato -> BOOL_TYPE .)


state 28

    (74) tipo_dato -> LIST . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 57


state 29

    (75) tipo_dato -> MAP . LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 58


state 30

    (76) tipo_dato -> SET . LESS_THAN tipo_coleccion GREATER_THAN

    LESS_THAN       shift and go to state 59


state 31

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)
    RKEY            reduce using rule 2 (programa -> sentencias programa .)


state 32

    (15) asignar_variable -> tipo_dato VARIABLE . asignador expresion SEMICOLON
    (16) asignar_variable -> tipo_dato VARIABLE . SEMICOLON
    (13) funcion -> tipo_dato VARIABLE . LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> tipo_dato VARIABLE . LPAREN RPAREN LKEY programa RKEY
    (21) asignador -> . ASSIGN
    (22) asignador -> . PLUS_ASSIGN
    (23) asignador -> . MINUS_ASSIGN
    (24) asignador -> . TIMES_ASSIGN
    (25) asignador -> . DIVIDE_ASSIGN
    (26) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 61
    LPAREN          shift and go to state 62
    ASSIGN          shift and go to state 37
    PLUS_ASSIGN     shift and go to state 38
    MINUS_ASSIGN    shift and go to state 39
    TIMES_ASSIGN    shift and go to state 40
    DIVIDE_ASSIGN   shift and go to state 41
    MODULO_ASSIGN   shift and go to state 42

    asignador                      shift and go to state 60

state 33

    (17) cambiar_variable -> VARIABLE modificador . SEMICOLON

    SEMICOLON       shift and go to state 63


state 34

    (18) cambiar_variable -> VARIABLE asignador . expresion SEMICOLON
    (27) expresion -> . operacion
    (28) expresion -> . comparacion
    (29) expresion -> . list
    (30) expresion -> . diccionario
    (31) expresion -> . set
    (32) expresion -> . input
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (45) comparacion -> . operacion comparador operacion
    (64) list -> . LBRACKETS element_list RBRACKETS
    (65) list -> . LBRACKETS RBRACKETS
    (86) diccionario -> . LKEY key_element_list RKEY
    (87) diccionario -> . LKEY RKEY
    (88) set -> . LKEY element_list RKEY
    (89) set -> . LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY
    (39) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    LBRACKETS       shift and go to state 71
    LKEY            shift and go to state 72
    LESS_THAN       shift and go to state 73
    STDIN           shift and go to state 74
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    expresion                      shift and go to state 64
    operacion                      shift and go to state 65
    comparacion                    shift and go to state 66
    list                           shift and go to state 67
    diccionario                    shift and go to state 68
    set                            shift and go to state 69
    input                          shift and go to state 70
    elemento                       shift and go to state 47

state 35

    (19) modificador -> INCREMENT_VAR .

    SEMICOLON       reduce using rule 19 (modificador -> INCREMENT_VAR .)
    RPAREN          reduce using rule 19 (modificador -> INCREMENT_VAR .)


state 36

    (20) modificador -> DECREMENT_VAR .

    SEMICOLON       reduce using rule 20 (modificador -> DECREMENT_VAR .)
    RPAREN          reduce using rule 20 (modificador -> DECREMENT_VAR .)


state 37

    (21) asignador -> ASSIGN .

    LBRACKETS       reduce using rule 21 (asignador -> ASSIGN .)
    LKEY            reduce using rule 21 (asignador -> ASSIGN .)
    LESS_THAN       reduce using rule 21 (asignador -> ASSIGN .)
    STDIN           reduce using rule 21 (asignador -> ASSIGN .)
    INT             reduce using rule 21 (asignador -> ASSIGN .)
    VARIABLE        reduce using rule 21 (asignador -> ASSIGN .)
    DOUBLE          reduce using rule 21 (asignador -> ASSIGN .)
    STRING          reduce using rule 21 (asignador -> ASSIGN .)
    BOOLEAN         reduce using rule 21 (asignador -> ASSIGN .)


state 38

    (22) asignador -> PLUS_ASSIGN .

    LBRACKETS       reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    LKEY            reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    LESS_THAN       reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    STDIN           reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    INT             reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    VARIABLE        reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    DOUBLE          reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    STRING          reduce using rule 22 (asignador -> PLUS_ASSIGN .)
    BOOLEAN         reduce using rule 22 (asignador -> PLUS_ASSIGN .)


state 39

    (23) asignador -> MINUS_ASSIGN .

    LBRACKETS       reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    LKEY            reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    LESS_THAN       reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    STDIN           reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    INT             reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    VARIABLE        reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    DOUBLE          reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    STRING          reduce using rule 23 (asignador -> MINUS_ASSIGN .)
    BOOLEAN         reduce using rule 23 (asignador -> MINUS_ASSIGN .)


state 40

    (24) asignador -> TIMES_ASSIGN .

    LBRACKETS       reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    LKEY            reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    LESS_THAN       reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    STDIN           reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    INT             reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    VARIABLE        reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    DOUBLE          reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    STRING          reduce using rule 24 (asignador -> TIMES_ASSIGN .)
    BOOLEAN         reduce using rule 24 (asignador -> TIMES_ASSIGN .)


state 41

    (25) asignador -> DIVIDE_ASSIGN .

    LBRACKETS       reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    LKEY            reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    LESS_THAN       reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    STDIN           reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    INT             reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    VARIABLE        reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    DOUBLE          reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)
    BOOLEAN         reduce using rule 25 (asignador -> DIVIDE_ASSIGN .)


state 42

    (26) asignador -> MODULO_ASSIGN .

    LBRACKETS       reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    LKEY            reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    LESS_THAN       reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    STDIN           reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    INT             reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    VARIABLE        reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    DOUBLE          reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    STRING          reduce using rule 26 (asignador -> MODULO_ASSIGN .)
    BOOLEAN         reduce using rule 26 (asignador -> MODULO_ASSIGN .)


state 43

    (36) impresion -> PRINT LPAREN . operacion RPAREN SEMICOLON
    (37) impresion -> PRINT LPAREN . comparacion_logica RPAREN SEMICOLON
    (38) impresion -> PRINT LPAREN . RPAREN SEMICOLON
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN
    (45) comparacion -> . operacion comparador operacion

    RPAREN          shift and go to state 76
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    operacion                      shift and go to state 75
    comparacion_logica             shift and go to state 77
    elemento                       shift and go to state 47
    comparacion                    shift and go to state 78

state 44

    (93) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion_logica             shift and go to state 79
    comparacion                    shift and go to state 78
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 45

    (33) retorno -> RETURN SEMICOLON .

    VARIABLE        reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    PRINT           reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    IF              reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    RETURN          reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    WHILE           reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    DO              reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    FOR             reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    IMPORT          reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    VOID            reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    VAR_TYPE        reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    INT_TYPE        reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    STRING_TYPE     reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    BOOL_TYPE       reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    LIST            reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    MAP             reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    SET             reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    $end            reduce using rule 33 (retorno -> RETURN SEMICOLON .)
    RKEY            reduce using rule 33 (retorno -> RETURN SEMICOLON .)


state 46

    (34) retorno -> RETURN operacion . SEMICOLON

    SEMICOLON       shift and go to state 81


state 47

    (57) operacion -> elemento .
    (58) operacion -> elemento . operador operacion
    (59) operador -> . PLUS
    (60) operador -> . MINUS
    (61) operador -> . TIMES
    (62) operador -> . DIVIDE
    (63) operador -> . MODULO

    SEMICOLON       reduce using rule 57 (operacion -> elemento .)
    EQUALITY        reduce using rule 57 (operacion -> elemento .)
    INEQUALITY      reduce using rule 57 (operacion -> elemento .)
    GREATER_THAN    reduce using rule 57 (operacion -> elemento .)
    LESS_THAN       reduce using rule 57 (operacion -> elemento .)
    GREATER_EQ_THAN reduce using rule 57 (operacion -> elemento .)
    LESS_EQ_THAN    reduce using rule 57 (operacion -> elemento .)
    RPAREN          reduce using rule 57 (operacion -> elemento .)
    AND             reduce using rule 57 (operacion -> elemento .)
    OR              reduce using rule 57 (operacion -> elemento .)
    NOT             reduce using rule 57 (operacion -> elemento .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 86
    MODULO          shift and go to state 87

    operador                       shift and go to state 82

state 48

    (40) elemento -> INT .

    PLUS            reduce using rule 40 (elemento -> INT .)
    MINUS           reduce using rule 40 (elemento -> INT .)
    TIMES           reduce using rule 40 (elemento -> INT .)
    DIVIDE          reduce using rule 40 (elemento -> INT .)
    MODULO          reduce using rule 40 (elemento -> INT .)
    SEMICOLON       reduce using rule 40 (elemento -> INT .)
    EQUALITY        reduce using rule 40 (elemento -> INT .)
    INEQUALITY      reduce using rule 40 (elemento -> INT .)
    GREATER_THAN    reduce using rule 40 (elemento -> INT .)
    LESS_THAN       reduce using rule 40 (elemento -> INT .)
    GREATER_EQ_THAN reduce using rule 40 (elemento -> INT .)
    LESS_EQ_THAN    reduce using rule 40 (elemento -> INT .)
    RPAREN          reduce using rule 40 (elemento -> INT .)
    COMA            reduce using rule 40 (elemento -> INT .)
    RBRACKETS       reduce using rule 40 (elemento -> INT .)
    DOS_PUNTOS      reduce using rule 40 (elemento -> INT .)
    RKEY            reduce using rule 40 (elemento -> INT .)
    AND             reduce using rule 40 (elemento -> INT .)
    OR              reduce using rule 40 (elemento -> INT .)
    NOT             reduce using rule 40 (elemento -> INT .)


state 49

    (41) elemento -> VARIABLE .

    PLUS            reduce using rule 41 (elemento -> VARIABLE .)
    MINUS           reduce using rule 41 (elemento -> VARIABLE .)
    TIMES           reduce using rule 41 (elemento -> VARIABLE .)
    DIVIDE          reduce using rule 41 (elemento -> VARIABLE .)
    MODULO          reduce using rule 41 (elemento -> VARIABLE .)
    SEMICOLON       reduce using rule 41 (elemento -> VARIABLE .)
    EQUALITY        reduce using rule 41 (elemento -> VARIABLE .)
    INEQUALITY      reduce using rule 41 (elemento -> VARIABLE .)
    GREATER_THAN    reduce using rule 41 (elemento -> VARIABLE .)
    LESS_THAN       reduce using rule 41 (elemento -> VARIABLE .)
    GREATER_EQ_THAN reduce using rule 41 (elemento -> VARIABLE .)
    LESS_EQ_THAN    reduce using rule 41 (elemento -> VARIABLE .)
    RPAREN          reduce using rule 41 (elemento -> VARIABLE .)
    COMA            reduce using rule 41 (elemento -> VARIABLE .)
    RBRACKETS       reduce using rule 41 (elemento -> VARIABLE .)
    DOS_PUNTOS      reduce using rule 41 (elemento -> VARIABLE .)
    RKEY            reduce using rule 41 (elemento -> VARIABLE .)
    AND             reduce using rule 41 (elemento -> VARIABLE .)
    OR              reduce using rule 41 (elemento -> VARIABLE .)
    NOT             reduce using rule 41 (elemento -> VARIABLE .)


state 50

    (42) elemento -> DOUBLE .

    PLUS            reduce using rule 42 (elemento -> DOUBLE .)
    MINUS           reduce using rule 42 (elemento -> DOUBLE .)
    TIMES           reduce using rule 42 (elemento -> DOUBLE .)
    DIVIDE          reduce using rule 42 (elemento -> DOUBLE .)
    MODULO          reduce using rule 42 (elemento -> DOUBLE .)
    SEMICOLON       reduce using rule 42 (elemento -> DOUBLE .)
    EQUALITY        reduce using rule 42 (elemento -> DOUBLE .)
    INEQUALITY      reduce using rule 42 (elemento -> DOUBLE .)
    GREATER_THAN    reduce using rule 42 (elemento -> DOUBLE .)
    LESS_THAN       reduce using rule 42 (elemento -> DOUBLE .)
    GREATER_EQ_THAN reduce using rule 42 (elemento -> DOUBLE .)
    LESS_EQ_THAN    reduce using rule 42 (elemento -> DOUBLE .)
    RPAREN          reduce using rule 42 (elemento -> DOUBLE .)
    COMA            reduce using rule 42 (elemento -> DOUBLE .)
    RBRACKETS       reduce using rule 42 (elemento -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 42 (elemento -> DOUBLE .)
    RKEY            reduce using rule 42 (elemento -> DOUBLE .)
    AND             reduce using rule 42 (elemento -> DOUBLE .)
    OR              reduce using rule 42 (elemento -> DOUBLE .)
    NOT             reduce using rule 42 (elemento -> DOUBLE .)


state 51

    (43) elemento -> STRING .

    PLUS            reduce using rule 43 (elemento -> STRING .)
    MINUS           reduce using rule 43 (elemento -> STRING .)
    TIMES           reduce using rule 43 (elemento -> STRING .)
    DIVIDE          reduce using rule 43 (elemento -> STRING .)
    MODULO          reduce using rule 43 (elemento -> STRING .)
    SEMICOLON       reduce using rule 43 (elemento -> STRING .)
    EQUALITY        reduce using rule 43 (elemento -> STRING .)
    INEQUALITY      reduce using rule 43 (elemento -> STRING .)
    GREATER_THAN    reduce using rule 43 (elemento -> STRING .)
    LESS_THAN       reduce using rule 43 (elemento -> STRING .)
    GREATER_EQ_THAN reduce using rule 43 (elemento -> STRING .)
    LESS_EQ_THAN    reduce using rule 43 (elemento -> STRING .)
    RPAREN          reduce using rule 43 (elemento -> STRING .)
    COMA            reduce using rule 43 (elemento -> STRING .)
    RBRACKETS       reduce using rule 43 (elemento -> STRING .)
    DOS_PUNTOS      reduce using rule 43 (elemento -> STRING .)
    RKEY            reduce using rule 43 (elemento -> STRING .)
    AND             reduce using rule 43 (elemento -> STRING .)
    OR              reduce using rule 43 (elemento -> STRING .)
    NOT             reduce using rule 43 (elemento -> STRING .)


state 52

    (44) elemento -> BOOLEAN .

    PLUS            reduce using rule 44 (elemento -> BOOLEAN .)
    MINUS           reduce using rule 44 (elemento -> BOOLEAN .)
    TIMES           reduce using rule 44 (elemento -> BOOLEAN .)
    DIVIDE          reduce using rule 44 (elemento -> BOOLEAN .)
    MODULO          reduce using rule 44 (elemento -> BOOLEAN .)
    SEMICOLON       reduce using rule 44 (elemento -> BOOLEAN .)
    EQUALITY        reduce using rule 44 (elemento -> BOOLEAN .)
    INEQUALITY      reduce using rule 44 (elemento -> BOOLEAN .)
    GREATER_THAN    reduce using rule 44 (elemento -> BOOLEAN .)
    LESS_THAN       reduce using rule 44 (elemento -> BOOLEAN .)
    GREATER_EQ_THAN reduce using rule 44 (elemento -> BOOLEAN .)
    LESS_EQ_THAN    reduce using rule 44 (elemento -> BOOLEAN .)
    RPAREN          reduce using rule 44 (elemento -> BOOLEAN .)
    COMA            reduce using rule 44 (elemento -> BOOLEAN .)
    RBRACKETS       reduce using rule 44 (elemento -> BOOLEAN .)
    DOS_PUNTOS      reduce using rule 44 (elemento -> BOOLEAN .)
    RKEY            reduce using rule 44 (elemento -> BOOLEAN .)
    AND             reduce using rule 44 (elemento -> BOOLEAN .)
    OR              reduce using rule 44 (elemento -> BOOLEAN .)
    NOT             reduce using rule 44 (elemento -> BOOLEAN .)


state 53

    (84) while -> WHILE LPAREN . comparacion_logica RPAREN LKEY programa RKEY
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion_logica             shift and go to state 88
    comparacion                    shift and go to state 78
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 54

    (85) do_while -> DO LKEY . programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 89
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 55

    (83) for -> FOR LPAREN . instruccion_for RPAREN LKEY programa RKEY
    (81) instruccion_for -> . asignar_variable comparacion_logica SEMICOLON VARIABLE asignador expresion
    (82) instruccion_for -> . asignar_variable comparacion_logica SEMICOLON VARIABLE modificador
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    instruccion_for                shift and go to state 90
    asignar_variable               shift and go to state 91
    tipo_dato                      shift and go to state 92

state 56

    (35) import -> IMPORT STRING . SEMICOLON

    SEMICOLON       shift and go to state 93


state 57

    (74) tipo_dato -> LIST LESS_THAN . tipo_coleccion GREATER_THAN
    (77) tipo_coleccion -> . INT_TYPE
    (78) tipo_coleccion -> . STRING_TYPE
    (79) tipo_coleccion -> . DOUBLE_TYPE
    (80) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 95
    STRING_TYPE     shift and go to state 96
    DOUBLE_TYPE     shift and go to state 97
    BOOL_TYPE       shift and go to state 98

    tipo_coleccion                 shift and go to state 94

state 58

    (75) tipo_dato -> MAP LESS_THAN . tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (77) tipo_coleccion -> . INT_TYPE
    (78) tipo_coleccion -> . STRING_TYPE
    (79) tipo_coleccion -> . DOUBLE_TYPE
    (80) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 95
    STRING_TYPE     shift and go to state 96
    DOUBLE_TYPE     shift and go to state 97
    BOOL_TYPE       shift and go to state 98

    tipo_coleccion                 shift and go to state 99

state 59

    (76) tipo_dato -> SET LESS_THAN . tipo_coleccion GREATER_THAN
    (77) tipo_coleccion -> . INT_TYPE
    (78) tipo_coleccion -> . STRING_TYPE
    (79) tipo_coleccion -> . DOUBLE_TYPE
    (80) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 95
    STRING_TYPE     shift and go to state 96
    DOUBLE_TYPE     shift and go to state 97
    BOOL_TYPE       shift and go to state 98

    tipo_coleccion                 shift and go to state 100

state 60

    (15) asignar_variable -> tipo_dato VARIABLE asignador . expresion SEMICOLON
    (27) expresion -> . operacion
    (28) expresion -> . comparacion
    (29) expresion -> . list
    (30) expresion -> . diccionario
    (31) expresion -> . set
    (32) expresion -> . input
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (45) comparacion -> . operacion comparador operacion
    (64) list -> . LBRACKETS element_list RBRACKETS
    (65) list -> . LBRACKETS RBRACKETS
    (86) diccionario -> . LKEY key_element_list RKEY
    (87) diccionario -> . LKEY RKEY
    (88) set -> . LKEY element_list RKEY
    (89) set -> . LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY
    (39) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    LBRACKETS       shift and go to state 71
    LKEY            shift and go to state 72
    LESS_THAN       shift and go to state 73
    STDIN           shift and go to state 74
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    expresion                      shift and go to state 101
    operacion                      shift and go to state 65
    comparacion                    shift and go to state 66
    list                           shift and go to state 67
    diccionario                    shift and go to state 68
    set                            shift and go to state 69
    input                          shift and go to state 70
    elemento                       shift and go to state 47

state 61

    (16) asignar_variable -> tipo_dato VARIABLE SEMICOLON .

    VARIABLE        reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    PRINT           reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    IF              reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RETURN          reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    WHILE           reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DO              reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    FOR             reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    IMPORT          reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VOID            reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    VAR_TYPE        reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    INT_TYPE        reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    STRING_TYPE     reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    BOOL_TYPE       reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    LIST            reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    MAP             reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    SET             reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    $end            reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    RKEY            reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    INT             reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    DOUBLE          reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    STRING          reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)
    BOOLEAN         reduce using rule 16 (asignar_variable -> tipo_dato VARIABLE SEMICOLON .)


state 62

    (13) funcion -> tipo_dato VARIABLE LPAREN . parametros RPAREN LKEY programa RKEY
    (14) funcion -> tipo_dato VARIABLE LPAREN . RPAREN LKEY programa RKEY
    (97) parametros -> . tipo_dato VARIABLE
    (98) parametros -> . tipo_dato VARIABLE COMA parametros
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    RPAREN          shift and go to state 104
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    tipo_dato                      shift and go to state 102
    parametros                     shift and go to state 103

state 63

    (17) cambiar_variable -> VARIABLE modificador SEMICOLON .

    VARIABLE        reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    PRINT           reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    IF              reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    RETURN          reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    WHILE           reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    DO              reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    FOR             reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    IMPORT          reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    VOID            reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    VAR_TYPE        reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    INT_TYPE        reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    STRING_TYPE     reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    BOOL_TYPE       reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    LIST            reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    MAP             reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    SET             reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    $end            reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)
    RKEY            reduce using rule 17 (cambiar_variable -> VARIABLE modificador SEMICOLON .)


state 64

    (18) cambiar_variable -> VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 105


state 65

    (27) expresion -> operacion .
    (45) comparacion -> operacion . comparador operacion
    (51) comparador -> . EQUALITY
    (52) comparador -> . INEQUALITY
    (53) comparador -> . GREATER_THAN
    (54) comparador -> . LESS_THAN
    (55) comparador -> . GREATER_EQ_THAN
    (56) comparador -> . LESS_EQ_THAN

    SEMICOLON       reduce using rule 27 (expresion -> operacion .)
    RPAREN          reduce using rule 27 (expresion -> operacion .)
    EQUALITY        shift and go to state 107
    INEQUALITY      shift and go to state 108
    GREATER_THAN    shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_EQ_THAN shift and go to state 111
    LESS_EQ_THAN    shift and go to state 112

    comparador                     shift and go to state 106

state 66

    (28) expresion -> comparacion .

    SEMICOLON       reduce using rule 28 (expresion -> comparacion .)
    RPAREN          reduce using rule 28 (expresion -> comparacion .)


state 67

    (29) expresion -> list .

    SEMICOLON       reduce using rule 29 (expresion -> list .)
    RPAREN          reduce using rule 29 (expresion -> list .)


state 68

    (30) expresion -> diccionario .

    SEMICOLON       reduce using rule 30 (expresion -> diccionario .)
    RPAREN          reduce using rule 30 (expresion -> diccionario .)


state 69

    (31) expresion -> set .

    SEMICOLON       reduce using rule 31 (expresion -> set .)
    RPAREN          reduce using rule 31 (expresion -> set .)


state 70

    (32) expresion -> input .

    SEMICOLON       reduce using rule 32 (expresion -> input .)
    RPAREN          reduce using rule 32 (expresion -> input .)


state 71

    (64) list -> LBRACKETS . element_list RBRACKETS
    (65) list -> LBRACKETS . RBRACKETS
    (66) element_list -> . elemento
    (67) element_list -> . elemento COMA element_list
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    RBRACKETS       shift and go to state 114
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    element_list                   shift and go to state 113
    elemento                       shift and go to state 115

state 72

    (86) diccionario -> LKEY . key_element_list RKEY
    (87) diccionario -> LKEY . RKEY
    (88) set -> LKEY . element_list RKEY
    (91) key_element_list -> . key_element
    (92) key_element_list -> . key_element COMA key_element_list
    (66) element_list -> . elemento
    (67) element_list -> . elemento COMA element_list
    (90) key_element -> . elemento DOS_PUNTOS elemento
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    RKEY            shift and go to state 117
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    key_element_list               shift and go to state 116
    element_list                   shift and go to state 118
    key_element                    shift and go to state 119
    elemento                       shift and go to state 120

state 73

    (89) set -> LESS_THAN . tipo_coleccion GREATER_THAN LKEY RKEY
    (77) tipo_coleccion -> . INT_TYPE
    (78) tipo_coleccion -> . STRING_TYPE
    (79) tipo_coleccion -> . DOUBLE_TYPE
    (80) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 95
    STRING_TYPE     shift and go to state 96
    DOUBLE_TYPE     shift and go to state 97
    BOOL_TYPE       shift and go to state 98

    tipo_coleccion                 shift and go to state 121

state 74

    (39) input -> STDIN . DOT READLINESYNC LPAREN RPAREN

    DOT             shift and go to state 122


state 75

    (36) impresion -> PRINT LPAREN operacion . RPAREN SEMICOLON
    (45) comparacion -> operacion . comparador operacion
    (51) comparador -> . EQUALITY
    (52) comparador -> . INEQUALITY
    (53) comparador -> . GREATER_THAN
    (54) comparador -> . LESS_THAN
    (55) comparador -> . GREATER_EQ_THAN
    (56) comparador -> . LESS_EQ_THAN

    RPAREN          shift and go to state 123
    EQUALITY        shift and go to state 107
    INEQUALITY      shift and go to state 108
    GREATER_THAN    shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_EQ_THAN shift and go to state 111
    LESS_EQ_THAN    shift and go to state 112

    comparador                     shift and go to state 106

state 76

    (38) impresion -> PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 124


state 77

    (37) impresion -> PRINT LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 125


state 78

    (46) comparacion_logica -> comparacion .
    (47) comparacion_logica -> comparacion . operador_logico comparacion_logica
    (48) operador_logico -> . AND
    (49) operador_logico -> . OR
    (50) operador_logico -> . NOT

    RPAREN          reduce using rule 46 (comparacion_logica -> comparacion .)
    SEMICOLON       reduce using rule 46 (comparacion_logica -> comparacion .)
    AND             shift and go to state 127
    OR              shift and go to state 128
    NOT             shift and go to state 129

    operador_logico                shift and go to state 126

state 79

    (93) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 130


state 80

    (45) comparacion -> operacion . comparador operacion
    (51) comparador -> . EQUALITY
    (52) comparador -> . INEQUALITY
    (53) comparador -> . GREATER_THAN
    (54) comparador -> . LESS_THAN
    (55) comparador -> . GREATER_EQ_THAN
    (56) comparador -> . LESS_EQ_THAN

    EQUALITY        shift and go to state 107
    INEQUALITY      shift and go to state 108
    GREATER_THAN    shift and go to state 109
    LESS_THAN       shift and go to state 110
    GREATER_EQ_THAN shift and go to state 111
    LESS_EQ_THAN    shift and go to state 112

    comparador                     shift and go to state 106

state 81

    (34) retorno -> RETURN operacion SEMICOLON .

    VARIABLE        reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    PRINT           reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    IF              reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    RETURN          reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    WHILE           reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    DO              reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    FOR             reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    IMPORT          reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    VOID            reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    VAR_TYPE        reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    INT_TYPE        reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    STRING_TYPE     reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    BOOL_TYPE       reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    LIST            reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    MAP             reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    SET             reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    $end            reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)
    RKEY            reduce using rule 34 (retorno -> RETURN operacion SEMICOLON .)


state 82

    (58) operacion -> elemento operador . operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    elemento                       shift and go to state 47
    operacion                      shift and go to state 131

state 83

    (59) operador -> PLUS .

    INT             reduce using rule 59 (operador -> PLUS .)
    VARIABLE        reduce using rule 59 (operador -> PLUS .)
    DOUBLE          reduce using rule 59 (operador -> PLUS .)
    STRING          reduce using rule 59 (operador -> PLUS .)
    BOOLEAN         reduce using rule 59 (operador -> PLUS .)


state 84

    (60) operador -> MINUS .

    INT             reduce using rule 60 (operador -> MINUS .)
    VARIABLE        reduce using rule 60 (operador -> MINUS .)
    DOUBLE          reduce using rule 60 (operador -> MINUS .)
    STRING          reduce using rule 60 (operador -> MINUS .)
    BOOLEAN         reduce using rule 60 (operador -> MINUS .)


state 85

    (61) operador -> TIMES .

    INT             reduce using rule 61 (operador -> TIMES .)
    VARIABLE        reduce using rule 61 (operador -> TIMES .)
    DOUBLE          reduce using rule 61 (operador -> TIMES .)
    STRING          reduce using rule 61 (operador -> TIMES .)
    BOOLEAN         reduce using rule 61 (operador -> TIMES .)


state 86

    (62) operador -> DIVIDE .

    INT             reduce using rule 62 (operador -> DIVIDE .)
    VARIABLE        reduce using rule 62 (operador -> DIVIDE .)
    DOUBLE          reduce using rule 62 (operador -> DIVIDE .)
    STRING          reduce using rule 62 (operador -> DIVIDE .)
    BOOLEAN         reduce using rule 62 (operador -> DIVIDE .)


state 87

    (63) operador -> MODULO .

    INT             reduce using rule 63 (operador -> MODULO .)
    VARIABLE        reduce using rule 63 (operador -> MODULO .)
    DOUBLE          reduce using rule 63 (operador -> MODULO .)
    STRING          reduce using rule 63 (operador -> MODULO .)
    BOOLEAN         reduce using rule 63 (operador -> MODULO .)


state 88

    (84) while -> WHILE LPAREN comparacion_logica . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 132


state 89

    (85) do_while -> DO LKEY programa . RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    RKEY            shift and go to state 133


state 90

    (83) for -> FOR LPAREN instruccion_for . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 134


state 91

    (81) instruccion_for -> asignar_variable . comparacion_logica SEMICOLON VARIABLE asignador expresion
    (82) instruccion_for -> asignar_variable . comparacion_logica SEMICOLON VARIABLE modificador
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion_logica             shift and go to state 135
    comparacion                    shift and go to state 78
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 92

    (15) asignar_variable -> tipo_dato . VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> tipo_dato . VARIABLE SEMICOLON

    VARIABLE        shift and go to state 136


state 93

    (35) import -> IMPORT STRING SEMICOLON .

    VARIABLE        reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    PRINT           reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    IF              reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    RETURN          reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    WHILE           reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    DO              reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    FOR             reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    IMPORT          reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    VOID            reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    VAR_TYPE        reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    INT_TYPE        reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    STRING_TYPE     reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    BOOL_TYPE       reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    LIST            reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    MAP             reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    SET             reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    $end            reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)
    RKEY            reduce using rule 35 (import -> IMPORT STRING SEMICOLON .)


state 94

    (74) tipo_dato -> LIST LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 137


state 95

    (77) tipo_coleccion -> INT_TYPE .

    GREATER_THAN    reduce using rule 77 (tipo_coleccion -> INT_TYPE .)
    COMA            reduce using rule 77 (tipo_coleccion -> INT_TYPE .)


state 96

    (78) tipo_coleccion -> STRING_TYPE .

    GREATER_THAN    reduce using rule 78 (tipo_coleccion -> STRING_TYPE .)
    COMA            reduce using rule 78 (tipo_coleccion -> STRING_TYPE .)


state 97

    (79) tipo_coleccion -> DOUBLE_TYPE .

    GREATER_THAN    reduce using rule 79 (tipo_coleccion -> DOUBLE_TYPE .)
    COMA            reduce using rule 79 (tipo_coleccion -> DOUBLE_TYPE .)


state 98

    (80) tipo_coleccion -> BOOL_TYPE .

    GREATER_THAN    reduce using rule 80 (tipo_coleccion -> BOOL_TYPE .)
    COMA            reduce using rule 80 (tipo_coleccion -> BOOL_TYPE .)


state 99

    (75) tipo_dato -> MAP LESS_THAN tipo_coleccion . COMA tipo_coleccion GREATER_THAN

    COMA            shift and go to state 138


state 100

    (76) tipo_dato -> SET LESS_THAN tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 139


state 101

    (15) asignar_variable -> tipo_dato VARIABLE asignador expresion . SEMICOLON

    SEMICOLON       shift and go to state 140


state 102

    (97) parametros -> tipo_dato . VARIABLE
    (98) parametros -> tipo_dato . VARIABLE COMA parametros

    VARIABLE        shift and go to state 141


state 103

    (13) funcion -> tipo_dato VARIABLE LPAREN parametros . RPAREN LKEY programa RKEY

    RPAREN          shift and go to state 142


state 104

    (14) funcion -> tipo_dato VARIABLE LPAREN RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 143


state 105

    (18) cambiar_variable -> VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    FOR             reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    SET             reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 18 (cambiar_variable -> VARIABLE asignador expresion SEMICOLON .)


state 106

    (45) comparacion -> operacion comparador . operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    operacion                      shift and go to state 144
    elemento                       shift and go to state 47

state 107

    (51) comparador -> EQUALITY .

    INT             reduce using rule 51 (comparador -> EQUALITY .)
    VARIABLE        reduce using rule 51 (comparador -> EQUALITY .)
    DOUBLE          reduce using rule 51 (comparador -> EQUALITY .)
    STRING          reduce using rule 51 (comparador -> EQUALITY .)
    BOOLEAN         reduce using rule 51 (comparador -> EQUALITY .)


state 108

    (52) comparador -> INEQUALITY .

    INT             reduce using rule 52 (comparador -> INEQUALITY .)
    VARIABLE        reduce using rule 52 (comparador -> INEQUALITY .)
    DOUBLE          reduce using rule 52 (comparador -> INEQUALITY .)
    STRING          reduce using rule 52 (comparador -> INEQUALITY .)
    BOOLEAN         reduce using rule 52 (comparador -> INEQUALITY .)


state 109

    (53) comparador -> GREATER_THAN .

    INT             reduce using rule 53 (comparador -> GREATER_THAN .)
    VARIABLE        reduce using rule 53 (comparador -> GREATER_THAN .)
    DOUBLE          reduce using rule 53 (comparador -> GREATER_THAN .)
    STRING          reduce using rule 53 (comparador -> GREATER_THAN .)
    BOOLEAN         reduce using rule 53 (comparador -> GREATER_THAN .)


state 110

    (54) comparador -> LESS_THAN .

    INT             reduce using rule 54 (comparador -> LESS_THAN .)
    VARIABLE        reduce using rule 54 (comparador -> LESS_THAN .)
    DOUBLE          reduce using rule 54 (comparador -> LESS_THAN .)
    STRING          reduce using rule 54 (comparador -> LESS_THAN .)
    BOOLEAN         reduce using rule 54 (comparador -> LESS_THAN .)


state 111

    (55) comparador -> GREATER_EQ_THAN .

    INT             reduce using rule 55 (comparador -> GREATER_EQ_THAN .)
    VARIABLE        reduce using rule 55 (comparador -> GREATER_EQ_THAN .)
    DOUBLE          reduce using rule 55 (comparador -> GREATER_EQ_THAN .)
    STRING          reduce using rule 55 (comparador -> GREATER_EQ_THAN .)
    BOOLEAN         reduce using rule 55 (comparador -> GREATER_EQ_THAN .)


state 112

    (56) comparador -> LESS_EQ_THAN .

    INT             reduce using rule 56 (comparador -> LESS_EQ_THAN .)
    VARIABLE        reduce using rule 56 (comparador -> LESS_EQ_THAN .)
    DOUBLE          reduce using rule 56 (comparador -> LESS_EQ_THAN .)
    STRING          reduce using rule 56 (comparador -> LESS_EQ_THAN .)
    BOOLEAN         reduce using rule 56 (comparador -> LESS_EQ_THAN .)


state 113

    (64) list -> LBRACKETS element_list . RBRACKETS

    RBRACKETS       shift and go to state 145


state 114

    (65) list -> LBRACKETS RBRACKETS .

    SEMICOLON       reduce using rule 65 (list -> LBRACKETS RBRACKETS .)
    RPAREN          reduce using rule 65 (list -> LBRACKETS RBRACKETS .)


state 115

    (66) element_list -> elemento .
    (67) element_list -> elemento . COMA element_list

    RBRACKETS       reduce using rule 66 (element_list -> elemento .)
    RKEY            reduce using rule 66 (element_list -> elemento .)
    COMA            shift and go to state 146


state 116

    (86) diccionario -> LKEY key_element_list . RKEY

    RKEY            shift and go to state 147


state 117

    (87) diccionario -> LKEY RKEY .

    SEMICOLON       reduce using rule 87 (diccionario -> LKEY RKEY .)
    RPAREN          reduce using rule 87 (diccionario -> LKEY RKEY .)


state 118

    (88) set -> LKEY element_list . RKEY

    RKEY            shift and go to state 148


state 119

    (91) key_element_list -> key_element .
    (92) key_element_list -> key_element . COMA key_element_list

    RKEY            reduce using rule 91 (key_element_list -> key_element .)
    COMA            shift and go to state 149


state 120

    (66) element_list -> elemento .
    (67) element_list -> elemento . COMA element_list
    (90) key_element -> elemento . DOS_PUNTOS elemento

    RKEY            reduce using rule 66 (element_list -> elemento .)
    COMA            shift and go to state 146
    DOS_PUNTOS      shift and go to state 150


state 121

    (89) set -> LESS_THAN tipo_coleccion . GREATER_THAN LKEY RKEY

    GREATER_THAN    shift and go to state 151


state 122

    (39) input -> STDIN DOT . READLINESYNC LPAREN RPAREN

    READLINESYNC    shift and go to state 152


state 123

    (36) impresion -> PRINT LPAREN operacion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 124

    (38) impresion -> PRINT LPAREN RPAREN SEMICOLON .

    VARIABLE        reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    PRINT           reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DO              reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    FOR             reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    IMPORT          reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VOID            reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    LIST            reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    MAP             reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    SET             reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)
    RKEY            reduce using rule 38 (impresion -> PRINT LPAREN RPAREN SEMICOLON .)


state 125

    (37) impresion -> PRINT LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 154


state 126

    (47) comparacion_logica -> comparacion operador_logico . comparacion_logica
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion                    shift and go to state 78
    comparacion_logica             shift and go to state 155
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 127

    (48) operador_logico -> AND .

    INT             reduce using rule 48 (operador_logico -> AND .)
    VARIABLE        reduce using rule 48 (operador_logico -> AND .)
    DOUBLE          reduce using rule 48 (operador_logico -> AND .)
    STRING          reduce using rule 48 (operador_logico -> AND .)
    BOOLEAN         reduce using rule 48 (operador_logico -> AND .)


state 128

    (49) operador_logico -> OR .

    INT             reduce using rule 49 (operador_logico -> OR .)
    VARIABLE        reduce using rule 49 (operador_logico -> OR .)
    DOUBLE          reduce using rule 49 (operador_logico -> OR .)
    STRING          reduce using rule 49 (operador_logico -> OR .)
    BOOLEAN         reduce using rule 49 (operador_logico -> OR .)


state 129

    (50) operador_logico -> NOT .

    INT             reduce using rule 50 (operador_logico -> NOT .)
    VARIABLE        reduce using rule 50 (operador_logico -> NOT .)
    DOUBLE          reduce using rule 50 (operador_logico -> NOT .)
    STRING          reduce using rule 50 (operador_logico -> NOT .)
    BOOLEAN         reduce using rule 50 (operador_logico -> NOT .)


state 130

    (93) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else
    (94) condicional -> IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 156


state 131

    (58) operacion -> elemento operador operacion .

    SEMICOLON       reduce using rule 58 (operacion -> elemento operador operacion .)
    EQUALITY        reduce using rule 58 (operacion -> elemento operador operacion .)
    INEQUALITY      reduce using rule 58 (operacion -> elemento operador operacion .)
    GREATER_THAN    reduce using rule 58 (operacion -> elemento operador operacion .)
    LESS_THAN       reduce using rule 58 (operacion -> elemento operador operacion .)
    GREATER_EQ_THAN reduce using rule 58 (operacion -> elemento operador operacion .)
    LESS_EQ_THAN    reduce using rule 58 (operacion -> elemento operador operacion .)
    RPAREN          reduce using rule 58 (operacion -> elemento operador operacion .)
    AND             reduce using rule 58 (operacion -> elemento operador operacion .)
    OR              reduce using rule 58 (operacion -> elemento operador operacion .)
    NOT             reduce using rule 58 (operacion -> elemento operador operacion .)


state 132

    (84) while -> WHILE LPAREN comparacion_logica RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 157


state 133

    (85) do_while -> DO LKEY programa RKEY . WHILE LPAREN comparacion_logica RPAREN SEMICOLON

    WHILE           shift and go to state 158


state 134

    (83) for -> FOR LPAREN instruccion_for RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 159


state 135

    (81) instruccion_for -> asignar_variable comparacion_logica . SEMICOLON VARIABLE asignador expresion
    (82) instruccion_for -> asignar_variable comparacion_logica . SEMICOLON VARIABLE modificador

    SEMICOLON       shift and go to state 160


state 136

    (15) asignar_variable -> tipo_dato VARIABLE . asignador expresion SEMICOLON
    (16) asignar_variable -> tipo_dato VARIABLE . SEMICOLON
    (21) asignador -> . ASSIGN
    (22) asignador -> . PLUS_ASSIGN
    (23) asignador -> . MINUS_ASSIGN
    (24) asignador -> . TIMES_ASSIGN
    (25) asignador -> . DIVIDE_ASSIGN
    (26) asignador -> . MODULO_ASSIGN

    SEMICOLON       shift and go to state 61
    ASSIGN          shift and go to state 37
    PLUS_ASSIGN     shift and go to state 38
    MINUS_ASSIGN    shift and go to state 39
    TIMES_ASSIGN    shift and go to state 40
    DIVIDE_ASSIGN   shift and go to state 41
    MODULO_ASSIGN   shift and go to state 42

    asignador                      shift and go to state 60

state 137

    (74) tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 74 (tipo_dato -> LIST LESS_THAN tipo_coleccion GREATER_THAN .)


state 138

    (75) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA . tipo_coleccion GREATER_THAN
    (77) tipo_coleccion -> . INT_TYPE
    (78) tipo_coleccion -> . STRING_TYPE
    (79) tipo_coleccion -> . DOUBLE_TYPE
    (80) tipo_coleccion -> . BOOL_TYPE

    INT_TYPE        shift and go to state 95
    STRING_TYPE     shift and go to state 96
    DOUBLE_TYPE     shift and go to state 97
    BOOL_TYPE       shift and go to state 98

    tipo_coleccion                 shift and go to state 161

state 139

    (76) tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 76 (tipo_dato -> SET LESS_THAN tipo_coleccion GREATER_THAN .)


state 140

    (15) asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .

    VARIABLE        reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    PRINT           reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    IF              reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RETURN          reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    WHILE           reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DO              reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    FOR             reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    IMPORT          reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VOID            reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    VAR_TYPE        reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    INT_TYPE        reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    STRING_TYPE     reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    BOOL_TYPE       reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    LIST            reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    MAP             reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    SET             reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    $end            reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    RKEY            reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    INT             reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    DOUBLE          reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    STRING          reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)
    BOOLEAN         reduce using rule 15 (asignar_variable -> tipo_dato VARIABLE asignador expresion SEMICOLON .)


state 141

    (97) parametros -> tipo_dato VARIABLE .
    (98) parametros -> tipo_dato VARIABLE . COMA parametros

    RPAREN          reduce using rule 97 (parametros -> tipo_dato VARIABLE .)
    COMA            shift and go to state 162


state 142

    (13) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN . LKEY programa RKEY

    LKEY            shift and go to state 163


state 143

    (14) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    tipo_dato                      shift and go to state 13
    programa                       shift and go to state 164
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12

state 144

    (45) comparacion -> operacion comparador operacion .

    SEMICOLON       reduce using rule 45 (comparacion -> operacion comparador operacion .)
    AND             reduce using rule 45 (comparacion -> operacion comparador operacion .)
    OR              reduce using rule 45 (comparacion -> operacion comparador operacion .)
    NOT             reduce using rule 45 (comparacion -> operacion comparador operacion .)
    RPAREN          reduce using rule 45 (comparacion -> operacion comparador operacion .)


state 145

    (64) list -> LBRACKETS element_list RBRACKETS .

    SEMICOLON       reduce using rule 64 (list -> LBRACKETS element_list RBRACKETS .)
    RPAREN          reduce using rule 64 (list -> LBRACKETS element_list RBRACKETS .)


state 146

    (67) element_list -> elemento COMA . element_list
    (66) element_list -> . elemento
    (67) element_list -> . elemento COMA element_list
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    elemento                       shift and go to state 115
    element_list                   shift and go to state 165

state 147

    (86) diccionario -> LKEY key_element_list RKEY .

    SEMICOLON       reduce using rule 86 (diccionario -> LKEY key_element_list RKEY .)
    RPAREN          reduce using rule 86 (diccionario -> LKEY key_element_list RKEY .)


state 148

    (88) set -> LKEY element_list RKEY .

    SEMICOLON       reduce using rule 88 (set -> LKEY element_list RKEY .)
    RPAREN          reduce using rule 88 (set -> LKEY element_list RKEY .)


state 149

    (92) key_element_list -> key_element COMA . key_element_list
    (91) key_element_list -> . key_element
    (92) key_element_list -> . key_element COMA key_element_list
    (90) key_element -> . elemento DOS_PUNTOS elemento
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    key_element                    shift and go to state 119
    key_element_list               shift and go to state 166
    elemento                       shift and go to state 167

state 150

    (90) key_element -> elemento DOS_PUNTOS . elemento
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    elemento                       shift and go to state 168

state 151

    (89) set -> LESS_THAN tipo_coleccion GREATER_THAN . LKEY RKEY

    LKEY            shift and go to state 169


state 152

    (39) input -> STDIN DOT READLINESYNC . LPAREN RPAREN

    LPAREN          shift and go to state 170


state 153

    (36) impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .

    VARIABLE        reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    PRINT           reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IF              reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RETURN          reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    WHILE           reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DO              reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    FOR             reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    IMPORT          reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VOID            reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    LIST            reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    MAP             reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    SET             reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    $end            reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)
    RKEY            reduce using rule 36 (impresion -> PRINT LPAREN operacion RPAREN SEMICOLON .)


state 154

    (37) impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    IMPORT          reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 37 (impresion -> PRINT LPAREN comparacion_logica RPAREN SEMICOLON .)


state 155

    (47) comparacion_logica -> comparacion operador_logico comparacion_logica .

    RPAREN          reduce using rule 47 (comparacion_logica -> comparacion operador_logico comparacion_logica .)
    SEMICOLON       reduce using rule 47 (comparacion_logica -> comparacion operador_logico comparacion_logica .)


state 156

    (93) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (94) condicional -> IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 171
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 157

    (84) while -> WHILE LPAREN comparacion_logica RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 172
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 158

    (85) do_while -> DO LKEY programa RKEY WHILE . LPAREN comparacion_logica RPAREN SEMICOLON

    LPAREN          shift and go to state 173


state 159

    (83) for -> FOR LPAREN instruccion_for RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 174
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 160

    (81) instruccion_for -> asignar_variable comparacion_logica SEMICOLON . VARIABLE asignador expresion
    (82) instruccion_for -> asignar_variable comparacion_logica SEMICOLON . VARIABLE modificador

    VARIABLE        shift and go to state 175


state 161

    (75) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion . GREATER_THAN

    GREATER_THAN    shift and go to state 176


state 162

    (98) parametros -> tipo_dato VARIABLE COMA . parametros
    (97) parametros -> . tipo_dato VARIABLE
    (98) parametros -> . tipo_dato VARIABLE COMA parametros
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    tipo_dato                      shift and go to state 102
    parametros                     shift and go to state 177

state 163

    (13) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    tipo_dato                      shift and go to state 13
    programa                       shift and go to state 178
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12

state 164

    (14) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 179


state 165

    (67) element_list -> elemento COMA element_list .

    RBRACKETS       reduce using rule 67 (element_list -> elemento COMA element_list .)
    RKEY            reduce using rule 67 (element_list -> elemento COMA element_list .)


state 166

    (92) key_element_list -> key_element COMA key_element_list .

    RKEY            reduce using rule 92 (key_element_list -> key_element COMA key_element_list .)


state 167

    (90) key_element -> elemento . DOS_PUNTOS elemento

    DOS_PUNTOS      shift and go to state 150


state 168

    (90) key_element -> elemento DOS_PUNTOS elemento .

    COMA            reduce using rule 90 (key_element -> elemento DOS_PUNTOS elemento .)
    RKEY            reduce using rule 90 (key_element -> elemento DOS_PUNTOS elemento .)


state 169

    (89) set -> LESS_THAN tipo_coleccion GREATER_THAN LKEY . RKEY

    RKEY            shift and go to state 180


state 170

    (39) input -> STDIN DOT READLINESYNC LPAREN . RPAREN

    RPAREN          shift and go to state 181


state 171

    (93) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else
    (94) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 182


state 172

    (84) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 183


state 173

    (85) do_while -> DO LKEY programa RKEY WHILE LPAREN . comparacion_logica RPAREN SEMICOLON
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion_logica             shift and go to state 184
    comparacion                    shift and go to state 78
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 174

    (83) for -> FOR LPAREN instruccion_for RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 185


state 175

    (81) instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE . asignador expresion
    (82) instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE . modificador
    (21) asignador -> . ASSIGN
    (22) asignador -> . PLUS_ASSIGN
    (23) asignador -> . MINUS_ASSIGN
    (24) asignador -> . TIMES_ASSIGN
    (25) asignador -> . DIVIDE_ASSIGN
    (26) asignador -> . MODULO_ASSIGN
    (19) modificador -> . INCREMENT_VAR
    (20) modificador -> . DECREMENT_VAR

    ASSIGN          shift and go to state 37
    PLUS_ASSIGN     shift and go to state 38
    MINUS_ASSIGN    shift and go to state 39
    TIMES_ASSIGN    shift and go to state 40
    DIVIDE_ASSIGN   shift and go to state 41
    MODULO_ASSIGN   shift and go to state 42
    INCREMENT_VAR   shift and go to state 35
    DECREMENT_VAR   shift and go to state 36

    asignador                      shift and go to state 186
    modificador                    shift and go to state 187

state 176

    (75) tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .

    VARIABLE        reduce using rule 75 (tipo_dato -> MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN .)


state 177

    (98) parametros -> tipo_dato VARIABLE COMA parametros .

    RPAREN          reduce using rule 98 (parametros -> tipo_dato VARIABLE COMA parametros .)


state 178

    (13) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa . RKEY

    RKEY            shift and go to state 188


state 179

    (14) funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    IF              reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DO              reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    SET             reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    $end            reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 14 (funcion -> tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY .)


state 180

    (89) set -> LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY .

    SEMICOLON       reduce using rule 89 (set -> LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY .)
    RPAREN          reduce using rule 89 (set -> LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY .)


state 181

    (39) input -> STDIN DOT READLINESYNC LPAREN RPAREN .

    SEMICOLON       reduce using rule 39 (input -> STDIN DOT READLINESYNC LPAREN RPAREN .)
    RPAREN          reduce using rule 39 (input -> STDIN DOT READLINESYNC LPAREN RPAREN .)


state 182

    (93) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (94) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .
    (95) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (96) bloques_else -> . ELSE LKEY programa RKEY

    VARIABLE        reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    SET             reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 94 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    ELSE            shift and go to state 190

    bloques_else                   shift and go to state 189

state 183

    (84) while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IF              reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DO              reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    SET             reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    $end            reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 84 (while -> WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY .)


state 184

    (85) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica . RPAREN SEMICOLON

    RPAREN          shift and go to state 191


state 185

    (83) for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    IF              reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    DO              reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    SET             reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    $end            reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 83 (for -> FOR LPAREN instruccion_for RPAREN LKEY programa RKEY .)


state 186

    (81) instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE asignador . expresion
    (27) expresion -> . operacion
    (28) expresion -> . comparacion
    (29) expresion -> . list
    (30) expresion -> . diccionario
    (31) expresion -> . set
    (32) expresion -> . input
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (45) comparacion -> . operacion comparador operacion
    (64) list -> . LBRACKETS element_list RBRACKETS
    (65) list -> . LBRACKETS RBRACKETS
    (86) diccionario -> . LKEY key_element_list RKEY
    (87) diccionario -> . LKEY RKEY
    (88) set -> . LKEY element_list RKEY
    (89) set -> . LESS_THAN tipo_coleccion GREATER_THAN LKEY RKEY
    (39) input -> . STDIN DOT READLINESYNC LPAREN RPAREN
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    LBRACKETS       shift and go to state 71
    LKEY            shift and go to state 72
    LESS_THAN       shift and go to state 73
    STDIN           shift and go to state 74
    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    expresion                      shift and go to state 192
    operacion                      shift and go to state 65
    comparacion                    shift and go to state 66
    list                           shift and go to state 67
    diccionario                    shift and go to state 68
    set                            shift and go to state 69
    input                          shift and go to state 70
    elemento                       shift and go to state 47

state 187

    (82) instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE modificador .

    RPAREN          reduce using rule 82 (instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE modificador .)


state 188

    (13) funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .

    VARIABLE        reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    PRINT           reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    IF              reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RETURN          reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    WHILE           reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DO              reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    FOR             reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    IMPORT          reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VOID            reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    INT_TYPE        reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    LIST            reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    MAP             reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    SET             reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    $end            reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)
    RKEY            reduce using rule 13 (funcion -> tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY .)


state 189

    (93) condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FOR             reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IMPORT          reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    SET             reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 93 (condicional -> IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)


state 190

    (95) bloques_else -> ELSE . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (96) bloques_else -> ELSE . LKEY programa RKEY

    IF              shift and go to state 193
    LKEY            shift and go to state 194


state 191

    (85) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 195


state 192

    (81) instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE asignador expresion .

    RPAREN          reduce using rule 81 (instruccion_for -> asignar_variable comparacion_logica SEMICOLON VARIABLE asignador expresion .)


state 193

    (95) bloques_else -> ELSE IF . LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else

    LPAREN          shift and go to state 196


state 194

    (96) bloques_else -> ELSE LKEY . programa RKEY
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 197
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 195

    (85) do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .

    VARIABLE        reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IF              reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RETURN          reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DO              reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    FOR             reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    IMPORT          reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VOID            reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    VAR_TYPE        reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    INT_TYPE        reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    STRING_TYPE     reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    BOOL_TYPE       reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    LIST            reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    MAP             reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    SET             reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    $end            reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)
    RKEY            reduce using rule 85 (do_while -> DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON .)


state 196

    (95) bloques_else -> ELSE IF LPAREN . comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (46) comparacion_logica -> . comparacion
    (47) comparacion_logica -> . comparacion operador_logico comparacion_logica
    (45) comparacion -> . operacion comparador operacion
    (57) operacion -> . elemento
    (58) operacion -> . elemento operador operacion
    (40) elemento -> . INT
    (41) elemento -> . VARIABLE
    (42) elemento -> . DOUBLE
    (43) elemento -> . STRING
    (44) elemento -> . BOOLEAN

    INT             shift and go to state 48
    VARIABLE        shift and go to state 49
    DOUBLE          shift and go to state 50
    STRING          shift and go to state 51
    BOOLEAN         shift and go to state 52

    comparacion_logica             shift and go to state 198
    comparacion                    shift and go to state 78
    operacion                      shift and go to state 80
    elemento                       shift and go to state 47

state 197

    (96) bloques_else -> ELSE LKEY programa . RKEY

    RKEY            shift and go to state 199


state 198

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica . RPAREN LKEY programa RKEY bloques_else

    RPAREN          shift and go to state 200


state 199

    (96) bloques_else -> ELSE LKEY programa RKEY .

    VARIABLE        reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    PRINT           reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    IF              reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    RETURN          reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    WHILE           reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    DO              reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    FOR             reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    IMPORT          reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    VOID            reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    VAR_TYPE        reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    INT_TYPE        reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    STRING_TYPE     reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    DOUBLE_TYPE     reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    BOOL_TYPE       reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    LIST            reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    MAP             reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    SET             reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    $end            reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)
    RKEY            reduce using rule 96 (bloques_else -> ELSE LKEY programa RKEY .)


state 200

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN . LKEY programa RKEY bloques_else

    LKEY            shift and go to state 201


state 201

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY . programa RKEY bloques_else
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . asignar_variable
    (4) sentencias -> . cambiar_variable
    (5) sentencias -> . impresion
    (6) sentencias -> . condicional
    (7) sentencias -> . funcion
    (8) sentencias -> . retorno
    (9) sentencias -> . while
    (10) sentencias -> . do_while
    (11) sentencias -> . for
    (12) sentencias -> . import
    (15) asignar_variable -> . tipo_dato VARIABLE asignador expresion SEMICOLON
    (16) asignar_variable -> . tipo_dato VARIABLE SEMICOLON
    (17) cambiar_variable -> . VARIABLE modificador SEMICOLON
    (18) cambiar_variable -> . VARIABLE asignador expresion SEMICOLON
    (36) impresion -> . PRINT LPAREN operacion RPAREN SEMICOLON
    (37) impresion -> . PRINT LPAREN comparacion_logica RPAREN SEMICOLON
    (38) impresion -> . PRINT LPAREN RPAREN SEMICOLON
    (93) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (94) condicional -> . IF LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (13) funcion -> . tipo_dato VARIABLE LPAREN parametros RPAREN LKEY programa RKEY
    (14) funcion -> . tipo_dato VARIABLE LPAREN RPAREN LKEY programa RKEY
    (33) retorno -> . RETURN SEMICOLON
    (34) retorno -> . RETURN operacion SEMICOLON
    (84) while -> . WHILE LPAREN comparacion_logica RPAREN LKEY programa RKEY
    (85) do_while -> . DO LKEY programa RKEY WHILE LPAREN comparacion_logica RPAREN SEMICOLON
    (83) for -> . FOR LPAREN instruccion_for RPAREN LKEY programa RKEY
    (35) import -> . IMPORT STRING SEMICOLON
    (68) tipo_dato -> . VOID
    (69) tipo_dato -> . VAR_TYPE
    (70) tipo_dato -> . INT_TYPE
    (71) tipo_dato -> . STRING_TYPE
    (72) tipo_dato -> . DOUBLE_TYPE
    (73) tipo_dato -> . BOOL_TYPE
    (74) tipo_dato -> . LIST LESS_THAN tipo_coleccion GREATER_THAN
    (75) tipo_dato -> . MAP LESS_THAN tipo_coleccion COMA tipo_coleccion GREATER_THAN
    (76) tipo_dato -> . SET LESS_THAN tipo_coleccion GREATER_THAN

    VARIABLE        shift and go to state 14
    PRINT           shift and go to state 15
    IF              shift and go to state 16
    RETURN          shift and go to state 17
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    IMPORT          shift and go to state 21
    VOID            shift and go to state 22
    VAR_TYPE        shift and go to state 23
    INT_TYPE        shift and go to state 24
    STRING_TYPE     shift and go to state 25
    DOUBLE_TYPE     shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    LIST            shift and go to state 28
    MAP             shift and go to state 29
    SET             shift and go to state 30

    programa                       shift and go to state 202
    sentencias                     shift and go to state 2
    asignar_variable               shift and go to state 3
    cambiar_variable               shift and go to state 4
    impresion                      shift and go to state 5
    condicional                    shift and go to state 6
    funcion                        shift and go to state 7
    retorno                        shift and go to state 8
    while                          shift and go to state 9
    do_while                       shift and go to state 10
    for                            shift and go to state 11
    import                         shift and go to state 12
    tipo_dato                      shift and go to state 13

state 202

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa . RKEY bloques_else

    RKEY            shift and go to state 203


state 203

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY . bloques_else
    (95) bloques_else -> . ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else
    (96) bloques_else -> . ELSE LKEY programa RKEY

    ELSE            shift and go to state 190

    bloques_else                   shift and go to state 204

state 204

    (95) bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .

    VARIABLE        reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    PRINT           reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IF              reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RETURN          reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    WHILE           reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DO              reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    FOR             reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    IMPORT          reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VOID            reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    VAR_TYPE        reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    INT_TYPE        reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    STRING_TYPE     reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    DOUBLE_TYPE     reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    BOOL_TYPE       reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    LIST            reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    MAP             reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    SET             reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    $end            reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)
    RKEY            reduce using rule 95 (bloques_else -> ELSE IF LPAREN comparacion_logica RPAREN LKEY programa RKEY bloques_else .)

